
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092cc  080092cc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080092cc  080092cc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092cc  080092cc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080092d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f3c  20000088  0800935c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fc4  0800935c  00020fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019858  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003664  00000000  00000000  00039909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0003e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac7d  00000000  00000000  0003faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b47b  00000000  00000000  0005a71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095813  00000000  00000000  00075b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b3ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  0010b400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ca8 	.word	0x08008ca8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08008ca8 	.word	0x08008ca8

0800014c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <SELECT+0x14>)
 8000158:	f002 fbb8 	bl	80028cc <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010800 	.word	0x40010800

08000164 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <DESELECT+0x14>)
 8000170:	f002 fbac 	bl	80028cc <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000186:	bf00      	nop
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <SPI_TxByte+0x30>)
 800018a:	f003 fe36 	bl	8003dfa <HAL_SPI_GetState>
 800018e:	4603      	mov	r3, r0
 8000190:	2b01      	cmp	r3, #1
 8000192:	d1f9      	bne.n	8000188 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000194:	1df9      	adds	r1, r7, #7
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	2201      	movs	r2, #1
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <SPI_TxByte+0x30>)
 800019e:	f003 fa5f 	bl	8003660 <HAL_SPI_Transmit>
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000a64 	.word	0x20000a64

080001b0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001b6:	23ff      	movs	r3, #255	; 0xff
 80001b8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001be:	bf00      	nop
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <SPI_RxByte+0x38>)
 80001c2:	f003 fe1a 	bl	8003dfa <HAL_SPI_GetState>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d1f9      	bne.n	80001c0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80001cc:	1dba      	adds	r2, r7, #6
 80001ce:	1df9      	adds	r1, r7, #7
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_RxByte+0x38>)
 80001da:	f003 fb7d 	bl	80038d8 <HAL_SPI_TransmitReceive>

  return data;
 80001de:	79bb      	ldrb	r3, [r7, #6]
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000a64 	.word	0x20000a64

080001ec <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80001f4:	f7ff ffdc 	bl	80001b0 <SPI_RxByte>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	701a      	strb	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SD_ReadyWait+0x34>)
 8000210:	2232      	movs	r2, #50	; 0x32
 8000212:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000214:	f7ff ffcc 	bl	80001b0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000218:	f7ff ffca 	bl	80001b0 <SPI_RxByte>
 800021c:	4603      	mov	r3, r0
 800021e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	2bff      	cmp	r3, #255	; 0xff
 8000224:	d004      	beq.n	8000230 <SD_ReadyWait+0x28>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <SD_ReadyWait+0x34>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1f3      	bne.n	8000218 <SD_ReadyWait+0x10>

  return res;
 8000230:	79fb      	ldrb	r3, [r7, #7]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000b48 	.word	0x20000b48

08000240 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000246:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800024a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800024c:	f7ff ff8a 	bl	8000164 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
 8000254:	e005      	b.n	8000262 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000256:	20ff      	movs	r0, #255	; 0xff
 8000258:	f7ff ff90 	bl	800017c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	3301      	adds	r3, #1
 8000260:	613b      	str	r3, [r7, #16]
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	2b09      	cmp	r3, #9
 8000266:	ddf6      	ble.n	8000256 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000268:	f7ff ff70 	bl	800014c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800026c:	2340      	movs	r3, #64	; 0x40
 800026e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000280:	2395      	movs	r3, #149	; 0x95
 8000282:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e009      	b.n	800029e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800028a:	1d3a      	adds	r2, r7, #4
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff72 	bl	800017c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b05      	cmp	r3, #5
 80002a2:	ddf2      	ble.n	800028a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80002a4:	e002      	b.n	80002ac <SD_PowerOn+0x6c>
  {
    Count--;
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002ac:	f7ff ff80 	bl	80001b0 <SPI_RxByte>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d002      	beq.n	80002bc <SD_PowerOn+0x7c>
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f4      	bne.n	80002a6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80002bc:	f7ff ff52 	bl	8000164 <DESELECT>
  SPI_TxByte(0XFF);
 80002c0:	20ff      	movs	r0, #255	; 0xff
 80002c2:	f7ff ff5b 	bl	800017c <SPI_TxByte>

  PowerFlag = 1;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <SD_PowerOn+0x94>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000a5 	.word	0x200000a5

080002d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <SD_PowerOff+0x14>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200000a5 	.word	0x200000a5

080002f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80002f4:	4b02      	ldr	r3, [pc, #8]	; (8000300 <SD_CheckPower+0x10>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	200000a5 	.word	0x200000a5

08000304 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <SD_RxDataBlock+0x68>)
 8000310:	220a      	movs	r2, #10
 8000312:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000314:	f7ff ff4c 	bl	80001b0 <SPI_RxByte>
 8000318:	4603      	mov	r3, r0
 800031a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2bff      	cmp	r3, #255	; 0xff
 8000320:	d104      	bne.n	800032c <SD_RxDataBlock+0x28>
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <SD_RxDataBlock+0x68>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f3      	bne.n	8000314 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2bfe      	cmp	r3, #254	; 0xfe
 8000330:	d001      	beq.n	8000336 <SD_RxDataBlock+0x32>
    return FALSE;
 8000332:	2300      	movs	r3, #0
 8000334:	e016      	b.n	8000364 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	1c5a      	adds	r2, r3, #1
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff55 	bl	80001ec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	607a      	str	r2, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff4f 	bl	80001ec <SPI_RxBytePtr>
  } while(btr -= 2);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3b02      	subs	r3, #2
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ed      	bne.n	8000336 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800035a:	f7ff ff29 	bl	80001b0 <SPI_RxByte>
  SPI_RxByte();
 800035e:	f7ff ff27 	bl	80001b0 <SPI_RxByte>

  return TRUE;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000b49 	.word	0x20000b49

08000370 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000380:	f7ff ff42 	bl	8000208 <SD_ReadyWait>
 8000384:	4603      	mov	r3, r0
 8000386:	2bff      	cmp	r3, #255	; 0xff
 8000388:	d001      	beq.n	800038e <SD_TxDataBlock+0x1e>
    return FALSE;
 800038a:	2300      	movs	r3, #0
 800038c:	e040      	b.n	8000410 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fef3 	bl	800017c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2bfd      	cmp	r3, #253	; 0xfd
 800039a:	d031      	beq.n	8000400 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fee7 	bl	800017c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fee0 	bl	800017c <SPI_TxByte>
    } while (--wc);
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	3b01      	subs	r3, #1
 80003c0:	73bb      	strb	r3, [r7, #14]
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1eb      	bne.n	80003a0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80003c8:	f7ff fef2 	bl	80001b0 <SPI_RxByte>
    SPI_RxByte();
 80003cc:	f7ff fef0 	bl	80001b0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80003d0:	e00b      	b.n	80003ea <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80003d2:	f7ff feed 	bl	80001b0 <SPI_RxByte>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	f003 031f 	and.w	r3, r3, #31
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d006      	beq.n	80003f2 <SD_TxDataBlock+0x82>
        break;

      i++;
 80003e4:	7b7b      	ldrb	r3, [r7, #13]
 80003e6:	3301      	adds	r3, #1
 80003e8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80003ea:	7b7b      	ldrb	r3, [r7, #13]
 80003ec:	2b40      	cmp	r3, #64	; 0x40
 80003ee:	d9f0      	bls.n	80003d2 <SD_TxDataBlock+0x62>
 80003f0:	e000      	b.n	80003f4 <SD_TxDataBlock+0x84>
        break;
 80003f2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80003f4:	bf00      	nop
 80003f6:	f7ff fedb 	bl	80001b0 <SPI_RxByte>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0fa      	beq.n	80003f6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f003 031f 	and.w	r3, r3, #31
 8000406:	2b05      	cmp	r3, #5
 8000408:	d101      	bne.n	800040e <SD_TxDataBlock+0x9e>
    return TRUE;
 800040a:	2301      	movs	r3, #1
 800040c:	e000      	b.n	8000410 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000424:	f7ff fef0 	bl	8000208 <SD_ReadyWait>
 8000428:	4603      	mov	r3, r0
 800042a:	2bff      	cmp	r3, #255	; 0xff
 800042c:	d001      	beq.n	8000432 <SD_SendCmd+0x1a>
    return 0xFF;
 800042e:	23ff      	movs	r3, #255	; 0xff
 8000430:	e040      	b.n	80004b4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fea1 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	0e1b      	lsrs	r3, r3, #24
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe9b 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe95 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe8f 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fe8a 	bl	800017c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b40      	cmp	r3, #64	; 0x40
 8000470:	d101      	bne.n	8000476 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000472:	2395      	movs	r3, #149	; 0x95
 8000474:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b48      	cmp	r3, #72	; 0x48
 800047a:	d101      	bne.n	8000480 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800047c:	2387      	movs	r3, #135	; 0x87
 800047e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe7a 	bl	800017c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b4c      	cmp	r3, #76	; 0x4c
 800048c:	d101      	bne.n	8000492 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800048e:	f7ff fe8f 	bl	80001b0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000492:	230a      	movs	r3, #10
 8000494:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000496:	f7ff fe8b 	bl	80001b0 <SPI_RxByte>
 800049a:	4603      	mov	r3, r0
 800049c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800049e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	da05      	bge.n	80004b2 <SD_SendCmd+0x9a>
 80004a6:	7bbb      	ldrb	r3, [r7, #14]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	73bb      	strb	r3, [r7, #14]
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f1      	bne.n	8000496 <SD_SendCmd+0x7e>

  return res;
 80004b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e0d5      	b.n	800067c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80004d0:	4b6c      	ldr	r3, [pc, #432]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <SD_disk_initialize+0x2a>
    return Stat;
 80004de:	4b69      	ldr	r3, [pc, #420]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	e0ca      	b.n	800067c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80004e6:	f7ff feab 	bl	8000240 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80004ea:	f7ff fe2f 	bl	800014c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80004f2:	2100      	movs	r1, #0
 80004f4:	2040      	movs	r0, #64	; 0x40
 80004f6:	f7ff ff8f 	bl	8000418 <SD_SendCmd>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	f040 80a5 	bne.w	800064c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000502:	4b61      	ldr	r3, [pc, #388]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000504:	2264      	movs	r2, #100	; 0x64
 8000506:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000508:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800050c:	2048      	movs	r0, #72	; 0x48
 800050e:	f7ff ff83 	bl	8000418 <SD_SendCmd>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d158      	bne.n	80005ca <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e00c      	b.n	8000538 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800051e:	7bfc      	ldrb	r4, [r7, #15]
 8000520:	f7ff fe46 	bl	80001b0 <SPI_RxByte>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4423      	add	r3, r4
 800052e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	3301      	adds	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d9ef      	bls.n	800051e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	2b01      	cmp	r3, #1
 8000542:	f040 8083 	bne.w	800064c <SD_disk_initialize+0x190>
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	2baa      	cmp	r3, #170	; 0xaa
 800054a:	d17f      	bne.n	800064c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800054c:	2100      	movs	r1, #0
 800054e:	2077      	movs	r0, #119	; 0x77
 8000550:	f7ff ff62 	bl	8000418 <SD_SendCmd>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d807      	bhi.n	800056a <SD_disk_initialize+0xae>
 800055a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800055e:	2069      	movs	r0, #105	; 0x69
 8000560:	f7ff ff5a 	bl	8000418 <SD_SendCmd>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <SD_disk_initialize+0x1cc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1eb      	bne.n	800054c <SD_disk_initialize+0x90>
 8000574:	e000      	b.n	8000578 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000576:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <SD_disk_initialize+0x1cc>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d064      	beq.n	800064c <SD_disk_initialize+0x190>
 8000582:	2100      	movs	r1, #0
 8000584:	207a      	movs	r0, #122	; 0x7a
 8000586:	f7ff ff47 	bl	8000418 <SD_SendCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d15d      	bne.n	800064c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00c      	b.n	80005b0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000596:	7bfc      	ldrb	r4, [r7, #15]
 8000598:	f7ff fe0a 	bl	80001b0 <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4423      	add	r3, r4
 80005a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d9ef      	bls.n	8000596 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x108>
 80005c0:	2306      	movs	r3, #6
 80005c2:	e000      	b.n	80005c6 <SD_disk_initialize+0x10a>
 80005c4:	2302      	movs	r3, #2
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e040      	b.n	800064c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005ca:	2100      	movs	r1, #0
 80005cc:	2077      	movs	r0, #119	; 0x77
 80005ce:	f7ff ff23 	bl	8000418 <SD_SendCmd>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d808      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005d8:	2100      	movs	r1, #0
 80005da:	2069      	movs	r0, #105	; 0x69
 80005dc:	f7ff ff1c 	bl	8000418 <SD_SendCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d801      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SD_disk_initialize+0x130>
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d10e      	bne.n	8000612 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80005f4:	2100      	movs	r1, #0
 80005f6:	2077      	movs	r0, #119	; 0x77
 80005f8:	f7ff ff0e 	bl	8000418 <SD_SendCmd>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d80e      	bhi.n	8000620 <SD_disk_initialize+0x164>
 8000602:	2100      	movs	r1, #0
 8000604:	2069      	movs	r0, #105	; 0x69
 8000606:	f7ff ff07 	bl	8000418 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000610:	e00d      	b.n	800062e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000612:	2100      	movs	r1, #0
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f7ff feff 	bl	8000418 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1e1      	bne.n	80005ee <SD_disk_initialize+0x132>
 800062a:	e000      	b.n	800062e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800062c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <SD_disk_initialize+0x18c>
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	2050      	movs	r0, #80	; 0x50
 800063e:	f7ff feeb 	bl	8000418 <SD_SendCmd>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SD_disk_initialize+0x1d0>)
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000652:	f7ff fd87 	bl	8000164 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000656:	f7ff fdab 	bl	80001b0 <SPI_RxByte>

  if (type)
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SD_disk_initialize+0x1c8>)
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e001      	b.n	8000676 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000672:	f7ff fe31 	bl	80002d8 <SD_PowerOff>
  }

  return Stat;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000b49 	.word	0x20000b49
 800068c:	200000a4 	.word	0x200000a4

08000690 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e002      	b.n	80006aa <SD_disk_status+0x1a>

  return Stat;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_disk_status+0x24>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000

080006b8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <SD_disk_read+0x1c>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <SD_disk_read+0x20>
    return RES_PARERR;
 80006d4:	2304      	movs	r3, #4
 80006d6:	e051      	b.n	800077c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SD_disk_read+0xcc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SD_disk_read+0x32>
    return RES_NOTRDY;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e048      	b.n	800077c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SD_disk_read+0xd0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	607b      	str	r3, [r7, #4]

  SELECT();
 80006fc:	f7ff fd26 	bl	800014c <SELECT>

  if (count == 1)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d111      	bne.n	800072a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2051      	movs	r0, #81	; 0x51
 800070a:	f7ff fe85 	bl	8000418 <SD_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d129      	bne.n	8000768 <SD_disk_read+0xb0>
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	f7ff fdf3 	bl	8000304 <SD_RxDataBlock>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d021      	beq.n	8000768 <SD_disk_read+0xb0>
      count = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	e01e      	b.n	8000768 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2052      	movs	r0, #82	; 0x52
 800072e:	f7ff fe73 	bl	8000418 <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d117      	bne.n	8000768 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f7ff fde1 	bl	8000304 <SD_RxDataBlock>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800074e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1ed      	bne.n	8000738 <SD_disk_read+0x80>
 800075c:	e000      	b.n	8000760 <SD_disk_read+0xa8>
          break;
 800075e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	204c      	movs	r0, #76	; 0x4c
 8000764:	f7ff fe58 	bl	8000418 <SD_SendCmd>
    }
  }

  DESELECT();
 8000768:	f7ff fcfc 	bl	8000164 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800076c:	f7ff fd20 	bl	80001b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	200000a4 	.word	0x200000a4

0800078c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <SD_disk_write+0x1c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SD_disk_write+0x20>
    return RES_PARERR;
 80007a8:	2304      	movs	r3, #4
 80007aa:	e06b      	b.n	8000884 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SD_disk_write+0x100>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ba:	2303      	movs	r3, #3
 80007bc:	e062      	b.n	8000884 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <SD_disk_write+0x100>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007cc:	2302      	movs	r3, #2
 80007ce:	e059      	b.n	8000884 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <SD_disk_write+0x104>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	607b      	str	r3, [r7, #4]

  SELECT();
 80007e2:	f7ff fcb3 	bl	800014c <SELECT>

  if (count == 1)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d110      	bne.n	800080e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	2058      	movs	r0, #88	; 0x58
 80007f0:	f7ff fe12 	bl	8000418 <SD_SendCmd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d13a      	bne.n	8000870 <SD_disk_write+0xe4>
 80007fa:	21fe      	movs	r1, #254	; 0xfe
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f7ff fdb7 	bl	8000370 <SD_TxDataBlock>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d033      	beq.n	8000870 <SD_disk_write+0xe4>
      count = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e030      	b.n	8000870 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SD_disk_write+0x104>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2077      	movs	r0, #119	; 0x77
 800081e:	f7ff fdfb 	bl	8000418 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2057      	movs	r0, #87	; 0x57
 8000826:	f7ff fdf7 	bl	8000418 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2059      	movs	r0, #89	; 0x59
 800082e:	f7ff fdf3 	bl	8000418 <SD_SendCmd>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11b      	bne.n	8000870 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000838:	21fc      	movs	r1, #252	; 0xfc
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fd98 	bl	8000370 <SD_TxDataBlock>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800084c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1ee      	bne.n	8000838 <SD_disk_write+0xac>
 800085a:	e000      	b.n	800085e <SD_disk_write+0xd2>
          break;
 800085c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800085e:	21fd      	movs	r1, #253	; 0xfd
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd85 	bl	8000370 <SD_TxDataBlock>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <SD_disk_write+0xe4>
      {
        count = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000870:	f7ff fc78 	bl	8000164 <DESELECT>
  SPI_RxByte();
 8000874:	f7ff fc9c 	bl	80001b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	200000a4 	.word	0x200000a4

08000894 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	603a      	str	r2, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	460b      	mov	r3, r1
 80008a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e11b      	b.n	8000aea <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d129      	bne.n	8000912 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d017      	beq.n	80008f6 <SD_disk_ioctl+0x62>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	dc1f      	bgt.n	800090a <SD_disk_ioctl+0x76>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <SD_disk_ioctl+0x40>
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d00b      	beq.n	80008ea <SD_disk_ioctl+0x56>
 80008d2:	e01a      	b.n	800090a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80008d4:	f7ff fd0c 	bl	80002f0 <SD_CheckPower>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80008de:	f7ff fcfb 	bl	80002d8 <SD_PowerOff>
      res = RES_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008e8:	e0fd      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80008ea:	f7ff fca9 	bl	8000240 <SD_PowerOn>
      res = RES_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008f4:	e0f7      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	1c5c      	adds	r4, r3, #1
 80008fa:	f7ff fcf9 	bl	80002f0 <SD_CheckPower>
 80008fe:	4603      	mov	r3, r0
 8000900:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000902:	2300      	movs	r3, #0
 8000904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000908:	e0ed      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800090a:	2304      	movs	r3, #4
 800090c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000910:	e0e9      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000912:	4b78      	ldr	r3, [pc, #480]	; (8000af4 <SD_disk_ioctl+0x260>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000920:	2303      	movs	r3, #3
 8000922:	e0e2      	b.n	8000aea <SD_disk_ioctl+0x256>

    SELECT();
 8000924:	f7ff fc12 	bl	800014c <SELECT>

    switch (ctrl)
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b0d      	cmp	r3, #13
 800092c:	f200 80cc 	bhi.w	8000ac8 <SD_disk_ioctl+0x234>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <SD_disk_ioctl+0xa4>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000a33 	.word	0x08000a33
 800093c:	08000971 	.word	0x08000971
 8000940:	08000a23 	.word	0x08000a23
 8000944:	08000ac9 	.word	0x08000ac9
 8000948:	08000ac9 	.word	0x08000ac9
 800094c:	08000ac9 	.word	0x08000ac9
 8000950:	08000ac9 	.word	0x08000ac9
 8000954:	08000ac9 	.word	0x08000ac9
 8000958:	08000ac9 	.word	0x08000ac9
 800095c:	08000ac9 	.word	0x08000ac9
 8000960:	08000ac9 	.word	0x08000ac9
 8000964:	08000a45 	.word	0x08000a45
 8000968:	08000a69 	.word	0x08000a69
 800096c:	08000a8d 	.word	0x08000a8d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000970:	2100      	movs	r1, #0
 8000972:	2049      	movs	r0, #73	; 0x49
 8000974:	f7ff fd50 	bl	8000418 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 80a8 	bne.w	8000ad0 <SD_disk_ioctl+0x23c>
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2110      	movs	r1, #16
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fcbc 	bl	8000304 <SD_RxDataBlock>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 809e 	beq.w	8000ad0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	099b      	lsrs	r3, r3, #6
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10e      	bne.n	80009bc <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800099e:	7d7b      	ldrb	r3, [r7, #21]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	7d3b      	ldrb	r3, [r7, #20]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009b2:	8bfb      	ldrh	r3, [r7, #30]
 80009b4:	029a      	lsls	r2, r3, #10
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e02e      	b.n	8000a1a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009bc:	7c7b      	ldrb	r3, [r7, #17]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	7dbb      	ldrb	r3, [r7, #22]
 80009c6:	09db      	lsrs	r3, r3, #7
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	7d7b      	ldrb	r3, [r7, #21]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 0306 	and.w	r3, r3, #6
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3302      	adds	r3, #2
 80009e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009e4:	7d3b      	ldrb	r3, [r7, #20]
 80009e6:	099b      	lsrs	r3, r3, #6
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	7cbb      	ldrb	r3, [r7, #18]
 80009fa:	029b      	lsls	r3, r3, #10
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4413      	add	r3, r2
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3301      	adds	r3, #1
 8000a0a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a0c:	8bfa      	ldrh	r2, [r7, #30]
 8000a0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a12:	3b09      	subs	r3, #9
 8000a14:	409a      	lsls	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a20:	e056      	b.n	8000ad0 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a28:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a30:	e055      	b.n	8000ade <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a32:	f7ff fbe9 	bl	8000208 <SD_ReadyWait>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d14b      	bne.n	8000ad4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a42:	e047      	b.n	8000ad4 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a44:	2100      	movs	r1, #0
 8000a46:	2049      	movs	r0, #73	; 0x49
 8000a48:	f7ff fce6 	bl	8000418 <SD_SendCmd>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d142      	bne.n	8000ad8 <SD_disk_ioctl+0x244>
 8000a52:	2110      	movs	r1, #16
 8000a54:	6a38      	ldr	r0, [r7, #32]
 8000a56:	f7ff fc55 	bl	8000304 <SD_RxDataBlock>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d03b      	beq.n	8000ad8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a66:	e037      	b.n	8000ad8 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a68:	2100      	movs	r1, #0
 8000a6a:	204a      	movs	r0, #74	; 0x4a
 8000a6c:	f7ff fcd4 	bl	8000418 <SD_SendCmd>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d132      	bne.n	8000adc <SD_disk_ioctl+0x248>
 8000a76:	2110      	movs	r1, #16
 8000a78:	6a38      	ldr	r0, [r7, #32]
 8000a7a:	f7ff fc43 	bl	8000304 <SD_RxDataBlock>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d02b      	beq.n	8000adc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a8a:	e027      	b.n	8000adc <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	207a      	movs	r0, #122	; 0x7a
 8000a90:	f7ff fcc2 	bl	8000418 <SD_SendCmd>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d116      	bne.n	8000ac8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aa0:	e00b      	b.n	8000aba <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000aa2:	6a3c      	ldr	r4, [r7, #32]
 8000aa4:	1c63      	adds	r3, r4, #1
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	f7ff fb82 	bl	80001b0 <SPI_RxByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d9ef      	bls.n	8000aa2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ace:	e006      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000ad0:	bf00      	nop
 8000ad2:	e004      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000ad4:	bf00      	nop
 8000ad6:	e002      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000ad8:	bf00      	nop
 8000ada:	e000      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000adc:	bf00      	nop
    }

    DESELECT();
 8000ade:	f7ff fb41 	bl	8000164 <DESELECT>
    SPI_RxByte();
 8000ae2:	f7ff fb65 	bl	80001b0 <SPI_RxByte>
  }

  return res;
 8000ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	372c      	adds	r7, #44	; 0x2c
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 ffd0 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f820 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 fafe 	bl	8001104 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b08:	f000 fade 	bl	80010c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b0c:	f000 f876 	bl	8000bfc <MX_ADC1_Init>
  MX_I2C2_Init();
 8000b10:	f000 f8c2 	bl	8000c98 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b14:	f000 f8ee 	bl	8000cf4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b18:	f000 f9a0 	bl	8000e5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b1c:	f000 fa0e 	bl	8000f3c <MX_TIM3_Init>
  MX_FATFS_Init();
 8000b20:	f004 fc2c 	bl	800537c <MX_FATFS_Init>
  MX_TIM4_Init();
 8000b24:	f000 fa58 	bl	8000fd8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000b28:	f000 f91a 	bl	8000d60 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 faa2 	bl	8001074 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  fresult = SD_Init();
 8000b30:	f000 fb78 	bl	8001224 <SD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <main+0x48>)
 8000b3a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x44>
 8000b3e:	bf00      	nop
 8000b40:	20000a60 	.word	0x20000a60

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4e:	2228      	movs	r2, #40	; 0x28
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f007 fc66 	bl	8008424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 f80c 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ba6:	f000 fb1b 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fa76 	bl	80030b8 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd2:	f000 fb05 	bl	80011e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fc02 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bee:	f000 faf7 	bl	80011e0 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3750      	adds	r7, #80	; 0x50
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <MX_ADC1_Init+0x98>)
 8000c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c28:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c3c:	f000 ff92 	bl	8001b64 <HAL_ADC_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c46:	f000 facb 	bl	80011e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c52:	2307      	movs	r3, #7
 8000c54:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c5c:	f001 f85a 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 fabb 	bl	80011e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c6a:	2309      	movs	r3, #9
 8000c6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c78:	f001 f84c 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c82:	f000 faad 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200009a4 	.word	0x200009a4
 8000c94:	40012400 	.word	0x40012400

08000c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <MX_I2C2_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_I2C2_Init+0x58>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cd6:	f001 fe2b 	bl	8002930 <HAL_I2C_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 fa7e 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000908 	.word	0x20000908
 8000cec:	40005800 	.word	0x40005800
 8000cf0:	000186a0 	.word	0x000186a0

08000cf4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MX_SPI1_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d28:	2210      	movs	r2, #16
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d46:	f002 fc07 	bl	8003558 <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d50:	f000 fa46 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000a64 	.word	0x20000a64
 8000d5c:	40013000 	.word	0x40013000

08000d60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <MX_TIM1_Init+0xf8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d92:	2247      	movs	r2, #71	; 0x47
 8000d94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d9e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db6:	4827      	ldr	r0, [pc, #156]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000db8:	f003 f8e6 	bl	8003f88 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000dc2:	f000 fa0d 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000dd4:	f003 fb6e 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000dde:	f000 f9ff 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000de4:	f003 f972 	bl	80040cc <HAL_TIM_IC_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dee:	f000 f9f7 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000e02:	f003 fe4f 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000e0c:	f000 f9e8 	bl	80011e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000e28:	f003 fab0 	bl	800438c <HAL_TIM_IC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e32:	f000 f9d5 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000e3e:	f003 faa5 	bl	800438c <HAL_TIM_IC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000e48:	f000 f9ca 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000a18 	.word	0x20000a18
 8000e58:	40012c00 	.word	0x40012c00

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e90:	2247      	movs	r2, #71	; 0x47
 8000e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e9c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eae:	4822      	ldr	r0, [pc, #136]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000eb0:	f003 f86a 	bl	8003f88 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000eba:	f000 f991 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000ecc:	f003 faf2 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ed6:	f000 f983 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eda:	4817      	ldr	r0, [pc, #92]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000edc:	f003 f8f6 	bl	80040cc <HAL_TIM_IC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ee6:	f000 f97b 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000efa:	f003 fdd3 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f04:	f000 f96c 	bl	80011e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000f20:	f003 fa34 	bl	800438c <HAL_TIM_IC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f2a:	f000 f959 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000abc 	.word	0x20000abc

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_TIM3_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f60:	2247      	movs	r2, #71	; 0x47
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f6c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7e:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f80:	f003 f802 	bl	8003f88 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f929 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f9c:	f003 fa8a 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 f91b 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000fb8:	f003 fd74 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fc2:	f000 f90d 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000095c 	.word	0x2000095c
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM4_Init+0x94>)
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_TIM4_Init+0x98>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_TIM4_Init+0x94>)
 8000ffc:	2247      	movs	r2, #71	; 0x47
 8000ffe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM4_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_TIM4_Init+0x94>)
 8001008:	f242 720f 	movw	r2, #9999	; 0x270f
 800100c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_TIM4_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM4_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_TIM4_Init+0x94>)
 800101c:	f002 ffb4 	bl	8003f88 <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f8db 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_TIM4_Init+0x94>)
 8001038:	f003 fa3c 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f8cd 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_TIM4_Init+0x94>)
 8001054:	f003 fd26 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800105e:	f000 f8bf 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200008c0 	.word	0x200008c0
 8001070:	40000800 	.word	0x40000800

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_USART2_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001080:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010ac:	f003 fd6a 	bl	8004b84 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f893 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000b04 	.word	0x20000b04
 80010c4:	40004400 	.word	0x40004400

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_DMA_Init+0x38>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MX_DMA_Init+0x38>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_DMA_Init+0x38>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200b      	movs	r0, #11
 80010ec:	f001 f823 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010f0:	200b      	movs	r0, #11
 80010f2:	f001 f83c 	bl	800216e <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <MX_GPIO_Init+0xd4>)
 8001180:	f001 fba4 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_GPIO_Init+0xd8>)
 800118c:	f001 fb9e 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0xd4>)
 80011aa:	f001 fa0b 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011bc:	2301      	movs	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_GPIO_Init+0xd8>)
 80011c8:	f001 f9fc 	bl	80025c4 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40010800 	.word	0x40010800

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <bufclear>:
		i++;
	return i;
}

void bufclear(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
	for (int i=0; i<SD_BUFFSIZE; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	e009      	b.n	800120c <bufclear+0x20>
		sdCard.buffer[i] = '\0';
 80011f8:	4a09      	ldr	r2, [pc, #36]	; (8001220 <bufclear+0x34>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<SD_BUFFSIZE; i++)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b1f      	cmp	r3, #31
 8001210:	ddf2      	ble.n	80011f8 <bufclear+0xc>
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200002e0 	.word	0x200002e0

08001224 <SD_Init>:

FRESULT SD_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	int len;
	fresult = f_mount(&sdCard.fs, "", 0);
 800122a:	2200      	movs	r2, #0
 800122c:	4931      	ldr	r1, [pc, #196]	; (80012f4 <SD_Init+0xd0>)
 800122e:	4832      	ldr	r0, [pc, #200]	; (80012f8 <SD_Init+0xd4>)
 8001230:	f006 fbe8 	bl	8007a04 <f_mount>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <SD_Init+0xd8>)
 800123a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <SD_Init+0xd8>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <SD_Init+0x26>
		return fresult;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <SD_Init+0xd8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	e050      	b.n	80012ec <SD_Init+0xc8>

	fresult = SD_createFile();
 800124a:	f000 f865 	bl	8001318 <SD_createFile>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <SD_Init+0xd8>)
 8001254:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SD_Init+0xd8>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <SD_Init+0x40>
		return fresult;
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <SD_Init+0xd8>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	e043      	b.n	80012ec <SD_Init+0xc8>

	len = sprintf(sdCard.buffer,"\n");
 8001264:	4926      	ldr	r1, [pc, #152]	; (8001300 <SD_Init+0xdc>)
 8001266:	4827      	ldr	r0, [pc, #156]	; (8001304 <SD_Init+0xe0>)
 8001268:	f007 f8e4 	bl	8008434 <siprintf>
 800126c:	6078      	str	r0, [r7, #4]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <SD_Init+0xe4>)
 8001272:	4924      	ldr	r1, [pc, #144]	; (8001304 <SD_Init+0xe0>)
 8001274:	4825      	ldr	r0, [pc, #148]	; (800130c <SD_Init+0xe8>)
 8001276:	f006 fd8d 	bl	8007d94 <f_write>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <SD_Init+0xd8>)
 8001280:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <SD_Init+0xd8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <SD_Init+0x6c>
		return fresult;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <SD_Init+0xd8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	e02d      	b.n	80012ec <SD_Init+0xc8>

	fresult = f_close(&sdCard.fil);
 8001290:	481e      	ldr	r0, [pc, #120]	; (800130c <SD_Init+0xe8>)
 8001292:	f006 ffb5 	bl	8008200 <f_close>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <SD_Init+0xd8>)
 800129c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <SD_Init+0xd8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <SD_Init+0x88>
		return fresult;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <SD_Init+0xd8>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	e01f      	b.n	80012ec <SD_Init+0xc8>

	bufclear();
 80012ac:	f7ff ff9e 	bl	80011ec <bufclear>

	LDEBUG;
 80012b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <SD_Init+0xec>)
 80012b6:	f001 fb21 	bl	80028fc <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SD_Init+0xd4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
	sdCard.blen = 0;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <SD_Init+0xd4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <SD_Init+0xd4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <SD_Init+0xd4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f8a3 25d0 	strh.w	r2, [r3, #1488]	; 0x5d0
	sdCard.timer = 0;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <SD_Init+0xd4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f8a3 25d2 	strh.w	r2, [r3, #1490]	; 0x5d2

	HAL_TIM_Base_Start_IT(&htim2);
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <SD_Init+0xf0>)
 80012e4:	f002 fea0 	bl	8004028 <HAL_TIM_Base_Start_IT>

	return fresult;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SD_Init+0xd8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	08008cc0 	.word	0x08008cc0
 80012f8:	200002e0 	.word	0x200002e0
 80012fc:	20000a60 	.word	0x20000a60
 8001300:	08008cc4 	.word	0x08008cc4
 8001304:	20000744 	.word	0x20000744
 8001308:	200008bc 	.word	0x200008bc
 800130c:	20000710 	.word	0x20000710
 8001310:	40011000 	.word	0x40011000
 8001314:	20000abc 	.word	0x20000abc

08001318 <SD_createFile>:

FRESULT SD_createFile(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	int filnum = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	490f      	ldr	r1, [pc, #60]	; (8001364 <SD_createFile+0x4c>)
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <SD_createFile+0x50>)
 8001328:	f007 f884 	bl	8008434 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 800132c:	2206      	movs	r2, #6
 800132e:	490e      	ldr	r1, [pc, #56]	; (8001368 <SD_createFile+0x50>)
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <SD_createFile+0x54>)
 8001332:	f006 fbaf 	bl	8007a94 <f_open>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <SD_createFile+0x58>)
 800133c:	701a      	strb	r2, [r3, #0]
		filnum++;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <SD_createFile+0x5c>)
 800134a:	f001 fad7 	bl	80028fc <HAL_GPIO_TogglePin>
	}while(fresult == FR_EXIST);
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SD_createFile+0x58>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d0e5      	beq.n	8001322 <SD_createFile+0xa>

	return fresult;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SD_createFile+0x58>)
 8001358:	781b      	ldrb	r3, [r3, #0]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08008cc8 	.word	0x08008cc8
 8001368:	200008a4 	.word	0x200008a4
 800136c:	20000710 	.word	0x20000710
 8001370:	20000a60 	.word	0x20000a60
 8001374:	40011000 	.word	0x40011000

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a33      	ldr	r2, [pc, #204]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d15f      	bne.n	80014bc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001448:	2303      	movs	r3, #3
 800144a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4619      	mov	r1, r3
 8001452:	481e      	ldr	r0, [pc, #120]	; (80014cc <HAL_ADC_MspInit+0xf0>)
 8001454:	f001 f8b6 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145c:	2303      	movs	r3, #3
 800145e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	4619      	mov	r1, r3
 8001466:	481a      	ldr	r0, [pc, #104]	; (80014d0 <HAL_ADC_MspInit+0xf4>)
 8001468:	f001 f8ac 	bl	80025c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_ADC_MspInit+0xfc>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 8001496:	2220      	movs	r2, #32
 8001498:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 80014a2:	f000 fe7f 	bl	80021a4 <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80014ac:	f7ff fe98 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_ADC_MspInit+0xf8>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40012400 	.word	0x40012400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	200009d4 	.word	0x200009d4
 80014d8:	40020008 	.word	0x40020008

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a16      	ldr	r2, [pc, #88]	; (8001550 <HAL_I2C_MspInit+0x74>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d124      	bne.n	8001546 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x78>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_I2C_MspInit+0x78>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_I2C_MspInit+0x78>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001514:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <HAL_I2C_MspInit+0x7c>)
 800152a:	f001 f84b 	bl	80025c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_I2C_MspInit+0x78>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x78>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_I2C_MspInit+0x78>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40005800 	.word	0x40005800
 8001554:	40021000 	.word	0x40021000
 8001558:	40010c00 	.word	0x40010c00

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a26      	ldr	r2, [pc, #152]	; (8001610 <HAL_SPI_MspInit+0xb4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d145      	bne.n	8001608 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_SPI_MspInit+0xb8>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a24      	ldr	r2, [pc, #144]	; (8001614 <HAL_SPI_MspInit+0xb8>)
 8001582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_SPI_MspInit+0xb8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_SPI_MspInit+0xb8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_SPI_MspInit+0xb8>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_SPI_MspInit+0xb8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80015ac:	2328      	movs	r3, #40	; 0x28
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4816      	ldr	r0, [pc, #88]	; (8001618 <HAL_SPI_MspInit+0xbc>)
 80015c0:	f001 f800 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015c4:	2310      	movs	r3, #16
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_SPI_MspInit+0xbc>)
 80015d8:	f000 fff4 	bl	80025c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_SPI_MspInit+0xc0>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_SPI_MspInit+0xc0>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	210f      	movs	r1, #15
 80015fc:	2023      	movs	r0, #35	; 0x23
 80015fe:	f000 fd9a 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001602:	2023      	movs	r0, #35	; 0x23
 8001604:	f000 fdb3 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40013000 	.word	0x40013000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010c00 	.word	0x40010c00
 800161c:	40010000 	.word	0x40010000

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a59      	ldr	r2, [pc, #356]	; (80017a0 <HAL_TIM_Base_MspInit+0x180>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d145      	bne.n	80016cc <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001640:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4619      	mov	r1, r3
 8001684:	4848      	ldr	r0, [pc, #288]	; (80017a8 <HAL_TIM_Base_MspInit+0x188>)
 8001686:	f000 ff9d 	bl	80025c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2018      	movs	r0, #24
 8001690:	f000 fd51 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001694:	2018      	movs	r0, #24
 8001696:	f000 fd6a 	bl	800216e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2019      	movs	r0, #25
 80016a0:	f000 fd49 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016a4:	2019      	movs	r0, #25
 80016a6:	f000 fd62 	bl	800216e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	201a      	movs	r0, #26
 80016b0:	f000 fd41 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80016b4:	201a      	movs	r0, #26
 80016b6:	f000 fd5a 	bl	800216e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	201b      	movs	r0, #27
 80016c0:	f000 fd39 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016c4:	201b      	movs	r0, #27
 80016c6:	f000 fd52 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016ca:	e064      	b.n	8001796 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d4:	d12c      	bne.n	8001730 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a32      	ldr	r2, [pc, #200]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	4a2c      	ldr	r2, [pc, #176]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6193      	str	r3, [r2, #24]
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170e:	2302      	movs	r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	4619      	mov	r1, r3
 8001718:	4823      	ldr	r0, [pc, #140]	; (80017a8 <HAL_TIM_Base_MspInit+0x188>)
 800171a:	f000 ff53 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	201c      	movs	r0, #28
 8001724:	f000 fd07 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001728:	201c      	movs	r0, #28
 800172a:	f000 fd20 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 800172e:	e032      	b.n	8001796 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_TIM_Base_MspInit+0x18c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d114      	bne.n	8001764 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	210d      	movs	r1, #13
 8001756:	201d      	movs	r0, #29
 8001758:	f000 fced 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800175c:	201d      	movs	r0, #29
 800175e:	f000 fd06 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 8001762:	e018      	b.n	8001796 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_TIM_Base_MspInit+0x190>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d113      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_Base_MspInit+0x184>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	210f      	movs	r1, #15
 800178a:	201e      	movs	r0, #30
 800178c:	f000 fcd3 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001790:	201e      	movs	r0, #30
 8001792:	f000 fcec 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40012c00 	.word	0x40012c00
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40000800 	.word	0x40000800

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_UART_MspInit+0x98>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d137      	bne.n	8001844 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_UART_MspInit+0x9c>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_UART_MspInit+0x9c>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	61d3      	str	r3, [r2, #28]
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_UART_MspInit+0x9c>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_UART_MspInit+0x9c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_UART_MspInit+0x9c>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_UART_MspInit+0x9c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	480f      	ldr	r0, [pc, #60]	; (8001854 <HAL_UART_MspInit+0xa0>)
 8001818:	f000 fed4 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800181c:	2308      	movs	r3, #8
 800181e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	4809      	ldr	r0, [pc, #36]	; (8001854 <HAL_UART_MspInit+0xa0>)
 8001830:	f000 fec8 	bl	80025c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2026      	movs	r0, #38	; 0x26
 800183a:	f000 fc7c 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800183e:	2026      	movs	r0, #38	; 0x26
 8001840:	f000 fc95 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40004400 	.word	0x40004400
 8001850:	40021000 	.word	0x40021000
 8001854:	40010800 	.word	0x40010800

08001858 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <SDTimer_Handler+0x3c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <SDTimer_Handler+0x1c>
    Timer1--;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <SDTimer_Handler+0x3c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <SDTimer_Handler+0x3c>)
 8001872:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <SDTimer_Handler+0x40>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <SDTimer_Handler+0x34>
    Timer2--;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SDTimer_Handler+0x40>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <SDTimer_Handler+0x40>)
 800188a:	701a      	strb	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000b49 	.word	0x20000b49
 8001898:	20000b48 	.word	0x20000b48

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <SysTick_Handler+0x30>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <SysTick_Handler+0x30>)
 80018f0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <SysTick_Handler+0x30>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b09      	cmp	r3, #9
 80018fa:	d904      	bls.n	8001906 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Handler+0x30>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001902:	f7ff ffa9 	bl	8001858 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 f911 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000a6 	.word	0x200000a6

08001914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <DMA1_Channel1_IRQHandler+0x10>)
 800191a:	f000 fd4d 	bl	80023b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200009d4 	.word	0x200009d4

08001928 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM1_BRK_IRQHandler+0x10>)
 800192e:	f002 fc25 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000a18 	.word	0x20000a18

0800193c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM1_UP_IRQHandler+0x10>)
 8001942:	f002 fc1b 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000a18 	.word	0x20000a18

08001950 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001956:	f002 fc11 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000a18 	.word	0x20000a18

08001964 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <TIM1_CC_IRQHandler+0x10>)
 800196a:	f002 fc07 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000a18 	.word	0x20000a18

08001978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM2_IRQHandler+0x10>)
 800197e:	f002 fbfd 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000abc 	.word	0x20000abc

0800198c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM3_IRQHandler+0x10>)
 8001992:	f002 fbf3 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000095c 	.word	0x2000095c

080019a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM4_IRQHandler+0x10>)
 80019a6:	f002 fbe9 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200008c0 	.word	0x200008c0

080019b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <SPI1_IRQHandler+0x10>)
 80019ba:	f002 f92f 	bl	8003c1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000a64 	.word	0x20000a64

080019c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART2_IRQHandler+0x10>)
 80019ce:	f003 f927 	bl	8004c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000b04 	.word	0x20000b04

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f006 fce0 	bl	80083d0 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20005000 	.word	0x20005000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	200000a8 	.word	0x200000a8
 8001a44:	20000fc8 	.word	0x20000fc8

08001a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a7a:	f7ff ffe5 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f006 fcad 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a82:	f7ff f839 	bl	8000af8 <main>
  bx lr
 8001a86:	4770      	bx	lr
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a90:	080092d4 	.word	0x080092d4
  ldr r2, =_sbss
 8001a94:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a98:	20000fc4 	.word	0x20000fc4

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_Init+0x28>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_Init+0x28>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 fb35 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fc5c 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fb4d 	bl	800218a <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 fb15 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000004 	.word	0x20000004
 8001b24:	2000000c 	.word	0x2000000c
 8001b28:	20000008 	.word	0x20000008

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_IncTick+0x20>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <HAL_IncTick+0x20>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000b4c 	.word	0x20000b4c

08001b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <HAL_GetTick+0x10>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000b4c 	.word	0x20000b4c

08001b64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0be      	b.n	8001d04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fc1a 	bl	80013dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f9ab 	bl	8001f04 <ADC_ConversionStop_Disable>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8099 	bne.w	8001cf2 <HAL_ADC_Init+0x18e>
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 8095 	bne.w	8001cf2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bd0:	f023 0302 	bic.w	r3, r3, #2
 8001bd4:	f043 0202 	orr.w	r2, r3, #2
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7b1b      	ldrb	r3, [r3, #12]
 8001bea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bfc:	d003      	beq.n	8001c06 <HAL_ADC_Init+0xa2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_Init+0xa8>
 8001c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_Init+0xaa>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7d1b      	ldrb	r3, [r3, #20]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7b1b      	ldrb	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	035a      	lsls	r2, r3, #13
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e00b      	b.n	8001c50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_ADC_Init+0x1a8>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c80:	d003      	beq.n	8001c8a <HAL_ADC_Init+0x126>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_ADC_Init+0x1ac>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cce:	e018      	b.n	8001d02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f023 0312 	bic.w	r3, r3, #18
 8001cd8:	f043 0210 	orr.w	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf0:	e007      	b.n	8001d02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	f043 0210 	orr.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	ffe1f7fd 	.word	0xffe1f7fd
 8001d10:	ff1f0efe 	.word	0xff1f0efe

08001d14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x20>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0dc      	b.n	8001eee <HAL_ADC_ConfigChannel+0x1da>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d81c      	bhi.n	8001d7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b05      	subs	r3, #5
 8001d56:	221f      	movs	r2, #31
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4019      	ands	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b05      	subs	r3, #5
 8001d70:	fa00 f203 	lsl.w	r2, r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7c:	e03c      	b.n	8001df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d81c      	bhi.n	8001dc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b23      	subs	r3, #35	; 0x23
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4019      	ands	r1, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b23      	subs	r3, #35	; 0x23
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbe:	e01b      	b.n	8001df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b41      	subs	r3, #65	; 0x41
 8001dd2:	221f      	movs	r2, #31
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b41      	subs	r3, #65	; 0x41
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d91c      	bls.n	8001e3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b1e      	subs	r3, #30
 8001e12:	2207      	movs	r2, #7
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4019      	ands	r1, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6898      	ldr	r0, [r3, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b1e      	subs	r3, #30
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	e019      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6919      	ldr	r1, [r3, #16]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4019      	ands	r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6898      	ldr	r0, [r3, #8]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	fa00 f203 	lsl.w	r2, r0, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d003      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e7a:	2b11      	cmp	r3, #17
 8001e7c:	d132      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d125      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d126      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ea4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d11a      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_ADC_ConfigChannel+0x1e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_ADC_ConfigChannel+0x1ec>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9a      	lsrs	r2, r3, #18
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ed2:	e007      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40012400 	.word	0x40012400
 8001efc:	20000004 	.word	0x20000004
 8001f00:	431bde83 	.word	0x431bde83

08001f04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d12e      	bne.n	8001f7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f2e:	f7ff fe0f 	bl	8001b50 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f34:	e01b      	b.n	8001f6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f36:	f7ff fe0b 	bl	8001b50 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d914      	bls.n	8001f6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10d      	bne.n	8001f6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e007      	b.n	8001f7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d0dc      	beq.n	8001f36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4906      	ldr	r1, [pc, #24]	; (8002020 <__NVIC_EnableIRQ+0x34>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff90 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff2d 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff42 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff90 	bl	8002078 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5f 	bl	8002024 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff35 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e043      	b.n	8002242 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_DMA_Init+0xa8>)
 80021c2:	4413      	add	r3, r2
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_DMA_Init+0xac>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_DMA_Init+0xb0>)
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	bffdfff8 	.word	0xbffdfff8
 8002250:	cccccccd 	.word	0xcccccccd
 8002254:	40020000 	.word	0x40020000

08002258 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800226a:	2b02      	cmp	r3, #2
 800226c:	d008      	beq.n	8002280 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2204      	movs	r2, #4
 8002272:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e020      	b.n	80022c2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020e 	bic.w	r2, r2, #14
 800228e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d005      	beq.n	80022ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2204      	movs	r2, #4
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e051      	b.n	8002392 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 020e 	bic.w	r2, r2, #14
 80022fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_DMA_Abort_IT+0xd0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d029      	beq.n	800236c <HAL_DMA_Abort_IT+0xa0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_DMA_Abort_IT+0xd4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_DMA_Abort_IT+0x9c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_DMA_Abort_IT+0xd8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d01a      	beq.n	8002362 <HAL_DMA_Abort_IT+0x96>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_DMA_Abort_IT+0xdc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d012      	beq.n	800235c <HAL_DMA_Abort_IT+0x90>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_DMA_Abort_IT+0xe0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00a      	beq.n	8002356 <HAL_DMA_Abort_IT+0x8a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_DMA_Abort_IT+0xe4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d102      	bne.n	8002350 <HAL_DMA_Abort_IT+0x84>
 800234a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800234e:	e00e      	b.n	800236e <HAL_DMA_Abort_IT+0xa2>
 8002350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002354:	e00b      	b.n	800236e <HAL_DMA_Abort_IT+0xa2>
 8002356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235a:	e008      	b.n	800236e <HAL_DMA_Abort_IT+0xa2>
 800235c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002360:	e005      	b.n	800236e <HAL_DMA_Abort_IT+0xa2>
 8002362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002366:	e002      	b.n	800236e <HAL_DMA_Abort_IT+0xa2>
 8002368:	2310      	movs	r3, #16
 800236a:	e000      	b.n	800236e <HAL_DMA_Abort_IT+0xa2>
 800236c:	2301      	movs	r3, #1
 800236e:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_DMA_Abort_IT+0xe8>)
 8002370:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
    } 
  }
  return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40020008 	.word	0x40020008
 80023a0:	4002001c 	.word	0x4002001c
 80023a4:	40020030 	.word	0x40020030
 80023a8:	40020044 	.word	0x40020044
 80023ac:	40020058 	.word	0x40020058
 80023b0:	4002006c 	.word	0x4002006c
 80023b4:	40020000 	.word	0x40020000

080023b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2204      	movs	r2, #4
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d04f      	beq.n	8002480 <HAL_DMA_IRQHandler+0xc8>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d04a      	beq.n	8002480 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_DMA_IRQHandler+0x1f0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d029      	beq.n	8002466 <HAL_DMA_IRQHandler+0xae>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a65      	ldr	r2, [pc, #404]	; (80025ac <HAL_DMA_IRQHandler+0x1f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d022      	beq.n	8002462 <HAL_DMA_IRQHandler+0xaa>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a63      	ldr	r2, [pc, #396]	; (80025b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01a      	beq.n	800245c <HAL_DMA_IRQHandler+0xa4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a62      	ldr	r2, [pc, #392]	; (80025b4 <HAL_DMA_IRQHandler+0x1fc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d012      	beq.n	8002456 <HAL_DMA_IRQHandler+0x9e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a60      	ldr	r2, [pc, #384]	; (80025b8 <HAL_DMA_IRQHandler+0x200>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00a      	beq.n	8002450 <HAL_DMA_IRQHandler+0x98>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5f      	ldr	r2, [pc, #380]	; (80025bc <HAL_DMA_IRQHandler+0x204>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d102      	bne.n	800244a <HAL_DMA_IRQHandler+0x92>
 8002444:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002448:	e00e      	b.n	8002468 <HAL_DMA_IRQHandler+0xb0>
 800244a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800244e:	e00b      	b.n	8002468 <HAL_DMA_IRQHandler+0xb0>
 8002450:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002454:	e008      	b.n	8002468 <HAL_DMA_IRQHandler+0xb0>
 8002456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800245a:	e005      	b.n	8002468 <HAL_DMA_IRQHandler+0xb0>
 800245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002460:	e002      	b.n	8002468 <HAL_DMA_IRQHandler+0xb0>
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	e000      	b.n	8002468 <HAL_DMA_IRQHandler+0xb0>
 8002466:	2304      	movs	r3, #4
 8002468:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <HAL_DMA_IRQHandler+0x208>)
 800246a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8094 	beq.w	800259e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800247e:	e08e      	b.n	800259e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2202      	movs	r2, #2
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d056      	beq.n	800253e <HAL_DMA_IRQHandler+0x186>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d051      	beq.n	800253e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 020a 	bic.w	r2, r2, #10
 80024b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a38      	ldr	r2, [pc, #224]	; (80025a8 <HAL_DMA_IRQHandler+0x1f0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d029      	beq.n	800251e <HAL_DMA_IRQHandler+0x166>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a37      	ldr	r2, [pc, #220]	; (80025ac <HAL_DMA_IRQHandler+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_DMA_IRQHandler+0x162>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a35      	ldr	r2, [pc, #212]	; (80025b0 <HAL_DMA_IRQHandler+0x1f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x15c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_DMA_IRQHandler+0x1fc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d012      	beq.n	800250e <HAL_DMA_IRQHandler+0x156>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a32      	ldr	r2, [pc, #200]	; (80025b8 <HAL_DMA_IRQHandler+0x200>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00a      	beq.n	8002508 <HAL_DMA_IRQHandler+0x150>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a31      	ldr	r2, [pc, #196]	; (80025bc <HAL_DMA_IRQHandler+0x204>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d102      	bne.n	8002502 <HAL_DMA_IRQHandler+0x14a>
 80024fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002500:	e00e      	b.n	8002520 <HAL_DMA_IRQHandler+0x168>
 8002502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002506:	e00b      	b.n	8002520 <HAL_DMA_IRQHandler+0x168>
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	e008      	b.n	8002520 <HAL_DMA_IRQHandler+0x168>
 800250e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002512:	e005      	b.n	8002520 <HAL_DMA_IRQHandler+0x168>
 8002514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002518:	e002      	b.n	8002520 <HAL_DMA_IRQHandler+0x168>
 800251a:	2320      	movs	r3, #32
 800251c:	e000      	b.n	8002520 <HAL_DMA_IRQHandler+0x168>
 800251e:	2302      	movs	r3, #2
 8002520:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_DMA_IRQHandler+0x208>)
 8002522:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d034      	beq.n	800259e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800253c:	e02f      	b.n	800259e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2208      	movs	r2, #8
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d028      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x1e8>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 020e 	bic.w	r2, r2, #14
 8002566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
    }
  }
  return;
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
}
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40020008 	.word	0x40020008
 80025ac:	4002001c 	.word	0x4002001c
 80025b0:	40020030 	.word	0x40020030
 80025b4:	40020044 	.word	0x40020044
 80025b8:	40020058 	.word	0x40020058
 80025bc:	4002006c 	.word	0x4002006c
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b08b      	sub	sp, #44	; 0x2c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	e169      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d8:	2201      	movs	r2, #1
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8158 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a9a      	ldr	r2, [pc, #616]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d05e      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002600:	4a98      	ldr	r2, [pc, #608]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d875      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002606:	4a98      	ldr	r2, [pc, #608]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d058      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 800260c:	4a96      	ldr	r2, [pc, #600]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d86f      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002612:	4a96      	ldr	r2, [pc, #600]	; (800286c <HAL_GPIO_Init+0x2a8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d052      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002618:	4a94      	ldr	r2, [pc, #592]	; (800286c <HAL_GPIO_Init+0x2a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d869      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800261e:	4a94      	ldr	r2, [pc, #592]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d04c      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002624:	4a92      	ldr	r2, [pc, #584]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d863      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800262a:	4a92      	ldr	r2, [pc, #584]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d046      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002630:	4a90      	ldr	r2, [pc, #576]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d85d      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002636:	2b12      	cmp	r3, #18
 8002638:	d82a      	bhi.n	8002690 <HAL_GPIO_Init+0xcc>
 800263a:	2b12      	cmp	r3, #18
 800263c:	d859      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_GPIO_Init+0x80>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080026bf 	.word	0x080026bf
 8002648:	08002699 	.word	0x08002699
 800264c:	080026ab 	.word	0x080026ab
 8002650:	080026ed 	.word	0x080026ed
 8002654:	080026f3 	.word	0x080026f3
 8002658:	080026f3 	.word	0x080026f3
 800265c:	080026f3 	.word	0x080026f3
 8002660:	080026f3 	.word	0x080026f3
 8002664:	080026f3 	.word	0x080026f3
 8002668:	080026f3 	.word	0x080026f3
 800266c:	080026f3 	.word	0x080026f3
 8002670:	080026f3 	.word	0x080026f3
 8002674:	080026f3 	.word	0x080026f3
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026f3 	.word	0x080026f3
 8002680:	080026f3 	.word	0x080026f3
 8002684:	080026f3 	.word	0x080026f3
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026b5 	.word	0x080026b5
 8002690:	4a79      	ldr	r2, [pc, #484]	; (8002878 <HAL_GPIO_Init+0x2b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002696:	e02c      	b.n	80026f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e029      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	3304      	adds	r3, #4
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e024      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	3308      	adds	r3, #8
 80026b0:	623b      	str	r3, [r7, #32]
          break;
 80026b2:	e01f      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	330c      	adds	r3, #12
 80026ba:	623b      	str	r3, [r7, #32]
          break;
 80026bc:	e01a      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c6:	2304      	movs	r3, #4
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e013      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d4:	2308      	movs	r3, #8
 80026d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	611a      	str	r2, [r3, #16]
          break;
 80026de:	e009      	b.n	80026f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	615a      	str	r2, [r3, #20]
          break;
 80026ea:	e003      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          break;
 80026f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d801      	bhi.n	80026fe <HAL_GPIO_Init+0x13a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e001      	b.n	8002702 <HAL_GPIO_Init+0x13e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d802      	bhi.n	8002710 <HAL_GPIO_Init+0x14c>
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x152>
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3b08      	subs	r3, #8
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	210f      	movs	r1, #15
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b1 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x2b8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <HAL_GPIO_Init+0x2c0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_GPIO_Init+0x1ec>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_GPIO_Init+0x2c4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00d      	beq.n	80027ac <HAL_GPIO_Init+0x1e8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3e      	ldr	r2, [pc, #248]	; (800288c <HAL_GPIO_Init+0x2c8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0x1e4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <HAL_GPIO_Init+0x2cc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_GPIO_Init+0x1e0>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e004      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e002      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027b0:	2300      	movs	r3, #0
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	f002 0203 	and.w	r2, r2, #3
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	4093      	lsls	r3, r2
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027c2:	492f      	ldr	r1, [pc, #188]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	492c      	ldr	r1, [pc, #176]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4928      	ldr	r1, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	43db      	mvns	r3, r3
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800281c:	4013      	ands	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4918      	ldr	r1, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	43db      	mvns	r3, r3
 8002842:	4914      	ldr	r1, [pc, #80]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002844:	4013      	ands	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
 8002860:	e021      	b.n	80028a6 <HAL_GPIO_Init+0x2e2>
 8002862:	bf00      	nop
 8002864:	10320000 	.word	0x10320000
 8002868:	10310000 	.word	0x10310000
 800286c:	10220000 	.word	0x10220000
 8002870:	10210000 	.word	0x10210000
 8002874:	10120000 	.word	0x10120000
 8002878:	10110000 	.word	0x10110000
 800287c:	40021000 	.word	0x40021000
 8002880:	40010000 	.word	0x40010000
 8002884:	40010800 	.word	0x40010800
 8002888:	40010c00 	.word	0x40010c00
 800288c:	40011000 	.word	0x40011000
 8002890:	40011400 	.word	0x40011400
 8002894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_GPIO_Init+0x304>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4909      	ldr	r1, [pc, #36]	; (80028c8 <HAL_GPIO_Init+0x304>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f ae8e 	bne.w	80025d8 <HAL_GPIO_Init+0x14>
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	372c      	adds	r7, #44	; 0x2c
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43d9      	mvns	r1, r3
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	400b      	ands	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
	...

08002930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e12b      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fdc0 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002994:	f000 fce4 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d807      	bhi.n	80029b4 <HAL_I2C_Init+0x84>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_I2C_Init+0x278>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e006      	b.n	80029c2 <HAL_I2C_Init+0x92>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	; (8002bac <HAL_I2C_Init+0x27c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e7      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_I2C_Init+0x280>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <HAL_I2C_Init+0xd4>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e009      	b.n	8002a18 <HAL_I2C_Init+0xe8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_I2C_Init+0x284>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	495c      	ldr	r1, [pc, #368]	; (8002ba4 <HAL_I2C_Init+0x274>)
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d819      	bhi.n	8002a6c <HAL_I2C_Init+0x13c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e59      	subs	r1, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_I2C_Init+0x138>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	e051      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e04f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_I2C_Init+0x168>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e012      	b.n	8002abe <HAL_I2C_Init+0x18e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x196>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_I2C_Init+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e58      	subs	r0, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6809      	ldr	r1, [r1, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6911      	ldr	r1, [r2, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	000186a0 	.word	0x000186a0
 8002ba8:	001e847f 	.word	0x001e847f
 8002bac:	003d08ff 	.word	0x003d08ff
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e26c      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8087 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d00c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be4:	4b8f      	ldr	r3, [pc, #572]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d112      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d06c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d168      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e246      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x76>
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7f      	ldr	r2, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e02e      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x98>
 8002c36:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a77      	ldr	r2, [pc, #476]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0xbc>
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c74:	4b6b      	ldr	r3, [pc, #428]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a67      	ldr	r2, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe ff5c 	bl	8001b50 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe ff58 	bl	8001b50 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e1fa      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe4>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe ff48 	bl	8001b50 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe ff44 	bl	8001b50 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1e6      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x10c>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1ba      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4939      	ldr	r1, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e03a      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe fefd 	bl	8001b50 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fef9 	bl	8001b50 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e19b      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4927      	ldr	r1, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe fedc 	bl	8001b50 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fed8 	bl	8001b50 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e17a      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03a      	beq.n	8002e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe febc 	bl	8001b50 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe feb8 	bl	8001b50 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e15a      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 fad8 	bl	80033b0 <RCC_Delay>
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fea2 	bl	8001b50 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe fe9e 	bl	8001b50 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d908      	bls.n	8002e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e140      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	42420000 	.word	0x42420000
 8002e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b9e      	ldr	r3, [pc, #632]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e9      	bne.n	8002e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a6 	beq.w	8002f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b97      	ldr	r3, [pc, #604]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b94      	ldr	r3, [pc, #592]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a93      	ldr	r2, [pc, #588]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]
 8002e66:	4b91      	ldr	r3, [pc, #580]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b8e      	ldr	r3, [pc, #568]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a8a      	ldr	r2, [pc, #552]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fe5f 	bl	8001b50 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe fe5b 	bl	8001b50 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	; 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0fd      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x312>
 8002ebc:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e02d      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x334>
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	4b73      	ldr	r3, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a72      	ldr	r2, [pc, #456]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	e01c      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x356>
 8002ef4:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a69      	ldr	r2, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002f0e:	4b67      	ldr	r3, [pc, #412]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a66      	ldr	r2, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b64      	ldr	r3, [pc, #400]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fe0f 	bl	8001b50 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fe0b 	bl	8001b50 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0ab      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCC_OscConfig+0x37e>
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fdf9 	bl	8001b50 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe fdf5 	bl	8001b50 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e095      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8081 	beq.w	80030a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	4b42      	ldr	r3, [pc, #264]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d061      	beq.n	8003070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d146      	bne.n	8003042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_OscConfig+0x4fc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe fdc9 	bl	8001b50 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fe fdc5 	bl	8001b50 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e067      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fea:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	492d      	ldr	r1, [pc, #180]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a19      	ldr	r1, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	430b      	orrs	r3, r1
 800300e:	4927      	ldr	r1, [pc, #156]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x4fc>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fd99 	bl	8001b50 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe fd95 	bl	8001b50 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e037      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x46a>
 8003040:	e02f      	b.n	80030a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_RCC_OscConfig+0x4fc>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fd82 	bl	8001b50 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe fd7e 	bl	8001b50 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e020      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x498>
 800306e:	e018      	b.n	80030a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e013      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42420060 	.word	0x42420060

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4965      	ldr	r1, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800311e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fe fcd2 	bl	8001b50 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fe fcce 	bl	8001b50 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e053      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d210      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fc30 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
 8003280:	08008d30 	.word	0x08008d30
 8003284:	20000004 	.word	0x20000004
 8003288:	20000008 	.word	0x20000008

0800328c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	b490      	push	{r4, r7}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003294:	1d3c      	adds	r4, r7, #4
 8003296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800329c:	f240 2301 	movw	r3, #513	; 0x201
 80032a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x46>
 80032ca:	e02d      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ce:	623b      	str	r3, [r7, #32]
      break;
 80032d0:	e02d      	b.n	800332e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	0c9b      	lsrs	r3, r3, #18
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032de:	4413      	add	r3, r2
 80032e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c5b      	lsrs	r3, r3, #17
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032fe:	4413      	add	r3, r2
 8003300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003304:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	4a0e      	ldr	r2, [pc, #56]	; (8003344 <HAL_RCC_GetSysClockFreq+0xb8>)
 800330a:	fb02 f203 	mul.w	r2, r2, r3
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	e004      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0xbc>)
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	623b      	str	r3, [r7, #32]
      break;
 8003326:	e002      	b.n	800332e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCC_GetSysClockFreq+0xb8>)
 800332a:	623b      	str	r3, [r7, #32]
      break;
 800332c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332e:	6a3b      	ldr	r3, [r7, #32]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bc90      	pop	{r4, r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	08008cd8 	.word	0x08008cd8
 8003340:	40021000 	.word	0x40021000
 8003344:	007a1200 	.word	0x007a1200
 8003348:	003d0900 	.word	0x003d0900

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <HAL_RCC_GetHCLKFreq+0x10>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003364:	f7ff fff2 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	08008d40 	.word	0x08008d40

08003388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800338c:	f7ff ffde 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0adb      	lsrs	r3, r3, #11
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08008d40 	.word	0x08008d40

080033b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <RCC_Delay+0x34>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <RCC_Delay+0x38>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	0a5b      	lsrs	r3, r3, #9
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033cc:	bf00      	nop
  }
  while (Delay --);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e5a      	subs	r2, r3, #1
 80033d2:	60fa      	str	r2, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f9      	bne.n	80033cc <RCC_Delay+0x1c>
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	20000004 	.word	0x20000004
 80033e8:	10624dd3 	.word	0x10624dd3

080033ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d07d      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340c:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	4a4b      	ldr	r2, [pc, #300]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	61d3      	str	r3, [r2, #28]
 8003424:	4b49      	ldr	r3, [pc, #292]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d118      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003440:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a42      	ldr	r2, [pc, #264]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344c:	f7fe fb80 	bl	8001b50 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	e008      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003454:	f7fe fb7c 	bl	8001b50 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e06d      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02e      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	429a      	cmp	r2, r3
 800348e:	d027      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003490:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800349a:	4b2e      	ldr	r3, [pc, #184]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d014      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fb4b 	bl	8001b50 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fe fb47 	bl	8001b50 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e036      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ee      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4917      	ldr	r1, [pc, #92]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003502:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	490b      	ldr	r1, [pc, #44]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4904      	ldr	r1, [pc, #16]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40007000 	.word	0x40007000
 8003554:	42420440 	.word	0x42420440

08003558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e076      	b.n	8003658 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d009      	beq.n	8003590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	e005      	b.n	8003590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd ffd6 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	0c1a      	lsrs	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 0204 	and.w	r2, r2, #4
 8003636:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_SPI_Transmit+0x22>
 800367e:	2302      	movs	r3, #2
 8003680:	e126      	b.n	80038d0 <HAL_SPI_Transmit+0x270>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368a:	f7fe fa61 	bl	8001b50 <HAL_GetTick>
 800368e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a4:	e10b      	b.n	80038be <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_SPI_Transmit+0x52>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036b6:	e102      	b.n	80038be <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d10f      	bne.n	8003720 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003746:	d14b      	bne.n	80037e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Transmit+0xf6>
 8003750:	8afb      	ldrh	r3, [r7, #22]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d13e      	bne.n	80037d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800377a:	e02b      	b.n	80037d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ae:	e011      	b.n	80037d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b0:	f7fe f9ce 	bl	8001b50 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d803      	bhi.n	80037c8 <HAL_SPI_Transmit+0x168>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Transmit+0x16e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037d2:	e074      	b.n	80038be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ce      	bne.n	800377c <HAL_SPI_Transmit+0x11c>
 80037de:	e04c      	b.n	800387a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_Transmit+0x18e>
 80037e8:	8afb      	ldrh	r3, [r7, #22]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d140      	bne.n	8003870 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003814:	e02c      	b.n	8003870 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d113      	bne.n	800384c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	86da      	strh	r2, [r3, #54]	; 0x36
 800384a:	e011      	b.n	8003870 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384c:	f7fe f980 	bl	8001b50 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d803      	bhi.n	8003864 <HAL_SPI_Transmit+0x204>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d102      	bne.n	800386a <HAL_SPI_Transmit+0x20a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800386e:	e026      	b.n	80038be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cd      	bne.n	8003816 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fb64 	bl	8003f4c <SPI_EndRxTxTransaction>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e000      	b.n	80038be <HAL_SPI_Transmit+0x25e>
  }

error:
 80038bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08c      	sub	sp, #48	; 0x30
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x26>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e18a      	b.n	8003c14 <HAL_SPI_TransmitReceive+0x33c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003906:	f7fe f923 	bl	8001b50 <HAL_GetTick>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003924:	2b01      	cmp	r3, #1
 8003926:	d00f      	beq.n	8003948 <HAL_SPI_TransmitReceive+0x70>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392e:	d107      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x68>
 8003938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800393c:	2b04      	cmp	r3, #4
 800393e:	d003      	beq.n	8003948 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003946:	e15b      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_SPI_TransmitReceive+0x82>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_TransmitReceive+0x82>
 8003954:	887b      	ldrh	r3, [r7, #2]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003960:	e14e      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b04      	cmp	r3, #4
 800396c:	d003      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2205      	movs	r2, #5
 8003972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	887a      	ldrh	r2, [r7, #2]
 8003986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	887a      	ldrh	r2, [r7, #2]
 800399e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d007      	beq.n	80039ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d2:	d178      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_SPI_TransmitReceive+0x10a>
 80039dc:	8b7b      	ldrh	r3, [r7, #26]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d166      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	881a      	ldrh	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a06:	e053      	b.n	8003ab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d11b      	bne.n	8003a4e <HAL_SPI_TransmitReceive+0x176>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d016      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x176>
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d113      	bne.n	8003a4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	881a      	ldrh	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	1c9a      	adds	r2, r3, #2
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d119      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x1b8>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	b292      	uxth	r2, r2
 8003a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a90:	f7fe f85e 	bl	8001b50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d807      	bhi.n	8003ab0 <HAL_SPI_TransmitReceive+0x1d8>
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d003      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aae:	e0a7      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1a6      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x130>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1a1      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x130>
 8003ac4:	e07c      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x1fc>
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d16b      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003afa:	e057      	b.n	8003bac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d11c      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x26c>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d017      	beq.n	8003b44 <HAL_SPI_TransmitReceive+0x26c>
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d114      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	7812      	ldrb	r2, [r2, #0]
 8003b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d119      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x2ae>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d014      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b82:	2301      	movs	r3, #1
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b86:	f7fd ffe3 	bl	8001b50 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d803      	bhi.n	8003b9e <HAL_SPI_TransmitReceive+0x2c6>
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d102      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x2cc>
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003baa:	e029      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1a2      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x224>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d19d      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f9c1 	bl	8003f4c <SPI_EndRxTxTransaction>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d006      	beq.n	8003bde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bdc:	e010      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	e000      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3730      	adds	r7, #48	; 0x30
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10f      	bne.n	8003c60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
    return;
 8003c5e:	e0be      	b.n	8003dde <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_SPI_IRQHandler+0x66>
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	09db      	lsrs	r3, r3, #7
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
    return;
 8003c80:	e0ad      	b.n	8003dde <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_SPI_IRQHandler+0x80>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80a1 	beq.w	8003dde <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 809a 	beq.w	8003dde <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d023      	beq.n	8003cfe <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d011      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	e00b      	b.n	8003cfe <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	693b      	ldr	r3, [r7, #16]
        return;
 8003cfc:	e06f      	b.n	8003dde <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d04f      	beq.n	8003ddc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <HAL_SPI_IRQHandler+0x14c>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d034      	beq.n	8003dd2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0203 	bic.w	r2, r2, #3
 8003d76:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d011      	beq.n	8003da4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_SPI_IRQHandler+0x1c8>)
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fa9d 	bl	80022cc <HAL_DMA_Abort_IT>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d016      	beq.n	8003dda <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_SPI_IRQHandler+0x1c8>)
 8003db2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fa87 	bl	80022cc <HAL_DMA_Abort_IT>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003dd0:	e003      	b.n	8003dda <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f808 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003dd8:	e000      	b.n	8003ddc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003dda:	bf00      	nop
    return;
 8003ddc:	bf00      	nop
  }
}
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	08003e15 	.word	0x08003e15

08003de8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e08:	b2db      	uxtb	r3, r3
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ffda 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e4c:	f7fd fe80 	bl	8001b50 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e5c:	f7fd fe78 	bl	8001b50 <HAL_GetTick>
 8003e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e62:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	015b      	lsls	r3, r3, #5
 8003e68:	0d1b      	lsrs	r3, r3, #20
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e72:	e054      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d050      	beq.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e7c:	f7fd fe68 	bl	8001b50 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d902      	bls.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d13d      	bne.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eaa:	d111      	bne.n	8003ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb4:	d004      	beq.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d107      	bne.n	8003ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d10f      	bne.n	8003efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e017      	b.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d19b      	bne.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000004 	.word	0x20000004

08003f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7ff ff6a 	bl	8003e3c <SPI_WaitFlagStateUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e000      	b.n	8003f80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fb36 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fb66 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e03a      	b.n	80040b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_TIM_Base_Start_IT+0x98>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x58>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d009      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x58>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x58>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d111      	bne.n	80040a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b06      	cmp	r3, #6
 8004090:	d010      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a2:	e007      	b.n	80040b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800

080040cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e041      	b.n	8004162 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f839 	bl	800416a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fac4 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0202 	mvn.w	r2, #2
 80041a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa4e 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa41 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa50 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0204 	mvn.w	r2, #4
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa24 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa17 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa26 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b08      	cmp	r3, #8
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b08      	cmp	r3, #8
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0208 	mvn.w	r2, #8
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2204      	movs	r2, #4
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f9fa 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9ed 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f9fc 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b10      	cmp	r3, #16
 800428c:	d122      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0210 	mvn.w	r2, #16
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2208      	movs	r2, #8
 80042aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9d0 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80042c0:	e005      	b.n	80042ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9c3 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f9d2 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10e      	bne.n	8004300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0201 	mvn.w	r2, #1
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f99e 	bl	800463c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d10e      	bne.n	800432c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d107      	bne.n	800432c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fc23 	bl	8004b72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f996 	bl	8004684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b20      	cmp	r3, #32
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b20      	cmp	r3, #32
 8004372:	d107      	bne.n	8004384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0220 	mvn.w	r2, #32
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fbee 	bl	8004b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e082      	b.n	80044ac <HAL_TIM_IC_ConfigChannel+0x120>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f000 f9ca 	bl	800475c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020c 	bic.w	r2, r2, #12
 80043d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6999      	ldr	r1, [r3, #24]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e05a      	b.n	80044a2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d11c      	bne.n	800442c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f000 fa33 	bl	800486c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004414:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6999      	ldr	r1, [r3, #24]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	021a      	lsls	r2, r3, #8
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	619a      	str	r2, [r3, #24]
 800442a:	e03a      	b.n	80044a2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d11b      	bne.n	800446a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f000 fa7e 	bl	8004942 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 020c 	bic.w	r2, r2, #12
 8004454:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
 8004468:	e01b      	b.n	80044a2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f000 fa9d 	bl	80049b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800448c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	021a      	lsls	r2, r3, #8
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_ConfigClockSource+0x18>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e0b3      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x180>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004504:	d03e      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0xd0>
 8004506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450a:	f200 8087 	bhi.w	800461c <HAL_TIM_ConfigClockSource+0x168>
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004512:	f000 8085 	beq.w	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451a:	d87f      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 800451c:	2b70      	cmp	r3, #112	; 0x70
 800451e:	d01a      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0xa2>
 8004520:	2b70      	cmp	r3, #112	; 0x70
 8004522:	d87b      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 8004524:	2b60      	cmp	r3, #96	; 0x60
 8004526:	d050      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x116>
 8004528:	2b60      	cmp	r3, #96	; 0x60
 800452a:	d877      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 800452c:	2b50      	cmp	r3, #80	; 0x50
 800452e:	d03c      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xf6>
 8004530:	2b50      	cmp	r3, #80	; 0x50
 8004532:	d873      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d058      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x136>
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d86f      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 800453c:	2b30      	cmp	r3, #48	; 0x30
 800453e:	d064      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x156>
 8004540:	2b30      	cmp	r3, #48	; 0x30
 8004542:	d86b      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d060      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x156>
 8004548:	2b20      	cmp	r3, #32
 800454a:	d867      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x168>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05c      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x156>
 8004550:	2b10      	cmp	r3, #16
 8004552:	d05a      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004554:	e062      	b.n	800461c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6899      	ldr	r1, [r3, #8]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f000 fa7d 	bl	8004a64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	609a      	str	r2, [r3, #8]
      break;
 8004582:	e04e      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f000 fa66 	bl	8004a64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a6:	609a      	str	r2, [r3, #8]
      break;
 80045a8:	e03b      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 f92a 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2150      	movs	r1, #80	; 0x50
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fa34 	bl	8004a30 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e02b      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f000 f984 	bl	80048e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2160      	movs	r1, #96	; 0x60
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa24 	bl	8004a30 <TIM_ITRx_SetConfig>
      break;
 80045e8:	e01b      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 f90a 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2140      	movs	r1, #64	; 0x40
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa14 	bl	8004a30 <TIM_ITRx_SetConfig>
      break;
 8004608:	e00b      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f000 fa0b 	bl	8004a30 <TIM_ITRx_SetConfig>
        break;
 800461a:	e002      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
	...

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <TIM_Base_SetConfig+0xb8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a26      	ldr	r2, [pc, #152]	; (8004754 <TIM_Base_SetConfig+0xbc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a25      	ldr	r2, [pc, #148]	; (8004758 <TIM_Base_SetConfig+0xc0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <TIM_Base_SetConfig+0xb8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <TIM_Base_SetConfig+0xbc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <TIM_Base_SetConfig+0xc0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <TIM_Base_SetConfig+0xb8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d103      	bne.n	8004740 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	615a      	str	r2, [r3, #20]
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800

0800475c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <TIM_TI1_SetConfig+0xa8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_TI1_SetConfig+0x46>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d007      	beq.n	80047a2 <TIM_TI1_SetConfig+0x46>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <TIM_TI1_SetConfig+0xac>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_TI1_SetConfig+0x46>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a1b      	ldr	r2, [pc, #108]	; (800480c <TIM_TI1_SetConfig+0xb0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <TIM_TI1_SetConfig+0x4a>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <TIM_TI1_SetConfig+0x4c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e003      	b.n	80047c6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 030a 	bic.w	r3, r3, #10
 80047e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 030a 	and.w	r3, r3, #10
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0201 	bic.w	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0210 	bic.w	r2, r3, #16
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	031b      	lsls	r3, r3, #12
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	031b      	lsls	r3, r3, #12
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	621a      	str	r2, [r3, #32]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	b2db      	uxtb	r3, r3
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004992:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	031b      	lsls	r3, r3, #12
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f043 0307 	orr.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e046      	b.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b08:	d009      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10c      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800

08004b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e03f      	b.n	8004c16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fe02 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	; 0x24
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fb49 	bl	8005260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_UART_IRQHandler+0x52>
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa4f 	bl	800510e <UART_Receive_IT>
      return;
 8004c70:	e17b      	b.n	8004f6a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80b1 	beq.w	8004ddc <HAL_UART_IRQHandler+0x1bc>
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_UART_IRQHandler+0x70>
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80a6 	beq.w	8004ddc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x90>
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f043 0201 	orr.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xb0>
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f043 0202 	orr.w	r2, r3, #2
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_UART_IRQHandler+0xd0>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00f      	beq.n	8004d1a <HAL_UART_IRQHandler+0xfa>
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_UART_IRQHandler+0xee>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0208 	orr.w	r2, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 811e 	beq.w	8004f60 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_UART_IRQHandler+0x11e>
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f9e8 	bl	800510e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_UART_IRQHandler+0x146>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d031      	beq.n	8004dca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f92a 	bl	8004fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d023      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d013      	beq.n	8004dba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	4a76      	ldr	r2, [pc, #472]	; (8004f70 <HAL_UART_IRQHandler+0x350>)
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd fa94 	bl	80022cc <HAL_DMA_Abort_IT>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004db4:	4610      	mov	r0, r2
 8004db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	e00e      	b.n	8004dd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8ec 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	e00a      	b.n	8004dd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8e8 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	e006      	b.n	8004dd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8e4 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dd6:	e0c3      	b.n	8004f60 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	bf00      	nop
    return;
 8004dda:	e0c1      	b.n	8004f60 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f040 80a1 	bne.w	8004f28 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 809b 	beq.w	8004f28 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8095 	beq.w	8004f28 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04e      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e2c:	8a3b      	ldrh	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8098 	beq.w	8004f64 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e38:	8a3a      	ldrh	r2, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f080 8092 	bcs.w	8004f64 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8a3a      	ldrh	r2, [r7, #16]
 8004e44:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d02b      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e5e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0210 	bic.w	r2, r2, #16
 8004e9c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd f9d8 	bl	8002258 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f876 	bl	8004faa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ebe:	e051      	b.n	8004f64 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d047      	beq.n	8004f68 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ed8:	8a7b      	ldrh	r3, [r7, #18]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d044      	beq.n	8004f68 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0210 	bic.w	r2, r2, #16
 8004f1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f1c:	8a7b      	ldrh	r3, [r7, #18]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f842 	bl	8004faa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f26:	e01f      	b.n	8004f68 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_UART_IRQHandler+0x324>
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f87f 	bl	8005040 <UART_Transmit_IT>
    return;
 8004f42:	e012      	b.n	8004f6a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_UART_IRQHandler+0x34a>
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8c0 	bl	80050de <UART_EndTransmit_IT>
    return;
 8004f5e:	e004      	b.n	8004f6a <HAL_UART_IRQHandler+0x34a>
    return;
 8004f60:	bf00      	nop
 8004f62:	e002      	b.n	8004f6a <HAL_UART_IRQHandler+0x34a>
      return;
 8004f64:	bf00      	nop
 8004f66:	e000      	b.n	8004f6a <HAL_UART_IRQHandler+0x34a>
      return;
 8004f68:	bf00      	nop
  }
}
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	08005019 	.word	0x08005019

08004f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0210 	bic.w	r2, r2, #16
 8004ffe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff ffb0 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b21      	cmp	r3, #33	; 0x21
 8005052:	d13e      	bne.n	80050d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	d114      	bne.n	8005088 <UART_Transmit_IT+0x48>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d110      	bne.n	8005088 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800507a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	1c9a      	adds	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]
 8005086:	e008      	b.n	800509a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6211      	str	r1, [r2, #32]
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4619      	mov	r1, r3
 80050a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10f      	bne.n	80050ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ff38 	bl	8004f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	f040 8099 	bne.w	8005256 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d117      	bne.n	800515e <UART_Receive_IT+0x50>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	b29a      	uxth	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28
 800515c:	e026      	b.n	80051ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d007      	beq.n	8005182 <UART_Receive_IT+0x74>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <UART_Receive_IT+0x82>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e008      	b.n	80051a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d148      	bne.n	8005252 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0220 	bic.w	r2, r2, #32
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d123      	bne.n	8005248 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0210 	bic.w	r2, r2, #16
 8005214:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b10      	cmp	r3, #16
 8005222:	d10a      	bne.n	800523a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff feb2 	bl	8004faa <HAL_UARTEx_RxEventCallback>
 8005246:	e002      	b.n	800524e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fe9c 	bl	8004f86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	e002      	b.n	8005258 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005256:	2302      	movs	r3, #2
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800529a:	f023 030c 	bic.w	r3, r3, #12
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2c      	ldr	r2, [pc, #176]	; (8005374 <UART_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe f85e 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	e002      	b.n	80052d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe f846 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 80052d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009a      	lsls	r2, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	4a22      	ldr	r2, [pc, #136]	; (8005378 <UART_SetConfig+0x118>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	0119      	lsls	r1, r3, #4
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009a      	lsls	r2, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	fbb2 f2f3 	udiv	r2, r2, r3
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <UART_SetConfig+0x118>)
 800530e:	fba3 0302 	umull	r0, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2064      	movs	r0, #100	; 0x64
 8005316:	fb00 f303 	mul.w	r3, r0, r3
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	3332      	adds	r3, #50	; 0x32
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <UART_SetConfig+0x118>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532c:	4419      	add	r1, r3
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009a      	lsls	r2, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <UART_SetConfig+0x118>)
 8005346:	fba3 0302 	umull	r0, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	2064      	movs	r0, #100	; 0x64
 800534e:	fb00 f303 	mul.w	r3, r0, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	3332      	adds	r3, #50	; 0x32
 8005358:	4a07      	ldr	r2, [pc, #28]	; (8005378 <UART_SetConfig+0x118>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 020f 	and.w	r2, r3, #15
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	440a      	add	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40013800 	.word	0x40013800
 8005378:	51eb851f 	.word	0x51eb851f

0800537c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <MX_FATFS_Init+0x18>)
 8005382:	4805      	ldr	r0, [pc, #20]	; (8005398 <MX_FATFS_Init+0x1c>)
 8005384:	f002 ffac 	bl	80082e0 <FATFS_LinkDriver>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <MX_FATFS_Init+0x20>)
 800538e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000b50 	.word	0x20000b50
 8005398:	20000010 	.word	0x20000010
 800539c:	20000b54 	.word	0x20000b54

080053a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
	...

080053b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fb f87d 	bl	80004bc <SD_disk_initialize>
 80053c2:	4603      	mov	r3, r0
 80053c4:	461a      	mov	r2, r3
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <USER_initialize+0x28>)
 80053c8:	701a      	strb	r2, [r3, #0]
    return Stat;
 80053ca:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <USER_initialize+0x28>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	2000000d 	.word	0x2000000d

080053dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb f951 	bl	8000690 <SD_disk_status>
 80053ee:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005408:	7bf8      	ldrb	r0, [r7, #15]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	f7fb f952 	bl	80006b8 <SD_disk_read>
 8005414:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4603      	mov	r3, r0
 800542c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800542e:	7bf8      	ldrb	r0, [r7, #15]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	f7fb f9a9 	bl	800078c <SD_disk_write>
 800543a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	603a      	str	r2, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
 8005450:	460b      	mov	r3, r1
 8005452:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005454:	79b9      	ldrb	r1, [r7, #6]
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fb fa1a 	bl	8000894 <SD_disk_ioctl>
 8005460:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	4a08      	ldr	r2, [pc, #32]	; (800549c <disk_status+0x30>)
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	79fa      	ldrb	r2, [r7, #7]
 8005484:	4905      	ldr	r1, [pc, #20]	; (800549c <disk_status+0x30>)
 8005486:	440a      	add	r2, r1
 8005488:	7a12      	ldrb	r2, [r2, #8]
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	200002cc 	.word	0x200002cc

080054a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	4a0d      	ldr	r2, [pc, #52]	; (80054e8 <disk_initialize+0x48>)
 80054b2:	5cd3      	ldrb	r3, [r2, r3]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d111      	bne.n	80054dc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <disk_initialize+0x48>)
 80054bc:	2101      	movs	r1, #1
 80054be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <disk_initialize+0x48>)
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	79fa      	ldrb	r2, [r7, #7]
 80054ce:	4906      	ldr	r1, [pc, #24]	; (80054e8 <disk_initialize+0x48>)
 80054d0:	440a      	add	r2, r1
 80054d2:	7a12      	ldrb	r2, [r2, #8]
 80054d4:	4610      	mov	r0, r2
 80054d6:	4798      	blx	r3
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200002cc 	.word	0x200002cc

080054ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <disk_read+0x3c>)
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	689c      	ldr	r4, [r3, #8]
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <disk_read+0x3c>)
 800550c:	4413      	add	r3, r2
 800550e:	7a18      	ldrb	r0, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	47a0      	blx	r4
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]
  return res;
 800551c:	7dfb      	ldrb	r3, [r7, #23]
}
 800551e:	4618      	mov	r0, r3
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd90      	pop	{r4, r7, pc}
 8005526:	bf00      	nop
 8005528:	200002cc 	.word	0x200002cc

0800552c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4603      	mov	r3, r0
 800553a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <disk_write+0x3c>)
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68dc      	ldr	r4, [r3, #12]
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <disk_write+0x3c>)
 800554c:	4413      	add	r3, r2
 800554e:	7a18      	ldrb	r0, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	47a0      	blx	r4
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]
  return res;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd90      	pop	{r4, r7, pc}
 8005566:	bf00      	nop
 8005568:	200002cc 	.word	0x200002cc

0800556c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	603a      	str	r2, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
 8005578:	460b      	mov	r3, r1
 800557a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <disk_ioctl+0x38>)
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	79fa      	ldrb	r2, [r7, #7]
 800558a:	4906      	ldr	r1, [pc, #24]	; (80055a4 <disk_ioctl+0x38>)
 800558c:	440a      	add	r2, r1
 800558e:	7a10      	ldrb	r0, [r2, #8]
 8005590:	79b9      	ldrb	r1, [r7, #6]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	4798      	blx	r3
 8005596:	4603      	mov	r3, r0
 8005598:	73fb      	strb	r3, [r7, #15]
  return res;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	200002cc 	.word	0x200002cc

080055a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80055bc:	e007      	b.n	80055ce <mem_cpy+0x26>
		*d++ = *s++;
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	1c53      	adds	r3, r2, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	6179      	str	r1, [r7, #20]
 80055ca:	7812      	ldrb	r2, [r2, #0]
 80055cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	1e5a      	subs	r2, r3, #1
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f2      	bne.n	80055be <mem_cpy+0x16>
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80055f4:	e005      	b.n	8005602 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	617a      	str	r2, [r7, #20]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	1e5a      	subs	r2, r3, #1
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f4      	bne.n	80055f6 <mem_set+0x12>
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	; 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005630:	bf00      	nop
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1e5a      	subs	r2, r3, #1
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <mem_cmp+0x40>
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	61fa      	str	r2, [r7, #28]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4619      	mov	r1, r3
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	61ba      	str	r2, [r7, #24]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	1acb      	subs	r3, r1, r3
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ec      	beq.n	8005632 <mem_cmp+0x1a>
	return r;
 8005658:	697b      	ldr	r3, [r7, #20]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3724      	adds	r7, #36	; 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800566e:	e002      	b.n	8005676 <chk_chr+0x12>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3301      	adds	r3, #1
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <chk_chr+0x26>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4293      	cmp	r3, r2
 8005688:	d1f2      	bne.n	8005670 <chk_chr+0xc>
	return *str;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	781b      	ldrb	r3, [r3, #0]
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e035      	b.n	8005718 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 80056ac:	492e      	ldr	r1, [pc, #184]	; (8005768 <chk_lock+0xd0>)
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4613      	mov	r3, r2
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d026      	beq.n	800570e <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80056c0:	4929      	ldr	r1, [pc, #164]	; (8005768 <chk_lock+0xd0>)
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d11c      	bne.n	8005712 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 80056d8:	4923      	ldr	r1, [pc, #140]	; (8005768 <chk_lock+0xd0>)
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	3304      	adds	r3, #4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d10f      	bne.n	8005712 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80056f2:	491d      	ldr	r1, [pc, #116]	; (8005768 <chk_lock+0xd0>)
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3308      	adds	r3, #8
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005708:	429a      	cmp	r2, r3
 800570a:	d102      	bne.n	8005712 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800570c:	e007      	b.n	800571e <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d9c6      	bls.n	80056ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d109      	bne.n	8005738 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <chk_lock+0x98>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d101      	bne.n	8005734 <chk_lock+0x9c>
 8005730:	2300      	movs	r3, #0
 8005732:	e013      	b.n	800575c <chk_lock+0xc4>
 8005734:	2312      	movs	r3, #18
 8005736:	e011      	b.n	800575c <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <chk_lock+0xbe>
 800573e:	490a      	ldr	r1, [pc, #40]	; (8005768 <chk_lock+0xd0>)
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	330a      	adds	r3, #10
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005754:	d101      	bne.n	800575a <chk_lock+0xc2>
 8005756:	2310      	movs	r3, #16
 8005758:	e000      	b.n	800575c <chk_lock+0xc4>
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	200000b4 	.word	0x200000b4

0800576c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	e002      	b.n	800577e <enq_lock+0x12>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3301      	adds	r3, #1
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d809      	bhi.n	8005798 <enq_lock+0x2c>
 8005784:	490a      	ldr	r1, [pc, #40]	; (80057b0 <enq_lock+0x44>)
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ef      	bne.n	8005778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b02      	cmp	r3, #2
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	200000b4 	.word	0x200000b4

080057b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	e028      	b.n	8005816 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 80057c4:	4952      	ldr	r1, [pc, #328]	; (8005910 <inc_lock+0x15c>)
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d119      	bne.n	8005810 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 80057dc:	494c      	ldr	r1, [pc, #304]	; (8005910 <inc_lock+0x15c>)
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	3304      	adds	r3, #4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d10c      	bne.n	8005810 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 80057f6:	4946      	ldr	r1, [pc, #280]	; (8005910 <inc_lock+0x15c>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3308      	adds	r3, #8
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800580c:	429a      	cmp	r2, r3
 800580e:	d006      	beq.n	800581e <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d9d3      	bls.n	80057c4 <inc_lock+0x10>
 800581c:	e000      	b.n	8005820 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800581e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d142      	bne.n	80058ac <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e002      	b.n	8005832 <inc_lock+0x7e>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d809      	bhi.n	800584c <inc_lock+0x98>
 8005838:	4935      	ldr	r1, [pc, #212]	; (8005910 <inc_lock+0x15c>)
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4613      	mov	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ef      	bne.n	800582c <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d101      	bne.n	8005856 <inc_lock+0xa2>
 8005852:	2300      	movs	r3, #0
 8005854:	e057      	b.n	8005906 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	482d      	ldr	r0, [pc, #180]	; (8005910 <inc_lock+0x15c>)
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4403      	add	r3, r0
 8005868:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6899      	ldr	r1, [r3, #8]
 800586e:	4828      	ldr	r0, [pc, #160]	; (8005910 <inc_lock+0x15c>)
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4403      	add	r3, r0
 800587c:	3304      	adds	r3, #4
 800587e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	88d8      	ldrh	r0, [r3, #6]
 8005884:	4922      	ldr	r1, [pc, #136]	; (8005910 <inc_lock+0x15c>)
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3308      	adds	r3, #8
 8005894:	4602      	mov	r2, r0
 8005896:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005898:	491d      	ldr	r1, [pc, #116]	; (8005910 <inc_lock+0x15c>)
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4613      	mov	r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	330a      	adds	r3, #10
 80058a8:	2200      	movs	r2, #0
 80058aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <inc_lock+0x118>
 80058b2:	4917      	ldr	r1, [pc, #92]	; (8005910 <inc_lock+0x15c>)
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4613      	mov	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	330a      	adds	r3, #10
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <inc_lock+0x118>
 80058c8:	2300      	movs	r3, #0
 80058ca:	e01c      	b.n	8005906 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <inc_lock+0x136>
 80058d2:	490f      	ldr	r1, [pc, #60]	; (8005910 <inc_lock+0x15c>)
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	330a      	adds	r3, #10
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	b299      	uxth	r1, r3
 80058e8:	e001      	b.n	80058ee <inc_lock+0x13a>
 80058ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058ee:	4808      	ldr	r0, [pc, #32]	; (8005910 <inc_lock+0x15c>)
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4403      	add	r3, r0
 80058fc:	330a      	adds	r3, #10
 80058fe:	460a      	mov	r2, r1
 8005900:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr
 8005910:	200000b4 	.word	0x200000b4

08005914 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3b01      	subs	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d82e      	bhi.n	8005986 <dec_lock+0x72>
		n = Files[i].ctr;
 8005928:	491b      	ldr	r1, [pc, #108]	; (8005998 <dec_lock+0x84>)
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	330a      	adds	r3, #10
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800593c:	89fb      	ldrh	r3, [r7, #14]
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	d101      	bne.n	8005948 <dec_lock+0x34>
 8005944:	2300      	movs	r3, #0
 8005946:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <dec_lock+0x40>
 800594e:	89fb      	ldrh	r3, [r7, #14]
 8005950:	3b01      	subs	r3, #1
 8005952:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005954:	4910      	ldr	r1, [pc, #64]	; (8005998 <dec_lock+0x84>)
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	330a      	adds	r3, #10
 8005964:	89fa      	ldrh	r2, [r7, #14]
 8005966:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005968:	89fb      	ldrh	r3, [r7, #14]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <dec_lock+0x6c>
 800596e:	490a      	ldr	r1, [pc, #40]	; (8005998 <dec_lock+0x84>)
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	737b      	strb	r3, [r7, #13]
 8005984:	e001      	b.n	800598a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005986:	2302      	movs	r3, #2
 8005988:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800598a:	7b7b      	ldrb	r3, [r7, #13]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	200000b4 	.word	0x200000b4

0800599c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e016      	b.n	80059d8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80059aa:	4910      	ldr	r1, [pc, #64]	; (80059ec <clear_lock+0x50>)
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4613      	mov	r3, r2
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d108      	bne.n	80059d2 <clear_lock+0x36>
 80059c0:	490a      	ldr	r1, [pc, #40]	; (80059ec <clear_lock+0x50>)
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4613      	mov	r3, r2
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d9e5      	bls.n	80059aa <clear_lock+0xe>
	}
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	200000b4 	.word	0x200000b4

080059f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d038      	beq.n	8005a78 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8005a0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	2301      	movs	r3, #1
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	f7ff fd87 	bl	800552c <disk_write>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e026      	b.n	8005a78 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d218      	bcs.n	8005a78 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	e010      	b.n	8005a72 <sync_window+0x82>
					wsect += fs->fsize;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	2301      	movs	r3, #1
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	f7ff fd60 	bl	800552c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d8eb      	bhi.n	8005a50 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d01b      	beq.n	8005ad4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ffa7 	bl	80059f0 <sync_window>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d113      	bne.n	8005ad4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	f7ff fd18 	bl	80054ec <disk_read>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff82 	bl	80059f0 <sync_window>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 809c 	bne.w	8005c30 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	f040 8089 	bne.w	8005c16 <sync_fs+0x138>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	f040 8083 	bne.w	8005c16 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005b18:	461a      	mov	r2, r3
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f7ff fd62 	bl	80055e4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2255      	movs	r2, #85	; 0x55
 8005b24:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	22aa      	movs	r2, #170	; 0xaa
 8005b2c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2252      	movs	r2, #82	; 0x52
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2252      	movs	r2, #82	; 0x52
 8005b3a:	705a      	strb	r2, [r3, #1]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2261      	movs	r2, #97	; 0x61
 8005b40:	709a      	strb	r2, [r3, #2]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2241      	movs	r2, #65	; 0x41
 8005b46:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2272      	movs	r2, #114	; 0x72
 8005b4c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2272      	movs	r2, #114	; 0x72
 8005b54:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2241      	movs	r2, #65	; 0x41
 8005b5c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2261      	movs	r2, #97	; 0x61
 8005b64:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f7ff fc8f 	bl	800552c <disk_write>
			fs->fsi_flag = 0;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fca3 	bl	800556c <disk_ioctl>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <sync_fs+0x152>
			res = FR_DISK_ERR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	3b02      	subs	r3, #2
 8005c48:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005c50:	3b02      	subs	r3, #2
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d301      	bcc.n	8005c5c <clust2sect+0x22>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e00a      	b.n	8005c72 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8005c62:	461a      	mov	r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	fb03 f202 	mul.w	r2, r3, r2
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8005c70:	4413      	add	r3, r2
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d905      	bls.n	8005c98 <get_fat+0x1c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d302      	bcc.n	8005c9e <get_fat+0x22>
		val = 1;	/* Internal error */
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e0d7      	b.n	8005e4e <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	f000 808f 	beq.w	8005dce <get_fat+0x152>
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	f300 80c2 	bgt.w	8005e3a <get_fat+0x1be>
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d002      	beq.n	8005cc0 <get_fat+0x44>
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d059      	beq.n	8005d72 <get_fat+0xf6>
 8005cbe:	e0bc      	b.n	8005e3a <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005cda:	4619      	mov	r1, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fecb 	bl	8005a82 <move_window>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 80a6 	bne.w	8005e40 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	60fa      	str	r2, [r7, #12]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d04:	fb02 f201 	mul.w	r2, r2, r1
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	5cd3      	ldrb	r3, [r2, r3]
 8005d0e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d24:	4413      	add	r3, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff feaa 	bl	8005a82 <move_window>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8087 	bne.w	8005e44 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d44:	fb02 f201 	mul.w	r2, r2, r1
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	5cd3      	ldrb	r3, [r2, r3]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <get_fat+0xec>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	e002      	b.n	8005d6e <get_fat+0xf2>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6e:	617b      	str	r3, [r7, #20]
			break;
 8005d70:	e06d      	b.n	8005e4e <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	4619      	mov	r1, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d8a:	4413      	add	r3, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fe77 	bl	8005a82 <move_window>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d156      	bne.n	8005e48 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005da8:	fb02 f201 	mul.w	r2, r2, r1
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3301      	adds	r3, #1
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	b21a      	sxth	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b21b      	sxth	r3, r3
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	617b      	str	r3, [r7, #20]
			break;
 8005dcc:	e03f      	b.n	8005e4e <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005de6:	4413      	add	r3, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fe49 	bl	8005a82 <move_window>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d12a      	bne.n	8005e4c <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e04:	fb02 f201 	mul.w	r2, r2, r1
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	3303      	adds	r3, #3
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	061a      	lsls	r2, r3, #24
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	4313      	orrs	r3, r2
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	3201      	adds	r2, #1
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	0212      	lsls	r2, r2, #8
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	7812      	ldrb	r2, [r2, #0]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e36:	617b      	str	r3, [r7, #20]
			break;
 8005e38:	e009      	b.n	8005e4e <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e006      	b.n	8005e4e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e40:	bf00      	nop
 8005e42:	e004      	b.n	8005e4e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e4c:	bf00      	nop
		}
	}

	return val;
 8005e4e:	697b      	ldr	r3, [r7, #20]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d905      	bls.n	8005e76 <put_fat+0x1e>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <put_fat+0x24>
		res = FR_INT_ERR;
 8005e76:	2302      	movs	r3, #2
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e128      	b.n	80060ce <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	f000 80c3 	beq.w	800600e <put_fat+0x1b6>
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	f300 8116 	bgt.w	80060ba <put_fat+0x262>
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d003      	beq.n	8005e9a <put_fat+0x42>
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	f000 8087 	beq.w	8005fa6 <put_fat+0x14e>
 8005e98:	e10f      	b.n	80060ba <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fdde 	bl	8005a82 <move_window>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005eca:	7ffb      	ldrb	r3, [r7, #31]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 80f7 	bne.w	80060c0 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	617a      	str	r2, [r7, #20]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005ede:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee2:	fb02 f201 	mul.w	r2, r2, r1
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00d      	beq.n	8005f14 <put_fat+0xbc>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	b25a      	sxtb	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e001      	b.n	8005f18 <put_fat+0xc0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005f30:	4619      	mov	r1, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f38:	4413      	add	r3, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff fda0 	bl	8005a82 <move_window>
 8005f42:	4603      	mov	r3, r0
 8005f44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 80bb 	bne.w	80060c4 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005f54:	461a      	mov	r2, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f5c:	fb02 f201 	mul.w	r2, r2, r1
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <put_fat+0x122>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	e00e      	b.n	8005f98 <put_fat+0x140>
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	f023 030f 	bic.w	r3, r3, #15
 8005f84:	b25a      	sxtb	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b25b      	sxtb	r3, r3
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8005fa4:	e093      	b.n	80060ce <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff fd5d 	bl	8005a82 <move_window>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fcc:	7ffb      	ldrb	r3, [r7, #31]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d17a      	bne.n	80060c8 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe0:	fb02 f201 	mul.w	r2, r2, r1
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	3301      	adds	r3, #1
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800600c:	e05f      	b.n	80060ce <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	b29b      	uxth	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	fbb3 f3f1 	udiv	r3, r3, r1
 8006026:	4413      	add	r3, r2
 8006028:	4619      	mov	r1, r3
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fd29 	bl	8005a82 <move_window>
 8006030:	4603      	mov	r3, r0
 8006032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006034:	7ffb      	ldrb	r3, [r7, #31]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d148      	bne.n	80060cc <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006044:	fbb3 f1f2 	udiv	r1, r3, r2
 8006048:	fb02 f201 	mul.w	r2, r2, r1
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	3303      	adds	r3, #3
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	061a      	lsls	r2, r3, #24
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	3302      	adds	r3, #2
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	4313      	orrs	r3, r2
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	3201      	adds	r2, #1
 800606a:	7812      	ldrb	r2, [r2, #0]
 800606c:	0212      	lsls	r2, r2, #8
 800606e:	4313      	orrs	r3, r2
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	4313      	orrs	r3, r2
 8006076:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4313      	orrs	r3, r2
 800607e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	b29b      	uxth	r3, r3
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	b29a      	uxth	r2, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	3301      	adds	r3, #1
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0c1a      	lsrs	r2, r3, #16
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	3302      	adds	r3, #2
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0e1a      	lsrs	r2, r3, #24
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	3303      	adds	r3, #3
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80060b8:	e009      	b.n	80060ce <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 80060ba:	2302      	movs	r3, #2
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e006      	b.n	80060ce <put_fat+0x276>
			if (res != FR_OK) break;
 80060c0:	bf00      	nop
 80060c2:	e004      	b.n	80060ce <put_fat+0x276>
			if (res != FR_OK) break;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <put_fat+0x276>
			if (res != FR_OK) break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <put_fat+0x276>
			if (res != FR_OK) break;
 80060cc:	bf00      	nop
		}
	}

	return res;
 80060ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d905      	bls.n	80060f4 <remove_chain+0x1c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <remove_chain+0x22>
		res = FR_INT_ERR;
 80060f4:	2302      	movs	r3, #2
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e043      	b.n	8006182 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80060fe:	e036      	b.n	800616e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fdba 	bl	8005c7c <get_fat>
 8006108:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d035      	beq.n	800617c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d102      	bne.n	800611c <remove_chain+0x44>
 8006116:	2302      	movs	r3, #2
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	e032      	b.n	8006182 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d102      	bne.n	800612a <remove_chain+0x52>
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	e02b      	b.n	8006182 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800612a:	2200      	movs	r2, #0
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff fe92 	bl	8005e58 <put_fat>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d120      	bne.n	8006180 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d00f      	beq.n	800616a <remove_chain+0x92>
				fs->free_clust++;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3c2      	bcc.n	8006100 <remove_chain+0x28>
 800617a:	e002      	b.n	8006182 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006180:	bf00      	nop
		}
	}

	return res;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10f      	bne.n	80061bc <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80061a2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <create_chain+0x2a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d31c      	bcc.n	80061f0 <create_chain+0x64>
 80061b6:	2301      	movs	r3, #1
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e019      	b.n	80061f0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fd5c 	bl	8005c7c <get_fat>
 80061c4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d801      	bhi.n	80061d0 <create_chain+0x44>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e076      	b.n	80062be <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d101      	bne.n	80061dc <create_chain+0x50>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	e070      	b.n	80062be <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d201      	bcs.n	80061ec <create_chain+0x60>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	e068      	b.n	80062be <create_chain+0x132>
		scl = clst;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	3301      	adds	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	429a      	cmp	r2, r3
 8006204:	d307      	bcc.n	8006216 <create_chain+0x8a>
			ncl = 2;
 8006206:	2302      	movs	r3, #2
 8006208:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	429a      	cmp	r2, r3
 8006210:	d901      	bls.n	8006216 <create_chain+0x8a>
 8006212:	2300      	movs	r3, #0
 8006214:	e053      	b.n	80062be <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fd2f 	bl	8005c7c <get_fat>
 800621e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00e      	beq.n	8006244 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d002      	beq.n	8006234 <create_chain+0xa8>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <create_chain+0xac>
			return cs;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	e042      	b.n	80062be <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	429a      	cmp	r2, r3
 800623e:	d1d9      	bne.n	80061f4 <create_chain+0x68>
 8006240:	2300      	movs	r3, #0
 8006242:	e03c      	b.n	80062be <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006244:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006246:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800624a:	6979      	ldr	r1, [r7, #20]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fe03 	bl	8005e58 <put_fat>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <create_chain+0xe4>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d006      	beq.n	8006270 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fdf6 	bl	8005e58 <put_fat>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11a      	bne.n	80062ac <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d018      	beq.n	80062bc <create_chain+0x130>
			fs->free_clust--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 80062aa:	e007      	b.n	80062bc <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d102      	bne.n	80062b8 <create_chain+0x12c>
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e000      	b.n	80062ba <create_chain+0x12e>
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80062bc:	697b      	ldr	r3, [r7, #20]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	3304      	adds	r3, #4
 80062d6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80062e0:	461a      	mov	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80062f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	613a      	str	r2, [r7, #16]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <clmt_clust+0x44>
 8006306:	2300      	movs	r3, #0
 8006308:	e010      	b.n	800632c <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	429a      	cmp	r2, r3
 8006310:	d307      	bcc.n	8006322 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3304      	adds	r3, #4
 800631e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006320:	e7e9      	b.n	80062f6 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8006322:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d006      	beq.n	8006362 <dir_sdi+0x2c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	429a      	cmp	r2, r3
 8006360:	d301      	bcc.n	8006366 <dir_sdi+0x30>
		return FR_INT_ERR;
 8006362:	2302      	movs	r3, #2
 8006364:	e082      	b.n	800646c <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <dir_sdi+0x4c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006374:	2b03      	cmp	r3, #3
 8006376:	d104      	bne.n	8006382 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006380:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10f      	bne.n	80063a8 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8006390:	461a      	mov	r2, r3
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	4293      	cmp	r3, r2
 8006396:	d301      	bcc.n	800639c <dir_sdi+0x66>
			return FR_INT_ERR;
 8006398:	2302      	movs	r3, #2
 800639a:	e067      	b.n	800646c <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	e036      	b.n	8006416 <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80063be:	fb03 f302 	mul.w	r3, r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80063c4:	e01c      	b.n	8006400 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fc55 	bl	8005c7c <get_fat>
 80063d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d101      	bne.n	80063e0 <dir_sdi+0xaa>
 80063dc:	2301      	movs	r3, #1
 80063de:	e045      	b.n	800646c <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d906      	bls.n	80063f4 <dir_sdi+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d301      	bcc.n	80063f8 <dir_sdi+0xc2>
				return FR_INT_ERR;
 80063f4:	2302      	movs	r3, #2
 80063f6:	e039      	b.n	800646c <dir_sdi+0x136>
			idx -= ic;
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	429a      	cmp	r2, r3
 8006406:	d2de      	bcs.n	80063c6 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6979      	ldr	r1, [r7, #20]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fc13 	bl	8005c3a <clust2sect>
 8006414:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <dir_sdi+0xf0>
 8006422:	2302      	movs	r3, #2
 8006424:	e022      	b.n	800646c <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	b29b      	uxth	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	fbb3 f2f2 	udiv	r2, r3, r2
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	441a      	add	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	fbb3 f1f2 	udiv	r1, r3, r2
 800645c:	fb02 f201 	mul.w	r2, r2, r1
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	015b      	lsls	r3, r3, #5
 8006464:	18c2      	adds	r2, r0, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	88db      	ldrh	r3, [r3, #6]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <dir_next+0x22>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <dir_next+0x26>
		return FR_NO_FILE;
 8006496:	2304      	movs	r3, #4
 8006498:	e0e2      	b.n	8006660 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80064ae:	fb02 f201 	mul.w	r2, r2, r1
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 80ba 	bne.w	800662e <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80064d4:	461a      	mov	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4293      	cmp	r3, r2
 80064da:	f0c0 80a8 	bcc.w	800662e <dir_next+0x1ba>
				return FR_NO_FILE;
 80064de:	2304      	movs	r3, #4
 80064e0:	e0be      	b.n	8006660 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80064fe:	3a01      	subs	r2, #1
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8093 	bne.w	800662e <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7ff fbb2 	bl	8005c7c <get_fat>
 8006518:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d801      	bhi.n	8006524 <dir_next+0xb0>
 8006520:	2302      	movs	r3, #2
 8006522:	e09d      	b.n	8006660 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d101      	bne.n	8006530 <dir_next+0xbc>
 800652c:	2301      	movs	r3, #1
 800652e:	e097      	b.n	8006660 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	429a      	cmp	r2, r3
 800653c:	d36b      	bcc.n	8006616 <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <dir_next+0xd4>
 8006544:	2304      	movs	r3, #4
 8006546:	e08b      	b.n	8006660 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f7ff fe1a 	bl	800618c <create_chain>
 8006558:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <dir_next+0xf0>
 8006560:	2307      	movs	r3, #7
 8006562:	e07d      	b.n	8006660 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <dir_next+0xfa>
 800656a:	2302      	movs	r3, #2
 800656c:	e078      	b.n	8006660 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d101      	bne.n	800657a <dir_next+0x106>
 8006576:	2301      	movs	r3, #1
 8006578:	e072      	b.n	8006660 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fa36 	bl	80059f0 <sync_window>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <dir_next+0x11a>
 800658a:	2301      	movs	r3, #1
 800658c:	e068      	b.n	8006660 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800659c:	461a      	mov	r2, r3
 800659e:	2100      	movs	r1, #0
 80065a0:	f7ff f820 	bl	80055e4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681c      	ldr	r4, [r3, #0]
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7ff fb43 	bl	8005c3a <clust2sect>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	e018      	b.n	80065f2 <dir_next+0x17e>
						dp->fs->wflag = 1;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fa0e 	bl	80059f0 <sync_window>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <dir_next+0x16a>
 80065da:	2301      	movs	r3, #1
 80065dc:	e040      	b.n	8006660 <dir_next+0x1ec>
						dp->fs->winsect++;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80065e6:	3201      	adds	r2, #1
 80065e8:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	3301      	adds	r3, #1
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80065fa:	461a      	mov	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d3de      	bcc.n	80065c0 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	1a8a      	subs	r2, r1, r2
 8006612:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6979      	ldr	r1, [r7, #20]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fb09 	bl	8005c3a <clust2sect>
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006650:	fb02 f201 	mul.w	r2, r2, r1
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	015b      	lsls	r3, r3, #5
 8006658:	18c2      	adds	r2, r0, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	bd90      	pop	{r4, r7, pc}

08006668 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006672:	2100      	movs	r1, #0
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff fe5e 	bl	8006336 <dir_sdi>
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d12d      	bne.n	80066e0 <dir_alloc+0x78>
		n = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7ff f9f5 	bl	8005a82 <move_window>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11d      	bne.n	80066de <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2be5      	cmp	r3, #229	; 0xe5
 80066aa:	d004      	beq.n	80066b6 <dir_alloc+0x4e>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d107      	bne.n	80066c6 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	3301      	adds	r3, #1
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d102      	bne.n	80066ca <dir_alloc+0x62>
 80066c4:	e00c      	b.n	80066e0 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066c6:	2300      	movs	r3, #0
 80066c8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80066ca:	2101      	movs	r1, #1
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fed1 	bl	8006474 <dir_next>
 80066d2:	4603      	mov	r3, r0
 80066d4:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0d5      	beq.n	8006688 <dir_alloc+0x20>
 80066dc:	e000      	b.n	80066e0 <dir_alloc+0x78>
			if (res != FR_OK) break;
 80066de:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d101      	bne.n	80066ea <dir_alloc+0x82>
 80066e6:	2307      	movs	r3, #7
 80066e8:	73fb      	strb	r3, [r7, #15]
	return res;
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	331b      	adds	r3, #27
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	b21a      	sxth	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	331a      	adds	r3, #26
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b21b      	sxth	r3, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	b21b      	sxth	r3, r3
 8006714:	b29b      	uxth	r3, r3
 8006716:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800671e:	2b03      	cmp	r3, #3
 8006720:	d10f      	bne.n	8006742 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	3315      	adds	r3, #21
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	b21a      	sxth	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b21b      	sxth	r3, r3
 8006734:	4313      	orrs	r3, r2
 8006736:	b21b      	sxth	r3, r3
 8006738:	b29b      	uxth	r3, r3
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

	return cl;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	331a      	adds	r3, #26
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	b29a      	uxth	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	331b      	adds	r3, #27
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	0c1a      	lsrs	r2, r3, #16
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3314      	adds	r3, #20
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	b29b      	uxth	r3, r3
 8006784:	0a1b      	lsrs	r3, r3, #8
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3315      	adds	r3, #21
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
	...

0800679c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	2301      	movs	r3, #1
 80067c2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80067c4:	4a2b      	ldr	r2, [pc, #172]	; (8006874 <cmp_lfn+0xd8>)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	b21a      	sxth	r2, r3
 80067d8:	4926      	ldr	r1, [pc, #152]	; (8006874 <cmp_lfn+0xd8>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	440b      	add	r3, r1
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	4619      	mov	r1, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	440b      	add	r3, r1
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d019      	beq.n	800682a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80067f6:	89bb      	ldrh	r3, [r7, #12]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fdbb 	bl	8008374 <ff_wtoupper>
 80067fe:	4603      	mov	r3, r0
 8006800:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2bfe      	cmp	r3, #254	; 0xfe
 8006806:	d80e      	bhi.n	8006826 <cmp_lfn+0x8a>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	617a      	str	r2, [r7, #20]
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fdac 	bl	8008374 <ff_wtoupper>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	89fb      	ldrh	r3, [r7, #14]
 8006822:	4293      	cmp	r3, r2
 8006824:	d008      	beq.n	8006838 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006826:	2300      	movs	r3, #0
 8006828:	e01f      	b.n	800686a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800682a:	89bb      	ldrh	r3, [r7, #12]
 800682c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006830:	4293      	cmp	r3, r2
 8006832:	d001      	beq.n	8006838 <cmp_lfn+0x9c>
 8006834:	2300      	movs	r3, #0
 8006836:	e018      	b.n	800686a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	3301      	adds	r3, #1
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b0c      	cmp	r3, #12
 8006842:	d9bf      	bls.n	80067c4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <cmp_lfn+0xcc>
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <cmp_lfn+0xcc>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <cmp_lfn+0xcc>
		return 0;
 8006864:	2300      	movs	r3, #0
 8006866:	e000      	b.n	800686a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006868:	2301      	movs	r3, #1
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08008dc8 	.word	0x08008dc8

08006878 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006878:	b480      	push	{r7}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	460b      	mov	r3, r1
 8006888:	71fb      	strb	r3, [r7, #7]
 800688a:	4613      	mov	r3, r2
 800688c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	330d      	adds	r3, #13
 8006892:	79ba      	ldrb	r2, [r7, #6]
 8006894:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	330b      	adds	r3, #11
 800689a:	220f      	movs	r2, #15
 800689c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	330c      	adds	r3, #12
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	331a      	adds	r3, #26
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	331b      	adds	r3, #27
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	4613      	mov	r3, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	82fb      	strh	r3, [r7, #22]
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80068ce:	8afb      	ldrh	r3, [r7, #22]
 80068d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d007      	beq.n	80068e8 <fit_lfn+0x70>
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	61fa      	str	r2, [r7, #28]
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <fit_lfn+0xe4>)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	4413      	add	r3, r2
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4413      	add	r3, r2
 80068f6:	8afa      	ldrh	r2, [r7, #22]
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	b299      	uxth	r1, r3
 8006902:	4a16      	ldr	r2, [pc, #88]	; (800695c <fit_lfn+0xe4>)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	4413      	add	r3, r2
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4413      	add	r3, r2
 8006910:	b2ca      	uxtb	r2, r1
 8006912:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006914:	8afb      	ldrh	r3, [r7, #22]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <fit_lfn+0xa8>
 800691a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800691e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	3301      	adds	r3, #1
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b0c      	cmp	r3, #12
 800692a:	d9d0      	bls.n	80068ce <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800692c:	8afb      	ldrh	r3, [r7, #22]
 800692e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006932:	4293      	cmp	r3, r2
 8006934:	d006      	beq.n	8006944 <fit_lfn+0xcc>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <fit_lfn+0xd4>
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800694a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	79fa      	ldrb	r2, [r7, #7]
 8006950:	701a      	strb	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3724      	adds	r7, #36	; 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr
 800695c:	08008dc8 	.word	0x08008dc8

08006960 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800696e:	220b      	movs	r2, #11
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7fe fe18 	bl	80055a8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b05      	cmp	r3, #5
 800697c:	d92b      	bls.n	80069d6 <gen_numname+0x76>
		sr = seq;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006982:	e022      	b.n	80069ca <gen_numname+0x6a>
			wc = *lfn++;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	607a      	str	r2, [r7, #4]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800698e:	2300      	movs	r3, #0
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
 8006992:	e017      	b.n	80069c4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005a      	lsls	r2, r3, #1
 8006998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	4413      	add	r3, r2
 80069a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80069a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <gen_numname+0x5e>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80069b8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80069bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	3301      	adds	r3, #1
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d9e4      	bls.n	8006994 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1d8      	bne.n	8006984 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80069d6:	2307      	movs	r3, #7
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	3330      	adds	r3, #48	; 0x30
 80069e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80069ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069ee:	2b39      	cmp	r3, #57	; 0x39
 80069f0:	d904      	bls.n	80069fc <gen_numname+0x9c>
 80069f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069f6:	3307      	adds	r3, #7
 80069f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	1e5a      	subs	r2, r3, #1
 8006a00:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a06:	4413      	add	r3, r2
 8006a08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a0c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	091b      	lsrs	r3, r3, #4
 8006a14:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1de      	bne.n	80069da <gen_numname+0x7a>
	ns[i] = '~';
 8006a1c:	f107 0214 	add.w	r2, r7, #20
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	4413      	add	r3, r2
 8006a24:	227e      	movs	r2, #126	; 0x7e
 8006a26:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006a28:	2300      	movs	r3, #0
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2c:	e002      	b.n	8006a34 <gen_numname+0xd4>
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	3301      	adds	r3, #1
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d205      	bcs.n	8006a48 <gen_numname+0xe8>
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	4413      	add	r3, r2
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d1f2      	bne.n	8006a2e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2b07      	cmp	r3, #7
 8006a4c:	d808      	bhi.n	8006a60 <gen_numname+0x100>
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a58:	4413      	add	r3, r2
 8006a5a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006a5e:	e000      	b.n	8006a62 <gen_numname+0x102>
 8006a60:	2120      	movs	r1, #32
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	627a      	str	r2, [r7, #36]	; 0x24
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	460a      	mov	r2, r1
 8006a6e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	2b07      	cmp	r3, #7
 8006a74:	d9e8      	bls.n	8006a48 <gen_numname+0xe8>
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	3730      	adds	r7, #48	; 0x30
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006a8c:	230b      	movs	r3, #11
 8006a8e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	0852      	lsrs	r2, r2, #1
 8006a96:	01db      	lsls	r3, r3, #7
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	6079      	str	r1, [r7, #4]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	73fb      	strb	r3, [r7, #15]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1ed      	bne.n	8006a90 <sum_sfn+0x10>
	return sum;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ac8:	2100      	movs	r1, #0
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fc33 	bl	8006336 <dir_sdi>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <dir_find+0x1e>
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	e0a0      	b.n	8006c20 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006ade:	23ff      	movs	r3, #255	; 0xff
 8006ae0:	753b      	strb	r3, [r7, #20]
 8006ae2:	7d3b      	ldrb	r3, [r7, #20]
 8006ae4:	757b      	strb	r3, [r7, #21]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aec:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7fe ffc2 	bl	8005a82 <move_window>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 8085 	bne.w	8006c14 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b16:	7dbb      	ldrb	r3, [r7, #22]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <dir_find+0x62>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	75fb      	strb	r3, [r7, #23]
 8006b20:	e07d      	b.n	8006c1e <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	330b      	adds	r3, #11
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b2c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006b2e:	7dbb      	ldrb	r3, [r7, #22]
 8006b30:	2be5      	cmp	r3, #229	; 0xe5
 8006b32:	d007      	beq.n	8006b44 <dir_find+0x84>
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <dir_find+0x92>
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b0f      	cmp	r3, #15
 8006b42:	d006      	beq.n	8006b52 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006b44:	23ff      	movs	r3, #255	; 0xff
 8006b46:	757b      	strb	r3, [r7, #21]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b4e:	849a      	strh	r2, [r3, #36]	; 0x24
 8006b50:	e055      	b.n	8006bfe <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d12f      	bne.n	8006bb8 <dir_find+0xf8>
				if (dp->lfn) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d04e      	beq.n	8006bfe <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006b60:	7dbb      	ldrb	r3, [r7, #22]
 8006b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	7b5b      	ldrb	r3, [r3, #13]
 8006b6e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b76:	75bb      	strb	r3, [r7, #22]
 8006b78:	7dbb      	ldrb	r3, [r7, #22]
 8006b7a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	88da      	ldrh	r2, [r3, #6]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006b84:	7dba      	ldrb	r2, [r7, #22]
 8006b86:	7d7b      	ldrb	r3, [r7, #21]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d112      	bne.n	8006bb2 <dir_find+0xf2>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	330d      	adds	r3, #13
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	7d3a      	ldrb	r2, [r7, #20]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d10c      	bne.n	8006bb2 <dir_find+0xf2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	6939      	ldr	r1, [r7, #16]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fdfc 	bl	800679c <cmp_lfn>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <dir_find+0xf2>
 8006baa:	7d7b      	ldrb	r3, [r7, #21]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	e000      	b.n	8006bb4 <dir_find+0xf4>
 8006bb2:	23ff      	movs	r3, #255	; 0xff
 8006bb4:	757b      	strb	r3, [r7, #21]
 8006bb6:	e022      	b.n	8006bfe <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006bb8:	7d7b      	ldrb	r3, [r7, #21]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <dir_find+0x10e>
 8006bbe:	6938      	ldr	r0, [r7, #16]
 8006bc0:	f7ff ff5e 	bl	8006a80 <sum_sfn>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	7d3b      	ldrb	r3, [r7, #20]
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d024      	beq.n	8006c18 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	330b      	adds	r3, #11
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <dir_find+0x132>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	220b      	movs	r2, #11
 8006be4:	4619      	mov	r1, r3
 8006be6:	6938      	ldr	r0, [r7, #16]
 8006be8:	f7fe fd16 	bl	8005618 <mem_cmp>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006bf2:	23ff      	movs	r3, #255	; 0xff
 8006bf4:	757b      	strb	r3, [r7, #21]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bfc:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006bfe:	2100      	movs	r1, #0
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fc37 	bl	8006474 <dir_next>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f43f af6e 	beq.w	8006aee <dir_find+0x2e>
 8006c12:	e004      	b.n	8006c1e <dir_find+0x15e>
		if (res != FR_OK) break;
 8006c14:	bf00      	nop
 8006c16:	e002      	b.n	8006c1e <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006c18:	bf00      	nop
 8006c1a:	e000      	b.n	8006c1e <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c1c:	bf00      	nop

	return res;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08c      	sub	sp, #48	; 0x30
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006c3c:	f107 030c 	add.w	r3, r7, #12
 8006c40:	220c      	movs	r2, #12
 8006c42:	6a39      	ldr	r1, [r7, #32]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fcaf 	bl	80055a8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d035      	beq.n	8006cc0 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	330b      	adds	r3, #11
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 8006c62:	2301      	movs	r3, #1
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c66:	e013      	b.n	8006c90 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006c68:	f107 010c 	add.w	r1, r7, #12
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	6a38      	ldr	r0, [r7, #32]
 8006c72:	f7ff fe75 	bl	8006960 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff ff22 	bl	8006ac0 <dir_find>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	2b63      	cmp	r3, #99	; 0x63
 8006c94:	d9e8      	bls.n	8006c68 <dir_register+0x40>
 8006c96:	e000      	b.n	8006c9a <dir_register+0x72>
			if (res != FR_OK) break;
 8006c98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	2b64      	cmp	r3, #100	; 0x64
 8006c9e:	d101      	bne.n	8006ca4 <dir_register+0x7c>
 8006ca0:	2307      	movs	r3, #7
 8006ca2:	e0b5      	b.n	8006e10 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d002      	beq.n	8006cb2 <dir_register+0x8a>
 8006cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cb0:	e0ae      	b.n	8006e10 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	330b      	adds	r3, #11
 8006cb6:	7dfa      	ldrb	r2, [r7, #23]
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cce:	e002      	b.n	8006cd6 <dir_register+0xae>
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f5      	bne.n	8006cd0 <dir_register+0xa8>
		nent = (n + 25) / 13;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	3319      	adds	r3, #25
 8006ce8:	4a4b      	ldr	r2, [pc, #300]	; (8006e18 <dir_register+0x1f0>)
 8006cea:	fba2 2303 	umull	r2, r3, r2, r3
 8006cee:	089b      	lsrs	r3, r3, #2
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf2:	e001      	b.n	8006cf8 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff fcb4 	bl	8006668 <dir_alloc>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d14c      	bne.n	8006da8 <dir_register+0x180>
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	3b01      	subs	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d046      	beq.n	8006da8 <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	88db      	ldrh	r3, [r3, #6]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff fb05 	bl	8006336 <dir_sdi>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d136      	bne.n	8006da8 <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fe9e 	bl	8006a80 <sum_sfn>
 8006d44:	4603      	mov	r3, r0
 8006d46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fe fe95 	bl	8005a82 <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d11f      	bne.n	8006da6 <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a18      	ldr	r0, [r3, #32]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6959      	ldr	r1, [r3, #20]
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	7efb      	ldrb	r3, [r7, #27]
 8006d74:	f7ff fd80 	bl	8006878 <fit_lfn>
				dp->fs->wflag = 1;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 8006d82:	2100      	movs	r1, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fb75 	bl	8006474 <dir_next>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d107      	bne.n	8006da8 <dir_register+0x180>
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1d1      	bne.n	8006d48 <dir_register+0x120>
 8006da4:	e000      	b.n	8006da8 <dir_register+0x180>
				if (res != FR_OK) break;
 8006da6:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d12d      	bne.n	8006e0c <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7fe fe61 	bl	8005a82 <move_window>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d11e      	bne.n	8006e0c <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fc04 	bl	80055e4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6958      	ldr	r0, [r3, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	220b      	movs	r2, #11
 8006de6:	4619      	mov	r1, r3
 8006de8:	f7fe fbde 	bl	80055a8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	330b      	adds	r3, #11
 8006df2:	781a      	ldrb	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	f002 0218 	and.w	r2, r2, #24
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 8006e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3730      	adds	r7, #48	; 0x30
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	4ec4ec4f 	.word	0x4ec4ec4f

08006e1c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	e002      	b.n	8006e34 <create_name+0x18>
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	3301      	adds	r3, #1
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b2f      	cmp	r3, #47	; 0x2f
 8006e3a:	d0f8      	beq.n	8006e2e <create_name+0x12>
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b5c      	cmp	r3, #92	; 0x5c
 8006e42:	d0f4      	beq.n	8006e2e <create_name+0x12>
	lfn = dp->lfn;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	61ba      	str	r2, [r7, #24]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e62:	2b1f      	cmp	r3, #31
 8006e64:	d92f      	bls.n	8006ec6 <create_name+0xaa>
 8006e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e68:	2b2f      	cmp	r3, #47	; 0x2f
 8006e6a:	d02c      	beq.n	8006ec6 <create_name+0xaa>
 8006e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6e:	2b5c      	cmp	r3, #92	; 0x5c
 8006e70:	d029      	beq.n	8006ec6 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2bfe      	cmp	r3, #254	; 0xfe
 8006e76:	d901      	bls.n	8006e7c <create_name+0x60>
			return FR_INVALID_NAME;
 8006e78:	2306      	movs	r3, #6
 8006e7a:	e176      	b.n	800716a <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e84:	2101      	movs	r1, #1
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 fa3a 	bl	8008300 <ff_convert>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <create_name+0x7e>
 8006e96:	2306      	movs	r3, #6
 8006e98:	e167      	b.n	800716a <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9e:	d809      	bhi.n	8006eb4 <create_name+0x98>
 8006ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	48b3      	ldr	r0, [pc, #716]	; (8007174 <create_name+0x358>)
 8006ea6:	f7fe fbdd 	bl	8005664 <chk_chr>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <create_name+0x98>
			return FR_INVALID_NAME;
 8006eb0:	2306      	movs	r3, #6
 8006eb2:	e15a      	b.n	800716a <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	617a      	str	r2, [r7, #20]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ec2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006ec4:	e7c5      	b.n	8006e52 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	441a      	add	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed2:	2b1f      	cmp	r3, #31
 8006ed4:	d801      	bhi.n	8006eda <create_name+0xbe>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	e000      	b.n	8006edc <create_name+0xc0>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006ee0:	e011      	b.n	8006f06 <create_name+0xea>
		w = lfn[di - 1];
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d002      	beq.n	8006f00 <create_name+0xe4>
 8006efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006efc:	2b2e      	cmp	r3, #46	; 0x2e
 8006efe:	d106      	bne.n	8006f0e <create_name+0xf2>
		di--;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1ea      	bne.n	8006ee2 <create_name+0xc6>
 8006f0c:	e000      	b.n	8006f10 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 8006f0e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <create_name+0xfe>
 8006f16:	2306      	movs	r3, #6
 8006f18:	e127      	b.n	800716a <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	2200      	movs	r2, #0
 8006f24:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	220b      	movs	r2, #11
 8006f2c:	2120      	movs	r1, #32
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fb58 	bl	80055e4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e002      	b.n	8006f40 <create_name+0x124>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d0f5      	beq.n	8006f3a <create_name+0x11e>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5a:	d0ee      	beq.n	8006f3a <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <create_name+0x15a>
 8006f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f66:	f043 0303 	orr.w	r3, r3, #3
 8006f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006f6e:	e002      	b.n	8006f76 <create_name+0x15a>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <create_name+0x174>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f82:	3b01      	subs	r3, #1
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8e:	d1ef      	bne.n	8006f70 <create_name+0x154>

	b = i = 0; ni = 8;
 8006f90:	2300      	movs	r3, #0
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	2300      	movs	r3, #0
 8006f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	61ba      	str	r2, [r7, #24]
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 808f 	beq.w	80070d4 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d006      	beq.n	8006fca <create_name+0x1ae>
 8006fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc0:	d10a      	bne.n	8006fd8 <create_name+0x1bc>
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d006      	beq.n	8006fd8 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 8006fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fce:	f043 0303 	orr.w	r3, r3, #3
 8006fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fd6:	e07c      	b.n	80070d2 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006fd8:	6a3a      	ldr	r2, [r7, #32]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d203      	bcs.n	8006fe8 <create_name+0x1cc>
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d123      	bne.n	8007030 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	2b0b      	cmp	r3, #11
 8006fec:	d106      	bne.n	8006ffc <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 8006fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff2:	f043 0303 	orr.w	r3, r3, #3
 8006ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ffa:	e06e      	b.n	80070da <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	429a      	cmp	r2, r3
 8007002:	d005      	beq.n	8007010 <create_name+0x1f4>
 8007004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007008:	f043 0303 	orr.w	r3, r3, #3
 800700c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	429a      	cmp	r2, r3
 8007016:	d85f      	bhi.n	80070d8 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	2308      	movs	r3, #8
 800701e:	623b      	str	r3, [r7, #32]
 8007020:	230b      	movs	r3, #11
 8007022:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800702e:	e050      	b.n	80070d2 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007032:	2b7f      	cmp	r3, #127	; 0x7f
 8007034:	d914      	bls.n	8007060 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f960 	bl	8008300 <ff_convert>
 8007040:	4603      	mov	r3, r0
 8007042:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <create_name+0x238>
 800704a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704c:	3b80      	subs	r3, #128	; 0x80
 800704e:	4a4a      	ldr	r2, [pc, #296]	; (8007178 <create_name+0x35c>)
 8007050:	5cd3      	ldrb	r3, [r2, r3]
 8007052:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007058:	f043 0302 	orr.w	r3, r3, #2
 800705c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <create_name+0x25a>
 8007066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007068:	4619      	mov	r1, r3
 800706a:	4844      	ldr	r0, [pc, #272]	; (800717c <create_name+0x360>)
 800706c:	f7fe fafa 	bl	8005664 <chk_chr>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007076:	235f      	movs	r3, #95	; 0x5f
 8007078:	84bb      	strh	r3, [r7, #36]	; 0x24
 800707a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707e:	f043 0303 	orr.w	r3, r3, #3
 8007082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007086:	e01b      	b.n	80070c0 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d909      	bls.n	80070a2 <create_name+0x286>
 800708e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007090:	2b5a      	cmp	r3, #90	; 0x5a
 8007092:	d806      	bhi.n	80070a2 <create_name+0x286>
					b |= 2;
 8007094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007098:	f043 0302 	orr.w	r3, r3, #2
 800709c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070a0:	e00e      	b.n	80070c0 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80070a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a4:	2b60      	cmp	r3, #96	; 0x60
 80070a6:	d90b      	bls.n	80070c0 <create_name+0x2a4>
 80070a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070aa:	2b7a      	cmp	r3, #122	; 0x7a
 80070ac:	d808      	bhi.n	80070c0 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 80070ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070b2:	f043 0301 	orr.w	r3, r3, #1
 80070b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070bc:	3b20      	subs	r3, #32
 80070be:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	6239      	str	r1, [r7, #32]
 80070ca:	4413      	add	r3, r2
 80070cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80070d2:	e764      	b.n	8006f9e <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <create_name+0x2be>
			if (si > di) break;			/* No extension */
 80070d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2be5      	cmp	r3, #229	; 0xe5
 80070e2:	d103      	bne.n	80070ec <create_name+0x2d0>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2205      	movs	r2, #5
 80070ea:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d104      	bne.n	80070fc <create_name+0x2e0>
 80070f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80070fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007100:	f003 030c 	and.w	r3, r3, #12
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d005      	beq.n	8007114 <create_name+0x2f8>
 8007108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d105      	bne.n	8007120 <create_name+0x304>
		cf |= NS_LFN;
 8007114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d117      	bne.n	800715c <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800712c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <create_name+0x328>
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713c:	f043 0310 	orr.w	r3, r3, #16
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b04      	cmp	r3, #4
 800714e:	d105      	bne.n	800715c <create_name+0x340>
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007154:	f043 0308 	orr.w	r3, r3, #8
 8007158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	330b      	adds	r3, #11
 8007162:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007166:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007168:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800716a:	4618      	mov	r0, r3
 800716c:	3728      	adds	r7, #40	; 0x28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	08008ce8 	.word	0x08008ce8
 8007178:	08008d48 	.word	0x08008d48
 800717c:	08008cf4 	.word	0x08008cf4

08007180 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b2f      	cmp	r3, #47	; 0x2f
 8007190:	d003      	beq.n	800719a <follow_path+0x1a>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b5c      	cmp	r3, #92	; 0x5c
 8007198:	d102      	bne.n	80071a0 <follow_path+0x20>
		path++;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b1f      	cmp	r3, #31
 80071ac:	d809      	bhi.n	80071c2 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff f8c0 	bl	8006336 <dir_sdi>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	615a      	str	r2, [r3, #20]
 80071c0:	e041      	b.n	8007246 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071c2:	463b      	mov	r3, r7
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fe28 	bl	8006e1c <create_name>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d132      	bne.n	800723c <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff fc72 	bl	8006ac0 <dir_find>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	7adb      	ldrb	r3, [r3, #11]
 80071e6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d125      	bne.n	8007240 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d120      	bne.n	8007240 <follow_path+0xc0>
 80071fe:	2305      	movs	r3, #5
 8007200:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007202:	e01d      	b.n	8007240 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d11a      	bne.n	8007244 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	330b      	adds	r3, #11
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	d102      	bne.n	8007228 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 8007222:	2305      	movs	r3, #5
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	e00e      	b.n	8007246 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fa60 	bl	80066f4 <ld_clust>
 8007234:	4602      	mov	r2, r0
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800723a:	e7c2      	b.n	80071c2 <follow_path+0x42>
			if (res != FR_OK) break;
 800723c:	bf00      	nop
 800723e:	e002      	b.n	8007246 <follow_path+0xc6>
				break;
 8007240:	bf00      	nop
 8007242:	e000      	b.n	8007246 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007244:	bf00      	nop
		}
	}

	return res;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d031      	beq.n	80072ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e002      	b.n	8007274 <get_ldnumber+0x24>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	3301      	adds	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b1f      	cmp	r3, #31
 800727a:	d903      	bls.n	8007284 <get_ldnumber+0x34>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b3a      	cmp	r3, #58	; 0x3a
 8007282:	d1f4      	bne.n	800726e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b3a      	cmp	r3, #58	; 0x3a
 800728a:	d11c      	bne.n	80072c6 <get_ldnumber+0x76>
			tp = *path;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	60fa      	str	r2, [r7, #12]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	3b30      	subs	r3, #48	; 0x30
 800729c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	d80e      	bhi.n	80072c2 <get_ldnumber+0x72>
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d10a      	bne.n	80072c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <get_ldnumber+0x72>
					vol = (int)i;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	3301      	adds	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	e002      	b.n	80072cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072ca:	693b      	ldr	r3, [r7, #16]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr
	...

080072d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f04f 32ff 	mov.w	r2, #4294967295
 80072f0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fe fbc3 	bl	8005a82 <move_window>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <check_fs+0x2e>
		return 3;
 8007302:	2303      	movs	r3, #3
 8007304:	e04a      	b.n	800739c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800730c:	3301      	adds	r3, #1
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	b21a      	sxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800731a:	b21b      	sxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b21b      	sxth	r3, r3
 8007320:	4a20      	ldr	r2, [pc, #128]	; (80073a4 <check_fs+0xcc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d001      	beq.n	800732a <check_fs+0x52>
		return 2;
 8007326:	2302      	movs	r3, #2
 8007328:	e038      	b.n	800739c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3336      	adds	r3, #54	; 0x36
 800732e:	3303      	adds	r3, #3
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	061a      	lsls	r2, r3, #24
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3336      	adds	r3, #54	; 0x36
 8007338:	3302      	adds	r3, #2
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	4313      	orrs	r3, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	3236      	adds	r2, #54	; 0x36
 8007344:	3201      	adds	r2, #1
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	0212      	lsls	r2, r2, #8
 800734a:	4313      	orrs	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007352:	4313      	orrs	r3, r2
 8007354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <check_fs+0xd0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d101      	bne.n	8007362 <check_fs+0x8a>
		return 0;
 800735e:	2300      	movs	r3, #0
 8007360:	e01c      	b.n	800739c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3352      	adds	r3, #82	; 0x52
 8007366:	3303      	adds	r3, #3
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	061a      	lsls	r2, r3, #24
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3352      	adds	r3, #82	; 0x52
 8007370:	3302      	adds	r3, #2
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	4313      	orrs	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	3252      	adds	r2, #82	; 0x52
 800737c:	3201      	adds	r2, #1
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	0212      	lsls	r2, r2, #8
 8007382:	4313      	orrs	r3, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800738a:	4313      	orrs	r3, r2
 800738c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007390:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <check_fs+0xd0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <check_fs+0xc2>
		return 0;
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <check_fs+0xc4>

	return 1;
 800739a:	2301      	movs	r3, #1
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	ffffaa55 	.word	0xffffaa55
 80073a8:	00544146 	.word	0x00544146

080073ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b096      	sub	sp, #88	; 0x58
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073c0:	68b8      	ldr	r0, [r7, #8]
 80073c2:	f7ff ff45 	bl	8007250 <get_ldnumber>
 80073c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	da01      	bge.n	80073d2 <find_volume+0x26>
 80073ce:	230b      	movs	r3, #11
 80073d0:	e2de      	b.n	8007990 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073d2:	4ab1      	ldr	r2, [pc, #708]	; (8007698 <find_volume+0x2ec>)
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <find_volume+0x3a>
 80073e2:	230c      	movs	r3, #12
 80073e4:	e2d4      	b.n	8007990 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ea:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01b      	beq.n	800742e <find_volume+0x82>
		stat = disk_status(fs->drv);
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe f835 	bl	800546c <disk_status>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10c      	bne.n	800742e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <find_volume+0x7e>
 800741a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8007426:	230a      	movs	r3, #10
 8007428:	e2b2      	b.n	8007990 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800742a:	2300      	movs	r3, #0
 800742c:	e2b0      	b.n	8007990 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007438:	b2da      	uxtb	r2, r3
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe f82a 	bl	80054a0 <disk_initialize>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800745e:	2303      	movs	r3, #3
 8007460:	e296      	b.n	8007990 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <find_volume+0xcc>
 8007468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007474:	230a      	movs	r3, #10
 8007476:	e28b      	b.n	8007990 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8007484:	461a      	mov	r2, r3
 8007486:	2102      	movs	r1, #2
 8007488:	f7fe f870 	bl	800556c <disk_ioctl>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800749c:	d305      	bcc.n	80074aa <find_volume+0xfe>
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80074a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a8:	d901      	bls.n	80074ae <find_volume+0x102>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e270      	b.n	8007990 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80074b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074b6:	f7ff ff0f 	bl	80072d8 <check_fs>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80074c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d155      	bne.n	8007574 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80074c8:	2300      	movs	r3, #0
 80074ca:	643b      	str	r3, [r7, #64]	; 0x40
 80074cc:	e029      	b.n	8007522 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80074ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80074d8:	4413      	add	r3, r2
 80074da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	3304      	adds	r3, #4
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d012      	beq.n	800750c <find_volume+0x160>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	330b      	adds	r3, #11
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	061a      	lsls	r2, r3, #24
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	330a      	adds	r3, #10
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	4313      	orrs	r3, r2
 80074f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fa:	3209      	adds	r2, #9
 80074fc:	7812      	ldrb	r2, [r2, #0]
 80074fe:	0212      	lsls	r2, r2, #8
 8007500:	4313      	orrs	r3, r2
 8007502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007504:	3208      	adds	r2, #8
 8007506:	7812      	ldrb	r2, [r2, #0]
 8007508:	431a      	orrs	r2, r3
 800750a:	e000      	b.n	800750e <find_volume+0x162>
 800750c:	2200      	movs	r2, #0
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007516:	440b      	add	r3, r1
 8007518:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800751c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751e:	3301      	adds	r3, #1
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
 8007522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007524:	2b03      	cmp	r3, #3
 8007526:	d9d2      	bls.n	80074ce <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007528:	2300      	movs	r3, #0
 800752a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800752c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <find_volume+0x18c>
 8007532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007534:	3b01      	subs	r3, #1
 8007536:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007540:	4413      	add	r3, r2
 8007542:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007546:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <find_volume+0x1ae>
 800754e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007552:	f7ff fec1 	bl	80072d8 <check_fs>
 8007556:	4603      	mov	r3, r0
 8007558:	e000      	b.n	800755c <find_volume+0x1b0>
 800755a:	2302      	movs	r3, #2
 800755c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <find_volume+0x1c8>
 8007568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756a:	3301      	adds	r3, #1
 800756c:	643b      	str	r3, [r7, #64]	; 0x40
 800756e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007570:	2b03      	cmp	r3, #3
 8007572:	d9e1      	bls.n	8007538 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007578:	2b03      	cmp	r3, #3
 800757a:	d101      	bne.n	8007580 <find_volume+0x1d4>
 800757c:	2301      	movs	r3, #1
 800757e:	e207      	b.n	8007990 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <find_volume+0x1e0>
 8007588:	230d      	movs	r3, #13
 800758a:	e201      	b.n	8007990 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	7b1b      	ldrb	r3, [r3, #12]
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	b21a      	sxth	r2, r3
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	7adb      	ldrb	r3, [r3, #11]
 8007598:	b21b      	sxth	r3, r3
 800759a:	4313      	orrs	r3, r2
 800759c:	b21a      	sxth	r2, r3
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80075a4:	b21b      	sxth	r3, r3
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d001      	beq.n	80075ae <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 80075aa:	230d      	movs	r3, #13
 80075ac:	e1f0      	b.n	8007990 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	7ddb      	ldrb	r3, [r3, #23]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	b21a      	sxth	r2, r3
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	7d9b      	ldrb	r3, [r3, #22]
 80075ba:	b21b      	sxth	r3, r3
 80075bc:	4313      	orrs	r3, r2
 80075be:	b21b      	sxth	r3, r3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80075c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d112      	bne.n	80075f0 <find_volume+0x244>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80075d0:	061a      	lsls	r2, r3, #24
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	4313      	orrs	r3, r2
 80075dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075de:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80075e2:	0212      	lsls	r2, r2, #8
 80075e4:	4313      	orrs	r3, r2
 80075e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80075ec:	4313      	orrs	r3, r2
 80075ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075f4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	7c1a      	ldrb	r2, [r3, #16]
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007608:	2b01      	cmp	r3, #1
 800760a:	d006      	beq.n	800761a <find_volume+0x26e>
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007612:	2b02      	cmp	r3, #2
 8007614:	d001      	beq.n	800761a <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 8007616:	230d      	movs	r3, #13
 8007618:	e1ba      	b.n	8007990 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007620:	461a      	mov	r2, r3
 8007622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007624:	fb02 f303 	mul.w	r3, r2, r3
 8007628:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	7b5a      	ldrb	r2, [r3, #13]
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <find_volume+0x2a8>
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007644:	461a      	mov	r2, r3
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800764c:	3b01      	subs	r3, #1
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 8007654:	230d      	movs	r3, #13
 8007656:	e19b      	b.n	8007990 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	7c9b      	ldrb	r3, [r3, #18]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b21a      	sxth	r2, r3
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	7c5b      	ldrb	r3, [r3, #17]
 8007664:	b21b      	sxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b21b      	sxth	r3, r3
 800766a:	b29a      	uxth	r2, r3
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800767e:	0952      	lsrs	r2, r2, #5
 8007680:	b292      	uxth	r2, r2
 8007682:	fbb3 f1f2 	udiv	r1, r3, r2
 8007686:	fb02 f201 	mul.w	r2, r2, r1
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 8007692:	230d      	movs	r3, #13
 8007694:	e17c      	b.n	8007990 <find_volume+0x5e4>
 8007696:	bf00      	nop
 8007698:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	7d1b      	ldrb	r3, [r3, #20]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	b21a      	sxth	r2, r3
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	7cdb      	ldrb	r3, [r3, #19]
 80076a8:	b21b      	sxth	r3, r3
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80076b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d112      	bne.n	80076de <find_volume+0x332>
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076be:	061a      	lsls	r2, r3, #24
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	4313      	orrs	r3, r2
 80076ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076cc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80076d0:	0212      	lsls	r2, r2, #8
 80076d2:	4313      	orrs	r3, r2
 80076d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80076da:	4313      	orrs	r3, r2
 80076dc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	7bdb      	ldrb	r3, [r3, #15]
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	b21a      	sxth	r2, r3
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	7b9b      	ldrb	r3, [r3, #14]
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	4313      	orrs	r3, r2
 80076ee:	b21b      	sxth	r3, r3
 80076f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80076f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <find_volume+0x350>
 80076f8:	230d      	movs	r3, #13
 80076fa:	e149      	b.n	8007990 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80076fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007700:	4413      	add	r3, r2
 8007702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007704:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8007708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800770a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800770e:	0952      	lsrs	r2, r2, #5
 8007710:	b292      	uxth	r2, r2
 8007712:	fbb1 f2f2 	udiv	r2, r1, r2
 8007716:	b292      	uxth	r2, r2
 8007718:	4413      	add	r3, r2
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800771c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	429a      	cmp	r2, r3
 8007722:	d201      	bcs.n	8007728 <find_volume+0x37c>
 8007724:	230d      	movs	r3, #13
 8007726:	e133      	b.n	8007990 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007730:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007734:	fbb3 f3f2 	udiv	r3, r3, r2
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <find_volume+0x398>
 8007740:	230d      	movs	r3, #13
 8007742:	e125      	b.n	8007990 <find_volume+0x5e4>
	fmt = FS_FAT12;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007750:	4293      	cmp	r3, r2
 8007752:	d902      	bls.n	800775a <find_volume+0x3ae>
 8007754:	2302      	movs	r3, #2
 8007756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007760:	4293      	cmp	r3, r2
 8007762:	d902      	bls.n	800776a <find_volume+0x3be>
 8007764:	2303      	movs	r3, #3
 8007766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	1c9a      	adds	r2, r3, #2
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007778:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800777c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800777e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007780:	441a      	add	r2, r3
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8007788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	441a      	add	r2, r3
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8007794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007798:	2b03      	cmp	r3, #3
 800779a:	d121      	bne.n	80077e0 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <find_volume+0x3fe>
 80077a6:	230d      	movs	r3, #13
 80077a8:	e0f2      	b.n	8007990 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077b0:	061a      	lsls	r2, r3, #24
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	4313      	orrs	r3, r2
 80077bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80077c2:	0212      	lsls	r2, r2, #8
 80077c4:	4313      	orrs	r3, r2
 80077c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077c8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80077cc:	431a      	orrs	r2, r3
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	647b      	str	r3, [r7, #68]	; 0x44
 80077de:	e025      	b.n	800782c <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <find_volume+0x442>
 80077ea:	230d      	movs	r3, #13
 80077ec:	e0d0      	b.n	8007990 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80077f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f6:	441a      	add	r2, r3
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80077fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007802:	2b02      	cmp	r3, #2
 8007804:	d104      	bne.n	8007810 <find_volume+0x464>
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	e00c      	b.n	800782a <find_volume+0x47e>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	085a      	lsrs	r2, r3, #1
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800782a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007838:	4619      	mov	r1, r3
 800783a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800783c:	440b      	add	r3, r1
 800783e:	3b01      	subs	r3, #1
 8007840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007842:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8007846:	fbb3 f3f1 	udiv	r3, r3, r1
 800784a:	429a      	cmp	r2, r3
 800784c:	d201      	bcs.n	8007852 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800784e:	230d      	movs	r3, #13
 8007850:	e09e      	b.n	8007990 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	2280      	movs	r2, #128	; 0x80
 800786c:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007874:	2b03      	cmp	r3, #3
 8007876:	d177      	bne.n	8007968 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	b21a      	sxth	r2, r3
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007888:	b21b      	sxth	r3, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	b21b      	sxth	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d16a      	bne.n	8007968 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007894:	3301      	adds	r3, #1
 8007896:	4619      	mov	r1, r3
 8007898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800789a:	f7fe f8f2 	bl	8005a82 <move_window>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d161      	bne.n	8007968 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	b21a      	sxth	r2, r3
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80078bc:	b21b      	sxth	r3, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	b21b      	sxth	r3, r3
 80078c2:	4a35      	ldr	r2, [pc, #212]	; (8007998 <find_volume+0x5ec>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d14f      	bne.n	8007968 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	78db      	ldrb	r3, [r3, #3]
 80078cc:	061a      	lsls	r2, r3, #24
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	789b      	ldrb	r3, [r3, #2]
 80078d2:	041b      	lsls	r3, r3, #16
 80078d4:	4313      	orrs	r3, r2
 80078d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078d8:	7852      	ldrb	r2, [r2, #1]
 80078da:	0212      	lsls	r2, r2, #8
 80078dc:	4313      	orrs	r3, r2
 80078de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	4a2d      	ldr	r2, [pc, #180]	; (800799c <find_volume+0x5f0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d13e      	bne.n	8007968 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80078f0:	061a      	lsls	r2, r3, #24
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	4313      	orrs	r3, r2
 80078fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078fe:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007902:	0212      	lsls	r2, r2, #8
 8007904:	4313      	orrs	r3, r2
 8007906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007908:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800790c:	4313      	orrs	r3, r2
 800790e:	4a24      	ldr	r2, [pc, #144]	; (80079a0 <find_volume+0x5f4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d129      	bne.n	8007968 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800791a:	061a      	lsls	r2, r3, #24
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	4313      	orrs	r3, r2
 8007926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007928:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800792c:	0212      	lsls	r2, r2, #8
 800792e:	4313      	orrs	r3, r2
 8007930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007932:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007936:	431a      	orrs	r2, r3
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007944:	061a      	lsls	r2, r3, #24
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	4313      	orrs	r3, r2
 8007950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007952:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007956:	0212      	lsls	r2, r2, #8
 8007958:	4313      	orrs	r3, r2
 800795a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007960:	431a      	orrs	r2, r3
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800796e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <find_volume+0x5f8>)
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	3301      	adds	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <find_volume+0x5f8>)
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <find_volume+0x5f8>)
 8007980:	881a      	ldrh	r2, [r3, #0]
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007988:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800798a:	f7fe f807 	bl	800599c <clear_lock>
#endif

	return FR_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3758      	adds	r7, #88	; 0x58
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	ffffaa55 	.word	0xffffaa55
 800799c:	41615252 	.word	0x41615252
 80079a0:	61417272 	.word	0x61417272
 80079a4:	200000b0 	.word	0x200000b0

080079a8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01d      	beq.n	80079f6 <validate+0x4e>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d019      	beq.n	80079f6 <validate+0x4e>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d013      	beq.n	80079f6 <validate+0x4e>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	889b      	ldrh	r3, [r3, #4]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d10b      	bne.n	80079f6 <validate+0x4e>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd fd40 	bl	800546c <disk_status>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <validate+0x52>
		return FR_INVALID_OBJECT;
 80079f6:	2309      	movs	r3, #9
 80079f8:	e000      	b.n	80079fc <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007a16:	f107 0310 	add.w	r3, r7, #16
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fc18 	bl	8007250 <get_ldnumber>
 8007a20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da01      	bge.n	8007a2c <f_mount+0x28>
 8007a28:	230b      	movs	r3, #11
 8007a2a:	e02d      	b.n	8007a88 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a2c:	4a18      	ldr	r2, [pc, #96]	; (8007a90 <f_mount+0x8c>)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007a3c:	69b8      	ldr	r0, [r7, #24]
 8007a3e:	f7fd ffad 	bl	800599c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	490d      	ldr	r1, [pc, #52]	; (8007a90 <f_mount+0x8c>)
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <f_mount+0x6a>
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d001      	beq.n	8007a72 <f_mount+0x6e>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e00a      	b.n	8007a88 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007a72:	f107 0108 	add.w	r1, r7, #8
 8007a76:	f107 030c 	add.w	r3, r7, #12
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff fc95 	bl	80073ac <find_volume>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	200000ac 	.word	0x200000ac

08007a94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b096      	sub	sp, #88	; 0x58
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <f_open+0x18>
 8007aa8:	2309      	movs	r3, #9
 8007aaa:	e16d      	b.n	8007d88 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	f107 0108 	add.w	r1, r7, #8
 8007ac6:	f107 0320 	add.w	r3, r7, #32
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fc6e 	bl	80073ac <find_volume>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 8152 	bne.w	8007d84 <f_open+0x2f0>
		INIT_BUF(dj);
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ae6:	4baa      	ldr	r3, [pc, #680]	; (8007d90 <f_open+0x2fc>)
 8007ae8:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	f107 0320 	add.w	r3, r7, #32
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fb44 	bl	8007180 <follow_path>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d118      	bne.n	8007b3c <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 8007b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d103      	bne.n	8007b18 <f_open+0x84>
				res = FR_INVALID_NAME;
 8007b10:	2306      	movs	r3, #6
 8007b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007b16:	e011      	b.n	8007b3c <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f107 0320 	add.w	r3, r7, #32
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fdb1 	bl	8005698 <chk_lock>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	f003 031c 	and.w	r3, r3, #28
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 809a 	beq.w	8007c7c <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 8007b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d019      	beq.n	8007b84 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007b50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d10e      	bne.n	8007b76 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b58:	f7fd fe08 	bl	800576c <enq_lock>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d006      	beq.n	8007b70 <f_open+0xdc>
 8007b62:	f107 0320 	add.w	r3, r7, #32
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff f85e 	bl	8006c28 <dir_register>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	e000      	b.n	8007b72 <f_open+0xde>
 8007b70:	2312      	movs	r3, #18
 8007b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	f043 0308 	orr.w	r3, r3, #8
 8007b7c:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
 8007b82:	e012      	b.n	8007baa <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b86:	330b      	adds	r3, #11
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 0311 	and.w	r3, r3, #17
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <f_open+0x106>
					res = FR_DENIED;
 8007b92:	2307      	movs	r3, #7
 8007b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007b98:	e007      	b.n	8007baa <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <f_open+0x116>
						res = FR_EXIST;
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007baa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 8082 	bne.w	8007cb8 <f_open+0x224>
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d07c      	beq.n	8007cb8 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 8007bbe:	f7fd fbef 	bl	80053a0 <get_fattime>
 8007bc2:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc6:	330e      	adds	r3, #14
 8007bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd8:	330f      	adds	r3, #15
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be0:	0c1a      	lsrs	r2, r3, #16
 8007be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be4:	3310      	adds	r3, #16
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bec:	0e1a      	lsrs	r2, r3, #24
 8007bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf0:	3311      	adds	r3, #17
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf8:	330b      	adds	r3, #11
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c00:	331c      	adds	r3, #28
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c08:	331d      	adds	r3, #29
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c10:	331e      	adds	r3, #30
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c18:	331f      	adds	r3, #31
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fd66 	bl	80066f4 <ld_clust>
 8007c28:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007c2e:	f7fe fd8e 	bl	800674e <st_clust>
				dj.fs->wflag = 1;
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8007c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d03b      	beq.n	8007cb8 <f_open+0x224>
					dw = dj.fs->winsect;
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8007c46:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe fa43 	bl	80060d8 <remove_chain>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 8007c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d12b      	bne.n	8007cb8 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c64:	3a01      	subs	r2, #1
 8007c66:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd ff07 	bl	8005a82 <move_window>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007c7a:	e01d      	b.n	8007cb8 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d119      	bne.n	8007cb8 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c86:	330b      	adds	r3, #11
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <f_open+0x206>
					res = FR_NO_FILE;
 8007c92:	2304      	movs	r3, #4
 8007c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007c98:	e00e      	b.n	8007cb8 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d009      	beq.n	8007cb8 <f_open+0x224>
 8007ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca6:	330b      	adds	r3, #11
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <f_open+0x224>
						res = FR_DENIED;
 8007cb2:	2307      	movs	r3, #7
 8007cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8007cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d129      	bne.n	8007d14 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <f_open+0x23e>
				mode |= FA__WRITTEN;
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	f043 0320 	orr.w	r3, r3, #32
 8007cd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ce0:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bf14      	ite	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	2300      	moveq	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f107 0320 	add.w	r3, r7, #32
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd fd5a 	bl	80057b4 <inc_lock>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <f_open+0x280>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d133      	bne.n	8007d84 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	79fa      	ldrb	r2, [r7, #7]
 8007d20:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fce1 	bl	80066f4 <ld_clust>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3a:	331f      	adds	r3, #31
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	061a      	lsls	r2, r3, #24
 8007d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d42:	331e      	adds	r3, #30
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d4c:	321d      	adds	r2, #29
 8007d4e:	7812      	ldrb	r2, [r2, #0]
 8007d50:	0212      	lsls	r2, r2, #8
 8007d52:	4313      	orrs	r3, r2
 8007d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d56:	321c      	adds	r2, #28
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007d72:	6a3a      	ldr	r2, [r7, #32]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3758      	adds	r7, #88	; 0x58
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	200000cc 	.word	0x200000cc

08007d94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff fdfb 	bl	80079a8 <validate>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <f_write+0x2c>
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	e191      	b.n	80080e4 <f_write+0x350>
	if (fp->err)							/* Check error */
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	79db      	ldrb	r3, [r3, #7]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	79db      	ldrb	r3, [r3, #7]
 8007dcc:	e18a      	b.n	80080e4 <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	799b      	ldrb	r3, [r3, #6]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007dda:	2307      	movs	r3, #7
 8007ddc:	e182      	b.n	80080e4 <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	f080 8162 	bcs.w	80080b4 <f_write+0x320>
 8007df0:	2300      	movs	r3, #0
 8007df2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007df4:	e15e      	b.n	80080b4 <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007e02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e06:	fb02 f201 	mul.w	r2, r2, r1
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f040 80fd 	bne.w	800800c <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4013      	ands	r3, r2
 8007e32:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007e34:	7dbb      	ldrb	r3, [r7, #22]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d145      	bne.n	8007ec6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10d      	bne.n	8007e5e <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d11c      	bne.n	8007e88 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2100      	movs	r1, #0
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe f999 	bl	800618c <create_chain>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8007e5c:	e014      	b.n	8007e88 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d007      	beq.n	8007e76 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7fe fa2a 	bl	80062c6 <clmt_clust>
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24
 8007e74:	e008      	b.n	8007e88 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7fe f983 	bl	800618c <create_chain>
 8007e86:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 8117 	beq.w	80080be <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d104      	bne.n	8007ea0 <f_write+0x10c>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	71da      	strb	r2, [r3, #7]
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e121      	b.n	80080e4 <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d104      	bne.n	8007eb2 <f_write+0x11e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	71da      	strb	r2, [r3, #7]
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e118      	b.n	80080e4 <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb6:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <f_write+0x132>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec4:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d10c      	bne.n	8007ef0 <f_write+0x15c>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fd88 	bl	80059f0 <sync_window>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	71da      	strb	r2, [r3, #7]
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0f9      	b.n	80080e4 <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7fd fe9d 	bl	8005c3a <clust2sect>
 8007f00:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d104      	bne.n	8007f12 <f_write+0x17e>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	71da      	strb	r2, [r3, #7]
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e0e8      	b.n	80080e4 <f_write+0x350>
			sect += csect;
 8007f12:	7dbb      	ldrb	r3, [r7, #22]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f2a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d051      	beq.n	8007fd6 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007f32:	7dba      	ldrb	r2, [r7, #22]
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d907      	bls.n	8007f54 <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	7dbb      	ldrb	r3, [r7, #22]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	f7fd fae3 	bl	800552c <disk_write>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	71da      	strb	r2, [r3, #7]
 8007f72:	2301      	movs	r3, #1
 8007f74:	e0b6      	b.n	80080e4 <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d91c      	bls.n	8007fc2 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	18d1      	adds	r1, r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f7fd faf8 	bl	80055a8 <mem_cpy>
					fp->fs->wflag = 0;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007fca:	461a      	mov	r2, r3
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	623b      	str	r3, [r7, #32]
				continue;
 8007fd4:	e05a      	b.n	800808c <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d311      	bcc.n	8008006 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd fd02 	bl	80059f0 <sync_window>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <f_write+0x268>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	71da      	strb	r2, [r3, #7]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e073      	b.n	80080e4 <f_write+0x350>
				fp->fs->winsect = sect;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008014:	4618      	mov	r0, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008022:	fbb3 f1f2 	udiv	r1, r3, r2
 8008026:	fb02 f201 	mul.w	r2, r2, r1
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	1ac3      	subs	r3, r0, r3
 800802e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008030:	6a3a      	ldr	r2, [r7, #32]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d901      	bls.n	800803c <f_write+0x2a8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fd fd1b 	bl	8005a82 <move_window>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	71da      	strb	r2, [r3, #7]
 8008058:	2301      	movs	r3, #1
 800805a:	e043      	b.n	80080e4 <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800806c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008070:	fb02 f200 	mul.w	r2, r2, r0
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	440b      	add	r3, r1
 8008078:	6a3a      	ldr	r2, [r7, #32]
 800807a:	69b9      	ldr	r1, [r7, #24]
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd fa93 	bl	80055a8 <mem_cpy>
		fp->fs->wflag = 1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	4413      	add	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	441a      	add	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f47f ae9d 	bne.w	8007df6 <f_write+0x62>
 80080bc:	e000      	b.n	80080c0 <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80080be:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d903      	bls.n	80080d4 <f_write+0x340>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	799b      	ldrb	r3, [r3, #6]
 80080d8:	f043 0320 	orr.w	r3, r3, #32
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3728      	adds	r7, #40	; 0x28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fc57 	bl	80079a8 <validate>
 80080fa:	4603      	mov	r3, r0
 80080fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d178      	bne.n	80081f6 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	799b      	ldrb	r3, [r3, #6]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d072      	beq.n	80081f6 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fd fcb1 	bl	8005a82 <move_window>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d165      	bne.n	80081f6 <f_sync+0x10a>
				dir = fp->dir_ptr;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	330b      	adds	r3, #11
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	330b      	adds	r3, #11
 800813a:	f042 0220 	orr.w	r2, r2, #32
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	331c      	adds	r3, #28
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	b29b      	uxth	r3, r3
 8008154:	0a1b      	lsrs	r3, r3, #8
 8008156:	b29a      	uxth	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	331d      	adds	r3, #29
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	0c1a      	lsrs	r2, r3, #16
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	331e      	adds	r3, #30
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	0e1a      	lsrs	r2, r3, #24
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	331f      	adds	r3, #31
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	4619      	mov	r1, r3
 8008182:	6938      	ldr	r0, [r7, #16]
 8008184:	f7fe fae3 	bl	800674e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008188:	f7fd f90a 	bl	80053a0 <get_fattime>
 800818c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	3316      	adds	r3, #22
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	b29b      	uxth	r3, r3
 800819c:	0a1b      	lsrs	r3, r3, #8
 800819e:	b29a      	uxth	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3317      	adds	r3, #23
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	0c1a      	lsrs	r2, r3, #16
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3318      	adds	r3, #24
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	0e1a      	lsrs	r2, r3, #24
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	3319      	adds	r3, #25
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	3312      	adds	r3, #18
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	3313      	adds	r3, #19
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	799b      	ldrb	r3, [r3, #6]
 80081d4:	f023 0320 	bic.w	r3, r3, #32
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fd fc76 	bl	8005ade <sync_fs>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff6f 	bl	80080ec <f_sync>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d114      	bne.n	8008242 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff fbc5 	bl	80079a8 <validate>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10c      	bne.n	8008242 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	4618      	mov	r0, r3
 800822e:	f7fd fb71 	bl	8005914 <dec_lock>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800825a:	2301      	movs	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008262:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 8008264:	7a5b      	ldrb	r3, [r3, #9]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	d831      	bhi.n	80082d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 800826e:	7a5b      	ldrb	r3, [r3, #9]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	461a      	mov	r2, r3
 8008274:	4b19      	ldr	r3, [pc, #100]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 8008276:	2100      	movs	r1, #0
 8008278:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800827a:	4b18      	ldr	r3, [pc, #96]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 800827c:	7a5b      	ldrb	r3, [r3, #9]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4a16      	ldr	r2, [pc, #88]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 800828c:	7a5b      	ldrb	r3, [r3, #9]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 8008294:	4413      	add	r3, r2
 8008296:	79fa      	ldrb	r2, [r7, #7]
 8008298:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800829a:	4b10      	ldr	r3, [pc, #64]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 800829c:	7a5b      	ldrb	r3, [r3, #9]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	b2d1      	uxtb	r1, r2
 80082a4:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <FATFS_LinkDriverEx+0x90>)
 80082a6:	7251      	strb	r1, [r2, #9]
 80082a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082aa:	7dbb      	ldrb	r3, [r7, #22]
 80082ac:	3330      	adds	r3, #48	; 0x30
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	3301      	adds	r3, #1
 80082b8:	223a      	movs	r2, #58	; 0x3a
 80082ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3302      	adds	r3, #2
 80082c0:	222f      	movs	r2, #47	; 0x2f
 80082c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	3303      	adds	r3, #3
 80082c8:	2200      	movs	r2, #0
 80082ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr
 80082dc:	200002cc 	.word	0x200002cc

080082e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80082ea:	2200      	movs	r2, #0
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff ffac 	bl	800824c <FATFS_LinkDriverEx>
 80082f4:	4603      	mov	r3, r0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	2b7f      	cmp	r3, #127	; 0x7f
 8008310:	d802      	bhi.n	8008318 <ff_convert+0x18>
		c = chr;
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	81fb      	strh	r3, [r7, #14]
 8008316:	e025      	b.n	8008364 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	2bff      	cmp	r3, #255	; 0xff
 8008322:	d805      	bhi.n	8008330 <ff_convert+0x30>
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	3b80      	subs	r3, #128	; 0x80
 8008328:	4a11      	ldr	r2, [pc, #68]	; (8008370 <ff_convert+0x70>)
 800832a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800832e:	e000      	b.n	8008332 <ff_convert+0x32>
 8008330:	2300      	movs	r3, #0
 8008332:	81fb      	strh	r3, [r7, #14]
 8008334:	e016      	b.n	8008364 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008336:	2300      	movs	r3, #0
 8008338:	81fb      	strh	r3, [r7, #14]
 800833a:	e009      	b.n	8008350 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	4a0c      	ldr	r2, [pc, #48]	; (8008370 <ff_convert+0x70>)
 8008340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008344:	88fa      	ldrh	r2, [r7, #6]
 8008346:	429a      	cmp	r2, r3
 8008348:	d006      	beq.n	8008358 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800834a:	89fb      	ldrh	r3, [r7, #14]
 800834c:	3301      	adds	r3, #1
 800834e:	81fb      	strh	r3, [r7, #14]
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	2b7f      	cmp	r3, #127	; 0x7f
 8008354:	d9f2      	bls.n	800833c <ff_convert+0x3c>
 8008356:	e000      	b.n	800835a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008358:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800835a:	89fb      	ldrh	r3, [r7, #14]
 800835c:	3380      	adds	r3, #128	; 0x80
 800835e:	b29b      	uxth	r3, r3
 8008360:	b2db      	uxtb	r3, r3
 8008362:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008364:	89fb      	ldrh	r3, [r7, #14]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr
 8008370:	08008dd8 	.word	0x08008dd8

08008374 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	e002      	b.n	800838a <ff_wtoupper+0x16>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	4a0f      	ldr	r2, [pc, #60]	; (80083c8 <ff_wtoupper+0x54>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d006      	beq.n	80083a4 <ff_wtoupper+0x30>
 8008396:	4a0c      	ldr	r2, [pc, #48]	; (80083c8 <ff_wtoupper+0x54>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800839e:	88fa      	ldrh	r2, [r7, #6]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d1ef      	bne.n	8008384 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80083a4:	4a08      	ldr	r2, [pc, #32]	; (80083c8 <ff_wtoupper+0x54>)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <ff_wtoupper+0x46>
 80083b0:	4a06      	ldr	r2, [pc, #24]	; (80083cc <ff_wtoupper+0x58>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b8:	e000      	b.n	80083bc <ff_wtoupper+0x48>
 80083ba:	88fb      	ldrh	r3, [r7, #6]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	08008ed8 	.word	0x08008ed8
 80083cc:	080090b8 	.word	0x080090b8

080083d0 <__errno>:
 80083d0:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <__errno+0x8>)
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000024 	.word	0x20000024

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	2600      	movs	r6, #0
 80083e0:	4d0c      	ldr	r5, [pc, #48]	; (8008414 <__libc_init_array+0x38>)
 80083e2:	4c0d      	ldr	r4, [pc, #52]	; (8008418 <__libc_init_array+0x3c>)
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	f000 fc5c 	bl	8008ca8 <_init>
 80083f0:	2600      	movs	r6, #0
 80083f2:	4d0a      	ldr	r5, [pc, #40]	; (800841c <__libc_init_array+0x40>)
 80083f4:	4c0a      	ldr	r4, [pc, #40]	; (8008420 <__libc_init_array+0x44>)
 80083f6:	1b64      	subs	r4, r4, r5
 80083f8:	10a4      	asrs	r4, r4, #2
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	080092cc 	.word	0x080092cc
 8008418:	080092cc 	.word	0x080092cc
 800841c:	080092cc 	.word	0x080092cc
 8008420:	080092d0 	.word	0x080092d0

08008424 <memset>:
 8008424:	4603      	mov	r3, r0
 8008426:	4402      	add	r2, r0
 8008428:	4293      	cmp	r3, r2
 800842a:	d100      	bne.n	800842e <memset+0xa>
 800842c:	4770      	bx	lr
 800842e:	f803 1b01 	strb.w	r1, [r3], #1
 8008432:	e7f9      	b.n	8008428 <memset+0x4>

08008434 <siprintf>:
 8008434:	b40e      	push	{r1, r2, r3}
 8008436:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800843a:	b500      	push	{lr}
 800843c:	b09c      	sub	sp, #112	; 0x70
 800843e:	ab1d      	add	r3, sp, #116	; 0x74
 8008440:	9002      	str	r0, [sp, #8]
 8008442:	9006      	str	r0, [sp, #24]
 8008444:	9107      	str	r1, [sp, #28]
 8008446:	9104      	str	r1, [sp, #16]
 8008448:	4808      	ldr	r0, [pc, #32]	; (800846c <siprintf+0x38>)
 800844a:	4909      	ldr	r1, [pc, #36]	; (8008470 <siprintf+0x3c>)
 800844c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008450:	9105      	str	r1, [sp, #20]
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	a902      	add	r1, sp, #8
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	f000 f868 	bl	800852c <_svfiprintf_r>
 800845c:	2200      	movs	r2, #0
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	b01c      	add	sp, #112	; 0x70
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	20000024 	.word	0x20000024
 8008470:	ffff0208 	.word	0xffff0208

08008474 <__ssputs_r>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	688e      	ldr	r6, [r1, #8]
 800847a:	4682      	mov	sl, r0
 800847c:	429e      	cmp	r6, r3
 800847e:	460c      	mov	r4, r1
 8008480:	4690      	mov	r8, r2
 8008482:	461f      	mov	r7, r3
 8008484:	d838      	bhi.n	80084f8 <__ssputs_r+0x84>
 8008486:	898a      	ldrh	r2, [r1, #12]
 8008488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800848c:	d032      	beq.n	80084f4 <__ssputs_r+0x80>
 800848e:	6825      	ldr	r5, [r4, #0]
 8008490:	6909      	ldr	r1, [r1, #16]
 8008492:	3301      	adds	r3, #1
 8008494:	eba5 0901 	sub.w	r9, r5, r1
 8008498:	6965      	ldr	r5, [r4, #20]
 800849a:	444b      	add	r3, r9
 800849c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084a4:	106d      	asrs	r5, r5, #1
 80084a6:	429d      	cmp	r5, r3
 80084a8:	bf38      	it	cc
 80084aa:	461d      	movcc	r5, r3
 80084ac:	0553      	lsls	r3, r2, #21
 80084ae:	d531      	bpl.n	8008514 <__ssputs_r+0xa0>
 80084b0:	4629      	mov	r1, r5
 80084b2:	f000 fb53 	bl	8008b5c <_malloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	b950      	cbnz	r0, 80084d0 <__ssputs_r+0x5c>
 80084ba:	230c      	movs	r3, #12
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	f8ca 3000 	str.w	r3, [sl]
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d0:	464a      	mov	r2, r9
 80084d2:	6921      	ldr	r1, [r4, #16]
 80084d4:	f000 face 	bl	8008a74 <memcpy>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	6126      	str	r6, [r4, #16]
 80084e6:	444e      	add	r6, r9
 80084e8:	6026      	str	r6, [r4, #0]
 80084ea:	463e      	mov	r6, r7
 80084ec:	6165      	str	r5, [r4, #20]
 80084ee:	eba5 0509 	sub.w	r5, r5, r9
 80084f2:	60a5      	str	r5, [r4, #8]
 80084f4:	42be      	cmp	r6, r7
 80084f6:	d900      	bls.n	80084fa <__ssputs_r+0x86>
 80084f8:	463e      	mov	r6, r7
 80084fa:	4632      	mov	r2, r6
 80084fc:	4641      	mov	r1, r8
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	f000 fac6 	bl	8008a90 <memmove>
 8008504:	68a3      	ldr	r3, [r4, #8]
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	1b9b      	subs	r3, r3, r6
 800850a:	4432      	add	r2, r6
 800850c:	2000      	movs	r0, #0
 800850e:	60a3      	str	r3, [r4, #8]
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	e7db      	b.n	80084cc <__ssputs_r+0x58>
 8008514:	462a      	mov	r2, r5
 8008516:	f000 fb7b 	bl	8008c10 <_realloc_r>
 800851a:	4606      	mov	r6, r0
 800851c:	2800      	cmp	r0, #0
 800851e:	d1e1      	bne.n	80084e4 <__ssputs_r+0x70>
 8008520:	4650      	mov	r0, sl
 8008522:	6921      	ldr	r1, [r4, #16]
 8008524:	f000 face 	bl	8008ac4 <_free_r>
 8008528:	e7c7      	b.n	80084ba <__ssputs_r+0x46>
	...

0800852c <_svfiprintf_r>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	4698      	mov	r8, r3
 8008532:	898b      	ldrh	r3, [r1, #12]
 8008534:	4607      	mov	r7, r0
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	460d      	mov	r5, r1
 800853a:	4614      	mov	r4, r2
 800853c:	b09d      	sub	sp, #116	; 0x74
 800853e:	d50e      	bpl.n	800855e <_svfiprintf_r+0x32>
 8008540:	690b      	ldr	r3, [r1, #16]
 8008542:	b963      	cbnz	r3, 800855e <_svfiprintf_r+0x32>
 8008544:	2140      	movs	r1, #64	; 0x40
 8008546:	f000 fb09 	bl	8008b5c <_malloc_r>
 800854a:	6028      	str	r0, [r5, #0]
 800854c:	6128      	str	r0, [r5, #16]
 800854e:	b920      	cbnz	r0, 800855a <_svfiprintf_r+0x2e>
 8008550:	230c      	movs	r3, #12
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	e0d1      	b.n	80086fe <_svfiprintf_r+0x1d2>
 800855a:	2340      	movs	r3, #64	; 0x40
 800855c:	616b      	str	r3, [r5, #20]
 800855e:	2300      	movs	r3, #0
 8008560:	9309      	str	r3, [sp, #36]	; 0x24
 8008562:	2320      	movs	r3, #32
 8008564:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008568:	2330      	movs	r3, #48	; 0x30
 800856a:	f04f 0901 	mov.w	r9, #1
 800856e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008572:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008718 <_svfiprintf_r+0x1ec>
 8008576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800857a:	4623      	mov	r3, r4
 800857c:	469a      	mov	sl, r3
 800857e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008582:	b10a      	cbz	r2, 8008588 <_svfiprintf_r+0x5c>
 8008584:	2a25      	cmp	r2, #37	; 0x25
 8008586:	d1f9      	bne.n	800857c <_svfiprintf_r+0x50>
 8008588:	ebba 0b04 	subs.w	fp, sl, r4
 800858c:	d00b      	beq.n	80085a6 <_svfiprintf_r+0x7a>
 800858e:	465b      	mov	r3, fp
 8008590:	4622      	mov	r2, r4
 8008592:	4629      	mov	r1, r5
 8008594:	4638      	mov	r0, r7
 8008596:	f7ff ff6d 	bl	8008474 <__ssputs_r>
 800859a:	3001      	adds	r0, #1
 800859c:	f000 80aa 	beq.w	80086f4 <_svfiprintf_r+0x1c8>
 80085a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a2:	445a      	add	r2, fp
 80085a4:	9209      	str	r2, [sp, #36]	; 0x24
 80085a6:	f89a 3000 	ldrb.w	r3, [sl]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 80a2 	beq.w	80086f4 <_svfiprintf_r+0x1c8>
 80085b0:	2300      	movs	r3, #0
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ba:	f10a 0a01 	add.w	sl, sl, #1
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	9307      	str	r3, [sp, #28]
 80085c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085c6:	931a      	str	r3, [sp, #104]	; 0x68
 80085c8:	4654      	mov	r4, sl
 80085ca:	2205      	movs	r2, #5
 80085cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d0:	4851      	ldr	r0, [pc, #324]	; (8008718 <_svfiprintf_r+0x1ec>)
 80085d2:	f000 fa41 	bl	8008a58 <memchr>
 80085d6:	9a04      	ldr	r2, [sp, #16]
 80085d8:	b9d8      	cbnz	r0, 8008612 <_svfiprintf_r+0xe6>
 80085da:	06d0      	lsls	r0, r2, #27
 80085dc:	bf44      	itt	mi
 80085de:	2320      	movmi	r3, #32
 80085e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e4:	0711      	lsls	r1, r2, #28
 80085e6:	bf44      	itt	mi
 80085e8:	232b      	movmi	r3, #43	; 0x2b
 80085ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ee:	f89a 3000 	ldrb.w	r3, [sl]
 80085f2:	2b2a      	cmp	r3, #42	; 0x2a
 80085f4:	d015      	beq.n	8008622 <_svfiprintf_r+0xf6>
 80085f6:	4654      	mov	r4, sl
 80085f8:	2000      	movs	r0, #0
 80085fa:	f04f 0c0a 	mov.w	ip, #10
 80085fe:	9a07      	ldr	r2, [sp, #28]
 8008600:	4621      	mov	r1, r4
 8008602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008606:	3b30      	subs	r3, #48	; 0x30
 8008608:	2b09      	cmp	r3, #9
 800860a:	d94e      	bls.n	80086aa <_svfiprintf_r+0x17e>
 800860c:	b1b0      	cbz	r0, 800863c <_svfiprintf_r+0x110>
 800860e:	9207      	str	r2, [sp, #28]
 8008610:	e014      	b.n	800863c <_svfiprintf_r+0x110>
 8008612:	eba0 0308 	sub.w	r3, r0, r8
 8008616:	fa09 f303 	lsl.w	r3, r9, r3
 800861a:	4313      	orrs	r3, r2
 800861c:	46a2      	mov	sl, r4
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	e7d2      	b.n	80085c8 <_svfiprintf_r+0x9c>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	1d19      	adds	r1, r3, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9103      	str	r1, [sp, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	bfbb      	ittet	lt
 800862e:	425b      	neglt	r3, r3
 8008630:	f042 0202 	orrlt.w	r2, r2, #2
 8008634:	9307      	strge	r3, [sp, #28]
 8008636:	9307      	strlt	r3, [sp, #28]
 8008638:	bfb8      	it	lt
 800863a:	9204      	strlt	r2, [sp, #16]
 800863c:	7823      	ldrb	r3, [r4, #0]
 800863e:	2b2e      	cmp	r3, #46	; 0x2e
 8008640:	d10c      	bne.n	800865c <_svfiprintf_r+0x130>
 8008642:	7863      	ldrb	r3, [r4, #1]
 8008644:	2b2a      	cmp	r3, #42	; 0x2a
 8008646:	d135      	bne.n	80086b4 <_svfiprintf_r+0x188>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	3402      	adds	r4, #2
 800864c:	1d1a      	adds	r2, r3, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	9203      	str	r2, [sp, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfb8      	it	lt
 8008656:	f04f 33ff 	movlt.w	r3, #4294967295
 800865a:	9305      	str	r3, [sp, #20]
 800865c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008728 <_svfiprintf_r+0x1fc>
 8008660:	2203      	movs	r2, #3
 8008662:	4650      	mov	r0, sl
 8008664:	7821      	ldrb	r1, [r4, #0]
 8008666:	f000 f9f7 	bl	8008a58 <memchr>
 800866a:	b140      	cbz	r0, 800867e <_svfiprintf_r+0x152>
 800866c:	2340      	movs	r3, #64	; 0x40
 800866e:	eba0 000a 	sub.w	r0, r0, sl
 8008672:	fa03 f000 	lsl.w	r0, r3, r0
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	3401      	adds	r4, #1
 800867a:	4303      	orrs	r3, r0
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008682:	2206      	movs	r2, #6
 8008684:	4825      	ldr	r0, [pc, #148]	; (800871c <_svfiprintf_r+0x1f0>)
 8008686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800868a:	f000 f9e5 	bl	8008a58 <memchr>
 800868e:	2800      	cmp	r0, #0
 8008690:	d038      	beq.n	8008704 <_svfiprintf_r+0x1d8>
 8008692:	4b23      	ldr	r3, [pc, #140]	; (8008720 <_svfiprintf_r+0x1f4>)
 8008694:	bb1b      	cbnz	r3, 80086de <_svfiprintf_r+0x1b2>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	3307      	adds	r3, #7
 800869a:	f023 0307 	bic.w	r3, r3, #7
 800869e:	3308      	adds	r3, #8
 80086a0:	9303      	str	r3, [sp, #12]
 80086a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a4:	4433      	add	r3, r6
 80086a6:	9309      	str	r3, [sp, #36]	; 0x24
 80086a8:	e767      	b.n	800857a <_svfiprintf_r+0x4e>
 80086aa:	460c      	mov	r4, r1
 80086ac:	2001      	movs	r0, #1
 80086ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b2:	e7a5      	b.n	8008600 <_svfiprintf_r+0xd4>
 80086b4:	2300      	movs	r3, #0
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	4619      	mov	r1, r3
 80086bc:	3401      	adds	r4, #1
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	4620      	mov	r0, r4
 80086c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c6:	3a30      	subs	r2, #48	; 0x30
 80086c8:	2a09      	cmp	r2, #9
 80086ca:	d903      	bls.n	80086d4 <_svfiprintf_r+0x1a8>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0c5      	beq.n	800865c <_svfiprintf_r+0x130>
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	e7c3      	b.n	800865c <_svfiprintf_r+0x130>
 80086d4:	4604      	mov	r4, r0
 80086d6:	2301      	movs	r3, #1
 80086d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086dc:	e7f0      	b.n	80086c0 <_svfiprintf_r+0x194>
 80086de:	ab03      	add	r3, sp, #12
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	462a      	mov	r2, r5
 80086e4:	4638      	mov	r0, r7
 80086e6:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <_svfiprintf_r+0x1f8>)
 80086e8:	a904      	add	r1, sp, #16
 80086ea:	f3af 8000 	nop.w
 80086ee:	1c42      	adds	r2, r0, #1
 80086f0:	4606      	mov	r6, r0
 80086f2:	d1d6      	bne.n	80086a2 <_svfiprintf_r+0x176>
 80086f4:	89ab      	ldrh	r3, [r5, #12]
 80086f6:	065b      	lsls	r3, r3, #25
 80086f8:	f53f af2c 	bmi.w	8008554 <_svfiprintf_r+0x28>
 80086fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086fe:	b01d      	add	sp, #116	; 0x74
 8008700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	ab03      	add	r3, sp, #12
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	462a      	mov	r2, r5
 800870a:	4638      	mov	r0, r7
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <_svfiprintf_r+0x1f8>)
 800870e:	a904      	add	r1, sp, #16
 8008710:	f000 f87c 	bl	800880c <_printf_i>
 8008714:	e7eb      	b.n	80086ee <_svfiprintf_r+0x1c2>
 8008716:	bf00      	nop
 8008718:	08009298 	.word	0x08009298
 800871c:	080092a2 	.word	0x080092a2
 8008720:	00000000 	.word	0x00000000
 8008724:	08008475 	.word	0x08008475
 8008728:	0800929e 	.word	0x0800929e

0800872c <_printf_common>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	4616      	mov	r6, r2
 8008732:	4699      	mov	r9, r3
 8008734:	688a      	ldr	r2, [r1, #8]
 8008736:	690b      	ldr	r3, [r1, #16]
 8008738:	4607      	mov	r7, r0
 800873a:	4293      	cmp	r3, r2
 800873c:	bfb8      	it	lt
 800873e:	4613      	movlt	r3, r2
 8008740:	6033      	str	r3, [r6, #0]
 8008742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008746:	460c      	mov	r4, r1
 8008748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800874c:	b10a      	cbz	r2, 8008752 <_printf_common+0x26>
 800874e:	3301      	adds	r3, #1
 8008750:	6033      	str	r3, [r6, #0]
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	0699      	lsls	r1, r3, #26
 8008756:	bf42      	ittt	mi
 8008758:	6833      	ldrmi	r3, [r6, #0]
 800875a:	3302      	addmi	r3, #2
 800875c:	6033      	strmi	r3, [r6, #0]
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	f015 0506 	ands.w	r5, r5, #6
 8008764:	d106      	bne.n	8008774 <_printf_common+0x48>
 8008766:	f104 0a19 	add.w	sl, r4, #25
 800876a:	68e3      	ldr	r3, [r4, #12]
 800876c:	6832      	ldr	r2, [r6, #0]
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	42ab      	cmp	r3, r5
 8008772:	dc28      	bgt.n	80087c6 <_printf_common+0x9a>
 8008774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008778:	1e13      	subs	r3, r2, #0
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	bf18      	it	ne
 800877e:	2301      	movne	r3, #1
 8008780:	0692      	lsls	r2, r2, #26
 8008782:	d42d      	bmi.n	80087e0 <_printf_common+0xb4>
 8008784:	4649      	mov	r1, r9
 8008786:	4638      	mov	r0, r7
 8008788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800878c:	47c0      	blx	r8
 800878e:	3001      	adds	r0, #1
 8008790:	d020      	beq.n	80087d4 <_printf_common+0xa8>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	68e5      	ldr	r5, [r4, #12]
 8008796:	f003 0306 	and.w	r3, r3, #6
 800879a:	2b04      	cmp	r3, #4
 800879c:	bf18      	it	ne
 800879e:	2500      	movne	r5, #0
 80087a0:	6832      	ldr	r2, [r6, #0]
 80087a2:	f04f 0600 	mov.w	r6, #0
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	bf08      	it	eq
 80087aa:	1aad      	subeq	r5, r5, r2
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	bf08      	it	eq
 80087b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087b4:	4293      	cmp	r3, r2
 80087b6:	bfc4      	itt	gt
 80087b8:	1a9b      	subgt	r3, r3, r2
 80087ba:	18ed      	addgt	r5, r5, r3
 80087bc:	341a      	adds	r4, #26
 80087be:	42b5      	cmp	r5, r6
 80087c0:	d11a      	bne.n	80087f8 <_printf_common+0xcc>
 80087c2:	2000      	movs	r0, #0
 80087c4:	e008      	b.n	80087d8 <_printf_common+0xac>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4652      	mov	r2, sl
 80087ca:	4649      	mov	r1, r9
 80087cc:	4638      	mov	r0, r7
 80087ce:	47c0      	blx	r8
 80087d0:	3001      	adds	r0, #1
 80087d2:	d103      	bne.n	80087dc <_printf_common+0xb0>
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087dc:	3501      	adds	r5, #1
 80087de:	e7c4      	b.n	800876a <_printf_common+0x3e>
 80087e0:	2030      	movs	r0, #48	; 0x30
 80087e2:	18e1      	adds	r1, r4, r3
 80087e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087ee:	4422      	add	r2, r4
 80087f0:	3302      	adds	r3, #2
 80087f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087f6:	e7c5      	b.n	8008784 <_printf_common+0x58>
 80087f8:	2301      	movs	r3, #1
 80087fa:	4622      	mov	r2, r4
 80087fc:	4649      	mov	r1, r9
 80087fe:	4638      	mov	r0, r7
 8008800:	47c0      	blx	r8
 8008802:	3001      	adds	r0, #1
 8008804:	d0e6      	beq.n	80087d4 <_printf_common+0xa8>
 8008806:	3601      	adds	r6, #1
 8008808:	e7d9      	b.n	80087be <_printf_common+0x92>
	...

0800880c <_printf_i>:
 800880c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008810:	460c      	mov	r4, r1
 8008812:	7e27      	ldrb	r7, [r4, #24]
 8008814:	4691      	mov	r9, r2
 8008816:	2f78      	cmp	r7, #120	; 0x78
 8008818:	4680      	mov	r8, r0
 800881a:	469a      	mov	sl, r3
 800881c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800881e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008822:	d807      	bhi.n	8008834 <_printf_i+0x28>
 8008824:	2f62      	cmp	r7, #98	; 0x62
 8008826:	d80a      	bhi.n	800883e <_printf_i+0x32>
 8008828:	2f00      	cmp	r7, #0
 800882a:	f000 80d9 	beq.w	80089e0 <_printf_i+0x1d4>
 800882e:	2f58      	cmp	r7, #88	; 0x58
 8008830:	f000 80a4 	beq.w	800897c <_printf_i+0x170>
 8008834:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800883c:	e03a      	b.n	80088b4 <_printf_i+0xa8>
 800883e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008842:	2b15      	cmp	r3, #21
 8008844:	d8f6      	bhi.n	8008834 <_printf_i+0x28>
 8008846:	a001      	add	r0, pc, #4	; (adr r0, 800884c <_printf_i+0x40>)
 8008848:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800884c:	080088a5 	.word	0x080088a5
 8008850:	080088b9 	.word	0x080088b9
 8008854:	08008835 	.word	0x08008835
 8008858:	08008835 	.word	0x08008835
 800885c:	08008835 	.word	0x08008835
 8008860:	08008835 	.word	0x08008835
 8008864:	080088b9 	.word	0x080088b9
 8008868:	08008835 	.word	0x08008835
 800886c:	08008835 	.word	0x08008835
 8008870:	08008835 	.word	0x08008835
 8008874:	08008835 	.word	0x08008835
 8008878:	080089c7 	.word	0x080089c7
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080089a9 	.word	0x080089a9
 8008884:	08008835 	.word	0x08008835
 8008888:	08008835 	.word	0x08008835
 800888c:	080089e9 	.word	0x080089e9
 8008890:	08008835 	.word	0x08008835
 8008894:	080088e9 	.word	0x080088e9
 8008898:	08008835 	.word	0x08008835
 800889c:	08008835 	.word	0x08008835
 80088a0:	080089b1 	.word	0x080089b1
 80088a4:	680b      	ldr	r3, [r1, #0]
 80088a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088aa:	1d1a      	adds	r2, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	600a      	str	r2, [r1, #0]
 80088b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088b4:	2301      	movs	r3, #1
 80088b6:	e0a4      	b.n	8008a02 <_printf_i+0x1f6>
 80088b8:	6825      	ldr	r5, [r4, #0]
 80088ba:	6808      	ldr	r0, [r1, #0]
 80088bc:	062e      	lsls	r6, r5, #24
 80088be:	f100 0304 	add.w	r3, r0, #4
 80088c2:	d50a      	bpl.n	80088da <_printf_i+0xce>
 80088c4:	6805      	ldr	r5, [r0, #0]
 80088c6:	600b      	str	r3, [r1, #0]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	da03      	bge.n	80088d4 <_printf_i+0xc8>
 80088cc:	232d      	movs	r3, #45	; 0x2d
 80088ce:	426d      	negs	r5, r5
 80088d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d4:	230a      	movs	r3, #10
 80088d6:	485e      	ldr	r0, [pc, #376]	; (8008a50 <_printf_i+0x244>)
 80088d8:	e019      	b.n	800890e <_printf_i+0x102>
 80088da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80088de:	6805      	ldr	r5, [r0, #0]
 80088e0:	600b      	str	r3, [r1, #0]
 80088e2:	bf18      	it	ne
 80088e4:	b22d      	sxthne	r5, r5
 80088e6:	e7ef      	b.n	80088c8 <_printf_i+0xbc>
 80088e8:	680b      	ldr	r3, [r1, #0]
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	1d18      	adds	r0, r3, #4
 80088ee:	6008      	str	r0, [r1, #0]
 80088f0:	0628      	lsls	r0, r5, #24
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0xec>
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	e002      	b.n	80088fe <_printf_i+0xf2>
 80088f8:	0669      	lsls	r1, r5, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0xe8>
 80088fc:	881d      	ldrh	r5, [r3, #0]
 80088fe:	2f6f      	cmp	r7, #111	; 0x6f
 8008900:	bf0c      	ite	eq
 8008902:	2308      	moveq	r3, #8
 8008904:	230a      	movne	r3, #10
 8008906:	4852      	ldr	r0, [pc, #328]	; (8008a50 <_printf_i+0x244>)
 8008908:	2100      	movs	r1, #0
 800890a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800890e:	6866      	ldr	r6, [r4, #4]
 8008910:	2e00      	cmp	r6, #0
 8008912:	bfa8      	it	ge
 8008914:	6821      	ldrge	r1, [r4, #0]
 8008916:	60a6      	str	r6, [r4, #8]
 8008918:	bfa4      	itt	ge
 800891a:	f021 0104 	bicge.w	r1, r1, #4
 800891e:	6021      	strge	r1, [r4, #0]
 8008920:	b90d      	cbnz	r5, 8008926 <_printf_i+0x11a>
 8008922:	2e00      	cmp	r6, #0
 8008924:	d04d      	beq.n	80089c2 <_printf_i+0x1b6>
 8008926:	4616      	mov	r6, r2
 8008928:	fbb5 f1f3 	udiv	r1, r5, r3
 800892c:	fb03 5711 	mls	r7, r3, r1, r5
 8008930:	5dc7      	ldrb	r7, [r0, r7]
 8008932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008936:	462f      	mov	r7, r5
 8008938:	42bb      	cmp	r3, r7
 800893a:	460d      	mov	r5, r1
 800893c:	d9f4      	bls.n	8008928 <_printf_i+0x11c>
 800893e:	2b08      	cmp	r3, #8
 8008940:	d10b      	bne.n	800895a <_printf_i+0x14e>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	07df      	lsls	r7, r3, #31
 8008946:	d508      	bpl.n	800895a <_printf_i+0x14e>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6861      	ldr	r1, [r4, #4]
 800894c:	4299      	cmp	r1, r3
 800894e:	bfde      	ittt	le
 8008950:	2330      	movle	r3, #48	; 0x30
 8008952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800895a:	1b92      	subs	r2, r2, r6
 800895c:	6122      	str	r2, [r4, #16]
 800895e:	464b      	mov	r3, r9
 8008960:	4621      	mov	r1, r4
 8008962:	4640      	mov	r0, r8
 8008964:	f8cd a000 	str.w	sl, [sp]
 8008968:	aa03      	add	r2, sp, #12
 800896a:	f7ff fedf 	bl	800872c <_printf_common>
 800896e:	3001      	adds	r0, #1
 8008970:	d14c      	bne.n	8008a0c <_printf_i+0x200>
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	b004      	add	sp, #16
 8008978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897c:	4834      	ldr	r0, [pc, #208]	; (8008a50 <_printf_i+0x244>)
 800897e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008982:	680e      	ldr	r6, [r1, #0]
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	f856 5b04 	ldr.w	r5, [r6], #4
 800898a:	061f      	lsls	r7, r3, #24
 800898c:	600e      	str	r6, [r1, #0]
 800898e:	d514      	bpl.n	80089ba <_printf_i+0x1ae>
 8008990:	07d9      	lsls	r1, r3, #31
 8008992:	bf44      	itt	mi
 8008994:	f043 0320 	orrmi.w	r3, r3, #32
 8008998:	6023      	strmi	r3, [r4, #0]
 800899a:	b91d      	cbnz	r5, 80089a4 <_printf_i+0x198>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	f023 0320 	bic.w	r3, r3, #32
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	2310      	movs	r3, #16
 80089a6:	e7af      	b.n	8008908 <_printf_i+0xfc>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	f043 0320 	orr.w	r3, r3, #32
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	2378      	movs	r3, #120	; 0x78
 80089b2:	4828      	ldr	r0, [pc, #160]	; (8008a54 <_printf_i+0x248>)
 80089b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089b8:	e7e3      	b.n	8008982 <_printf_i+0x176>
 80089ba:	065e      	lsls	r6, r3, #25
 80089bc:	bf48      	it	mi
 80089be:	b2ad      	uxthmi	r5, r5
 80089c0:	e7e6      	b.n	8008990 <_printf_i+0x184>
 80089c2:	4616      	mov	r6, r2
 80089c4:	e7bb      	b.n	800893e <_printf_i+0x132>
 80089c6:	680b      	ldr	r3, [r1, #0]
 80089c8:	6826      	ldr	r6, [r4, #0]
 80089ca:	1d1d      	adds	r5, r3, #4
 80089cc:	6960      	ldr	r0, [r4, #20]
 80089ce:	600d      	str	r5, [r1, #0]
 80089d0:	0635      	lsls	r5, r6, #24
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	d501      	bpl.n	80089da <_printf_i+0x1ce>
 80089d6:	6018      	str	r0, [r3, #0]
 80089d8:	e002      	b.n	80089e0 <_printf_i+0x1d4>
 80089da:	0671      	lsls	r1, r6, #25
 80089dc:	d5fb      	bpl.n	80089d6 <_printf_i+0x1ca>
 80089de:	8018      	strh	r0, [r3, #0]
 80089e0:	2300      	movs	r3, #0
 80089e2:	4616      	mov	r6, r2
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	e7ba      	b.n	800895e <_printf_i+0x152>
 80089e8:	680b      	ldr	r3, [r1, #0]
 80089ea:	1d1a      	adds	r2, r3, #4
 80089ec:	600a      	str	r2, [r1, #0]
 80089ee:	681e      	ldr	r6, [r3, #0]
 80089f0:	2100      	movs	r1, #0
 80089f2:	4630      	mov	r0, r6
 80089f4:	6862      	ldr	r2, [r4, #4]
 80089f6:	f000 f82f 	bl	8008a58 <memchr>
 80089fa:	b108      	cbz	r0, 8008a00 <_printf_i+0x1f4>
 80089fc:	1b80      	subs	r0, r0, r6
 80089fe:	6060      	str	r0, [r4, #4]
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2300      	movs	r3, #0
 8008a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0a:	e7a8      	b.n	800895e <_printf_i+0x152>
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4640      	mov	r0, r8
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	47d0      	blx	sl
 8008a16:	3001      	adds	r0, #1
 8008a18:	d0ab      	beq.n	8008972 <_printf_i+0x166>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	079b      	lsls	r3, r3, #30
 8008a1e:	d413      	bmi.n	8008a48 <_printf_i+0x23c>
 8008a20:	68e0      	ldr	r0, [r4, #12]
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	4298      	cmp	r0, r3
 8008a26:	bfb8      	it	lt
 8008a28:	4618      	movlt	r0, r3
 8008a2a:	e7a4      	b.n	8008976 <_printf_i+0x16a>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4649      	mov	r1, r9
 8008a32:	4640      	mov	r0, r8
 8008a34:	47d0      	blx	sl
 8008a36:	3001      	adds	r0, #1
 8008a38:	d09b      	beq.n	8008972 <_printf_i+0x166>
 8008a3a:	3501      	adds	r5, #1
 8008a3c:	68e3      	ldr	r3, [r4, #12]
 8008a3e:	9903      	ldr	r1, [sp, #12]
 8008a40:	1a5b      	subs	r3, r3, r1
 8008a42:	42ab      	cmp	r3, r5
 8008a44:	dcf2      	bgt.n	8008a2c <_printf_i+0x220>
 8008a46:	e7eb      	b.n	8008a20 <_printf_i+0x214>
 8008a48:	2500      	movs	r5, #0
 8008a4a:	f104 0619 	add.w	r6, r4, #25
 8008a4e:	e7f5      	b.n	8008a3c <_printf_i+0x230>
 8008a50:	080092a9 	.word	0x080092a9
 8008a54:	080092ba 	.word	0x080092ba

08008a58 <memchr>:
 8008a58:	4603      	mov	r3, r0
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	b2c9      	uxtb	r1, r1
 8008a5e:	4402      	add	r2, r0
 8008a60:	4293      	cmp	r3, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	d101      	bne.n	8008a6a <memchr+0x12>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e003      	b.n	8008a72 <memchr+0x1a>
 8008a6a:	7804      	ldrb	r4, [r0, #0]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	428c      	cmp	r4, r1
 8008a70:	d1f6      	bne.n	8008a60 <memchr+0x8>
 8008a72:	bd10      	pop	{r4, pc}

08008a74 <memcpy>:
 8008a74:	440a      	add	r2, r1
 8008a76:	4291      	cmp	r1, r2
 8008a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a7c:	d100      	bne.n	8008a80 <memcpy+0xc>
 8008a7e:	4770      	bx	lr
 8008a80:	b510      	push	{r4, lr}
 8008a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a86:	4291      	cmp	r1, r2
 8008a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8c:	d1f9      	bne.n	8008a82 <memcpy+0xe>
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <memmove>:
 8008a90:	4288      	cmp	r0, r1
 8008a92:	b510      	push	{r4, lr}
 8008a94:	eb01 0402 	add.w	r4, r1, r2
 8008a98:	d902      	bls.n	8008aa0 <memmove+0x10>
 8008a9a:	4284      	cmp	r4, r0
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	d807      	bhi.n	8008ab0 <memmove+0x20>
 8008aa0:	1e43      	subs	r3, r0, #1
 8008aa2:	42a1      	cmp	r1, r4
 8008aa4:	d008      	beq.n	8008ab8 <memmove+0x28>
 8008aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aae:	e7f8      	b.n	8008aa2 <memmove+0x12>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	4402      	add	r2, r0
 8008ab4:	428a      	cmp	r2, r1
 8008ab6:	d100      	bne.n	8008aba <memmove+0x2a>
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ac2:	e7f7      	b.n	8008ab4 <memmove+0x24>

08008ac4 <_free_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	d043      	beq.n	8008b54 <_free_r+0x90>
 8008acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad0:	1f0c      	subs	r4, r1, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bfb8      	it	lt
 8008ad6:	18e4      	addlt	r4, r4, r3
 8008ad8:	f000 f8d0 	bl	8008c7c <__malloc_lock>
 8008adc:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <_free_r+0x94>)
 8008ade:	6813      	ldr	r3, [r2, #0]
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	b933      	cbnz	r3, 8008af2 <_free_r+0x2e>
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	6014      	str	r4, [r2, #0]
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aee:	f000 b8cb 	b.w	8008c88 <__malloc_unlock>
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	d90a      	bls.n	8008b0c <_free_r+0x48>
 8008af6:	6821      	ldr	r1, [r4, #0]
 8008af8:	1862      	adds	r2, r4, r1
 8008afa:	4293      	cmp	r3, r2
 8008afc:	bf01      	itttt	eq
 8008afe:	681a      	ldreq	r2, [r3, #0]
 8008b00:	685b      	ldreq	r3, [r3, #4]
 8008b02:	1852      	addeq	r2, r2, r1
 8008b04:	6022      	streq	r2, [r4, #0]
 8008b06:	6063      	str	r3, [r4, #4]
 8008b08:	6004      	str	r4, [r0, #0]
 8008b0a:	e7ed      	b.n	8008ae8 <_free_r+0x24>
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	b10b      	cbz	r3, 8008b16 <_free_r+0x52>
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	d9fa      	bls.n	8008b0c <_free_r+0x48>
 8008b16:	6811      	ldr	r1, [r2, #0]
 8008b18:	1850      	adds	r0, r2, r1
 8008b1a:	42a0      	cmp	r0, r4
 8008b1c:	d10b      	bne.n	8008b36 <_free_r+0x72>
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	4401      	add	r1, r0
 8008b22:	1850      	adds	r0, r2, r1
 8008b24:	4283      	cmp	r3, r0
 8008b26:	6011      	str	r1, [r2, #0]
 8008b28:	d1de      	bne.n	8008ae8 <_free_r+0x24>
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4401      	add	r1, r0
 8008b30:	6011      	str	r1, [r2, #0]
 8008b32:	6053      	str	r3, [r2, #4]
 8008b34:	e7d8      	b.n	8008ae8 <_free_r+0x24>
 8008b36:	d902      	bls.n	8008b3e <_free_r+0x7a>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	e7d4      	b.n	8008ae8 <_free_r+0x24>
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	1821      	adds	r1, r4, r0
 8008b42:	428b      	cmp	r3, r1
 8008b44:	bf01      	itttt	eq
 8008b46:	6819      	ldreq	r1, [r3, #0]
 8008b48:	685b      	ldreq	r3, [r3, #4]
 8008b4a:	1809      	addeq	r1, r1, r0
 8008b4c:	6021      	streq	r1, [r4, #0]
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	6054      	str	r4, [r2, #4]
 8008b52:	e7c9      	b.n	8008ae8 <_free_r+0x24>
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	200002d8 	.word	0x200002d8

08008b5c <_malloc_r>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	1ccd      	adds	r5, r1, #3
 8008b60:	f025 0503 	bic.w	r5, r5, #3
 8008b64:	3508      	adds	r5, #8
 8008b66:	2d0c      	cmp	r5, #12
 8008b68:	bf38      	it	cc
 8008b6a:	250c      	movcc	r5, #12
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	db01      	blt.n	8008b76 <_malloc_r+0x1a>
 8008b72:	42a9      	cmp	r1, r5
 8008b74:	d903      	bls.n	8008b7e <_malloc_r+0x22>
 8008b76:	230c      	movs	r3, #12
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7e:	f000 f87d 	bl	8008c7c <__malloc_lock>
 8008b82:	4921      	ldr	r1, [pc, #132]	; (8008c08 <_malloc_r+0xac>)
 8008b84:	680a      	ldr	r2, [r1, #0]
 8008b86:	4614      	mov	r4, r2
 8008b88:	b99c      	cbnz	r4, 8008bb2 <_malloc_r+0x56>
 8008b8a:	4f20      	ldr	r7, [pc, #128]	; (8008c0c <_malloc_r+0xb0>)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	b923      	cbnz	r3, 8008b9a <_malloc_r+0x3e>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 f862 	bl	8008c5c <_sbrk_r>
 8008b98:	6038      	str	r0, [r7, #0]
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f85d 	bl	8008c5c <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d123      	bne.n	8008bee <_malloc_r+0x92>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	4630      	mov	r0, r6
 8008baa:	6033      	str	r3, [r6, #0]
 8008bac:	f000 f86c 	bl	8008c88 <__malloc_unlock>
 8008bb0:	e7e3      	b.n	8008b7a <_malloc_r+0x1e>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	1b5b      	subs	r3, r3, r5
 8008bb6:	d417      	bmi.n	8008be8 <_malloc_r+0x8c>
 8008bb8:	2b0b      	cmp	r3, #11
 8008bba:	d903      	bls.n	8008bc4 <_malloc_r+0x68>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	441c      	add	r4, r3
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	e004      	b.n	8008bce <_malloc_r+0x72>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	42a2      	cmp	r2, r4
 8008bc8:	bf0c      	ite	eq
 8008bca:	600b      	streq	r3, [r1, #0]
 8008bcc:	6053      	strne	r3, [r2, #4]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f85a 	bl	8008c88 <__malloc_unlock>
 8008bd4:	f104 000b 	add.w	r0, r4, #11
 8008bd8:	1d23      	adds	r3, r4, #4
 8008bda:	f020 0007 	bic.w	r0, r0, #7
 8008bde:	1ac2      	subs	r2, r0, r3
 8008be0:	d0cc      	beq.n	8008b7c <_malloc_r+0x20>
 8008be2:	1a1b      	subs	r3, r3, r0
 8008be4:	50a3      	str	r3, [r4, r2]
 8008be6:	e7c9      	b.n	8008b7c <_malloc_r+0x20>
 8008be8:	4622      	mov	r2, r4
 8008bea:	6864      	ldr	r4, [r4, #4]
 8008bec:	e7cc      	b.n	8008b88 <_malloc_r+0x2c>
 8008bee:	1cc4      	adds	r4, r0, #3
 8008bf0:	f024 0403 	bic.w	r4, r4, #3
 8008bf4:	42a0      	cmp	r0, r4
 8008bf6:	d0e3      	beq.n	8008bc0 <_malloc_r+0x64>
 8008bf8:	1a21      	subs	r1, r4, r0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 f82e 	bl	8008c5c <_sbrk_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d1dd      	bne.n	8008bc0 <_malloc_r+0x64>
 8008c04:	e7cf      	b.n	8008ba6 <_malloc_r+0x4a>
 8008c06:	bf00      	nop
 8008c08:	200002d8 	.word	0x200002d8
 8008c0c:	200002dc 	.word	0x200002dc

08008c10 <_realloc_r>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	4607      	mov	r7, r0
 8008c14:	4614      	mov	r4, r2
 8008c16:	460e      	mov	r6, r1
 8008c18:	b921      	cbnz	r1, 8008c24 <_realloc_r+0x14>
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c20:	f7ff bf9c 	b.w	8008b5c <_malloc_r>
 8008c24:	b922      	cbnz	r2, 8008c30 <_realloc_r+0x20>
 8008c26:	f7ff ff4d 	bl	8008ac4 <_free_r>
 8008c2a:	4625      	mov	r5, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	f000 f830 	bl	8008c94 <_malloc_usable_size_r>
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d20f      	bcs.n	8008c58 <_realloc_r+0x48>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f7ff ff8e 	bl	8008b5c <_malloc_r>
 8008c40:	4605      	mov	r5, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0f2      	beq.n	8008c2c <_realloc_r+0x1c>
 8008c46:	4631      	mov	r1, r6
 8008c48:	4622      	mov	r2, r4
 8008c4a:	f7ff ff13 	bl	8008a74 <memcpy>
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff ff37 	bl	8008ac4 <_free_r>
 8008c56:	e7e9      	b.n	8008c2c <_realloc_r+0x1c>
 8008c58:	4635      	mov	r5, r6
 8008c5a:	e7e7      	b.n	8008c2c <_realloc_r+0x1c>

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4d05      	ldr	r5, [pc, #20]	; (8008c78 <_sbrk_r+0x1c>)
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7f8 feb8 	bl	80019dc <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	20000fb4 	.word	0x20000fb4

08008c7c <__malloc_lock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_lock+0x8>)
 8008c7e:	f000 b811 	b.w	8008ca4 <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	20000fbc 	.word	0x20000fbc

08008c88 <__malloc_unlock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_unlock+0x8>)
 8008c8a:	f000 b80c 	b.w	8008ca6 <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20000fbc 	.word	0x20000fbc

08008c94 <_malloc_usable_size_r>:
 8008c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c98:	1f18      	subs	r0, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfbc      	itt	lt
 8008c9e:	580b      	ldrlt	r3, [r1, r0]
 8008ca0:	18c0      	addlt	r0, r0, r3
 8008ca2:	4770      	bx	lr

08008ca4 <__retarget_lock_acquire_recursive>:
 8008ca4:	4770      	bx	lr

08008ca6 <__retarget_lock_release_recursive>:
 8008ca6:	4770      	bx	lr

08008ca8 <_init>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	bf00      	nop
 8008cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cae:	bc08      	pop	{r3}
 8008cb0:	469e      	mov	lr, r3
 8008cb2:	4770      	bx	lr

08008cb4 <_fini>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr
