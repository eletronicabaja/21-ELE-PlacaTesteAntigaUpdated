
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a118  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a878  0800a878  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800a878  0800a878  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a878  0800a878  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  20000088  0800a908  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001008  0800a908  00021008  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab1a  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a14  00000000  00000000  0003abcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0003e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  0003fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b07f  00000000  00000000  000411d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c587  00000000  00000000  0005c24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095929  00000000  00000000  000787d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e0ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006448  00000000  00000000  0010e154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a210 	.word	0x0800a210

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800a210 	.word	0x0800a210

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_frsub>:
 8000aa4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa8:	e002      	b.n	8000ab0 <__addsf3>
 8000aaa:	bf00      	nop

08000aac <__aeabi_fsub>:
 8000aac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab0 <__addsf3>:
 8000ab0:	0042      	lsls	r2, r0, #1
 8000ab2:	bf1f      	itttt	ne
 8000ab4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab8:	ea92 0f03 	teqne	r2, r3
 8000abc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac4:	d06a      	beq.n	8000b9c <__addsf3+0xec>
 8000ac6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ace:	bfc1      	itttt	gt
 8000ad0:	18d2      	addgt	r2, r2, r3
 8000ad2:	4041      	eorgt	r1, r0
 8000ad4:	4048      	eorgt	r0, r1
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	bfb8      	it	lt
 8000ada:	425b      	neglt	r3, r3
 8000adc:	2b19      	cmp	r3, #25
 8000ade:	bf88      	it	hi
 8000ae0:	4770      	bxhi	lr
 8000ae2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4249      	negne	r1, r1
 8000b02:	ea92 0f03 	teq	r2, r3
 8000b06:	d03f      	beq.n	8000b88 <__addsf3+0xd8>
 8000b08:	f1a2 0201 	sub.w	r2, r2, #1
 8000b0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b10:	eb10 000c 	adds.w	r0, r0, ip
 8000b14:	f1c3 0320 	rsb	r3, r3, #32
 8000b18:	fa01 f103 	lsl.w	r1, r1, r3
 8000b1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b20:	d502      	bpl.n	8000b28 <__addsf3+0x78>
 8000b22:	4249      	negs	r1, r1
 8000b24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b2c:	d313      	bcc.n	8000b56 <__addsf3+0xa6>
 8000b2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b32:	d306      	bcc.n	8000b42 <__addsf3+0x92>
 8000b34:	0840      	lsrs	r0, r0, #1
 8000b36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3a:	f102 0201 	add.w	r2, r2, #1
 8000b3e:	2afe      	cmp	r2, #254	; 0xfe
 8000b40:	d251      	bcs.n	8000be6 <__addsf3+0x136>
 8000b42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4a:	bf08      	it	eq
 8000b4c:	f020 0001 	biceq.w	r0, r0, #1
 8000b50:	ea40 0003 	orr.w	r0, r0, r3
 8000b54:	4770      	bx	lr
 8000b56:	0049      	lsls	r1, r1, #1
 8000b58:	eb40 0000 	adc.w	r0, r0, r0
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b64:	d2ed      	bcs.n	8000b42 <__addsf3+0x92>
 8000b66:	fab0 fc80 	clz	ip, r0
 8000b6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b76:	bfaa      	itet	ge
 8000b78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b7c:	4252      	neglt	r2, r2
 8000b7e:	4318      	orrge	r0, r3
 8000b80:	bfbc      	itt	lt
 8000b82:	40d0      	lsrlt	r0, r2
 8000b84:	4318      	orrlt	r0, r3
 8000b86:	4770      	bx	lr
 8000b88:	f092 0f00 	teq	r2, #0
 8000b8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b90:	bf06      	itte	eq
 8000b92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b96:	3201      	addeq	r2, #1
 8000b98:	3b01      	subne	r3, #1
 8000b9a:	e7b5      	b.n	8000b08 <__addsf3+0x58>
 8000b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	bf18      	it	ne
 8000ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000baa:	d021      	beq.n	8000bf0 <__addsf3+0x140>
 8000bac:	ea92 0f03 	teq	r2, r3
 8000bb0:	d004      	beq.n	8000bbc <__addsf3+0x10c>
 8000bb2:	f092 0f00 	teq	r2, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	4608      	moveq	r0, r1
 8000bba:	4770      	bx	lr
 8000bbc:	ea90 0f01 	teq	r0, r1
 8000bc0:	bf1c      	itt	ne
 8000bc2:	2000      	movne	r0, #0
 8000bc4:	4770      	bxne	lr
 8000bc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bca:	d104      	bne.n	8000bd6 <__addsf3+0x126>
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bda:	bf3c      	itt	cc
 8000bdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bxcc	lr
 8000be2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	4770      	bx	lr
 8000bf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf4:	bf16      	itet	ne
 8000bf6:	4608      	movne	r0, r1
 8000bf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bfc:	4601      	movne	r1, r0
 8000bfe:	0242      	lsls	r2, r0, #9
 8000c00:	bf06      	itte	eq
 8000c02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c06:	ea90 0f01 	teqeq	r0, r1
 8000c0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_ui2f>:
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e004      	b.n	8000c20 <__aeabi_i2f+0x8>
 8000c16:	bf00      	nop

08000c18 <__aeabi_i2f>:
 8000c18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	bf48      	it	mi
 8000c1e:	4240      	negmi	r0, r0
 8000c20:	ea5f 0c00 	movs.w	ip, r0
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0000 	mov.w	r0, #0
 8000c32:	e01c      	b.n	8000c6e <__aeabi_l2f+0x2a>

08000c34 <__aeabi_ul2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e00a      	b.n	8000c58 <__aeabi_l2f+0x14>
 8000c42:	bf00      	nop

08000c44 <__aeabi_l2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__aeabi_l2f+0x14>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	ea5f 0c01 	movs.w	ip, r1
 8000c5c:	bf02      	ittt	eq
 8000c5e:	4684      	moveq	ip, r0
 8000c60:	4601      	moveq	r1, r0
 8000c62:	2000      	moveq	r0, #0
 8000c64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c68:	bf08      	it	eq
 8000c6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c72:	fabc f28c 	clz	r2, ip
 8000c76:	3a08      	subs	r2, #8
 8000c78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c7c:	db10      	blt.n	8000ca0 <__aeabi_l2f+0x5c>
 8000c7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c82:	4463      	add	r3, ip
 8000c84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c90:	fa20 f202 	lsr.w	r2, r0, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	f020 0001 	biceq.w	r0, r0, #1
 8000c9e:	4770      	bx	lr
 8000ca0:	f102 0220 	add.w	r2, r2, #32
 8000ca4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_f2iz>:
 8000cc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cc8:	d30f      	bcc.n	8000cea <__aeabi_f2iz+0x2a>
 8000cca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cd2:	d90d      	bls.n	8000cf0 <__aeabi_f2iz+0x30>
 8000cd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cdc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ce0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce4:	bf18      	it	ne
 8000ce6:	4240      	negne	r0, r0
 8000ce8:	4770      	bx	lr
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	4770      	bx	lr
 8000cf0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cf4:	d101      	bne.n	8000cfa <__aeabi_f2iz+0x3a>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	d105      	bne.n	8000d06 <__aeabi_f2iz+0x46>
 8000cfa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000cfe:	bf08      	it	eq
 8000d00:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	4770      	bx	lr

08000d0c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d16:	4802      	ldr	r0, [pc, #8]	; (8000d20 <SELECT+0x14>)
 8000d18:	f002 fe0c 	bl	8003934 <HAL_GPIO_WritePin>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010800 	.word	0x40010800

08000d24 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DESELECT+0x14>)
 8000d30:	f002 fe00 	bl	8003934 <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010800 	.word	0x40010800

08000d3c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d46:	bf00      	nop
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <SPI_TxByte+0x30>)
 8000d4a:	f004 f88a 	bl	8004e62 <HAL_SPI_GetState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d1f9      	bne.n	8000d48 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d54:	1df9      	adds	r1, r7, #7
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <SPI_TxByte+0x30>)
 8000d5e:	f003 fcb3 	bl	80046c8 <HAL_SPI_Transmit>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000aa8 	.word	0x20000aa8

08000d70 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d76:	23ff      	movs	r3, #255	; 0xff
 8000d78:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d7e:	bf00      	nop
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <SPI_RxByte+0x38>)
 8000d82:	f004 f86e 	bl	8004e62 <HAL_SPI_GetState>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d1f9      	bne.n	8000d80 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d8c:	1dba      	adds	r2, r7, #6
 8000d8e:	1df9      	adds	r1, r7, #7
 8000d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <SPI_RxByte+0x38>)
 8000d9a:	f003 fdd1 	bl	8004940 <HAL_SPI_TransmitReceive>

  return data;
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000aa8 	.word	0x20000aa8

08000dac <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000db4:	f7ff ffdc 	bl	8000d70 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	701a      	strb	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <SD_ReadyWait+0x34>)
 8000dd0:	2232      	movs	r2, #50	; 0x32
 8000dd2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000dd4:	f7ff ffcc 	bl	8000d70 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000dd8:	f7ff ffca 	bl	8000d70 <SPI_RxByte>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d004      	beq.n	8000df0 <SD_ReadyWait+0x28>
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SD_ReadyWait+0x34>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f3      	bne.n	8000dd8 <SD_ReadyWait+0x10>

  return res;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000b8c 	.word	0x20000b8c

08000e00 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e06:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e0a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000e0c:	f7ff ff8a 	bl	8000d24 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	e005      	b.n	8000e22 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000e16:	20ff      	movs	r0, #255	; 0xff
 8000e18:	f7ff ff90 	bl	8000d3c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	ddf6      	ble.n	8000e16 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000e28:	f7ff ff70 	bl	8000d0c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e40:	2395      	movs	r3, #149	; 0x95
 8000e42:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e009      	b.n	8000e5e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e4a:	1d3a      	adds	r2, r7, #4
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff72 	bl	8000d3c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	ddf2      	ble.n	8000e4a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000e64:	e002      	b.n	8000e6c <SD_PowerOn+0x6c>
  {
    Count--;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e6c:	f7ff ff80 	bl	8000d70 <SPI_RxByte>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d002      	beq.n	8000e7c <SD_PowerOn+0x7c>
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f4      	bne.n	8000e66 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000e7c:	f7ff ff52 	bl	8000d24 <DESELECT>
  SPI_TxByte(0XFF);
 8000e80:	20ff      	movs	r0, #255	; 0xff
 8000e82:	f7ff ff5b 	bl	8000d3c <SPI_TxByte>

  PowerFlag = 1;
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <SD_PowerOn+0x94>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000a5 	.word	0x200000a5

08000e98 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <SD_PowerOff+0x14>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000a5 	.word	0x200000a5

08000eb0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <SD_CheckPower+0x10>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	200000a5 	.word	0x200000a5

08000ec4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <SD_RxDataBlock+0x68>)
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000ed4:	f7ff ff4c 	bl	8000d70 <SPI_RxByte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d104      	bne.n	8000eec <SD_RxDataBlock+0x28>
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <SD_RxDataBlock+0x68>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f3      	bne.n	8000ed4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2bfe      	cmp	r3, #254	; 0xfe
 8000ef0:	d001      	beq.n	8000ef6 <SD_RxDataBlock+0x32>
    return FALSE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e016      	b.n	8000f24 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff55 	bl	8000dac <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff4f 	bl	8000dac <SPI_RxBytePtr>
  } while(btr -= 2);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3b02      	subs	r3, #2
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ed      	bne.n	8000ef6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000f1a:	f7ff ff29 	bl	8000d70 <SPI_RxByte>
  SPI_RxByte();
 8000f1e:	f7ff ff27 	bl	8000d70 <SPI_RxByte>

  return TRUE;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000b8d 	.word	0x20000b8d

08000f30 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f40:	f7ff ff42 	bl	8000dc8 <SD_ReadyWait>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d001      	beq.n	8000f4e <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e040      	b.n	8000fd0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fef3 	bl	8000d3c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	2bfd      	cmp	r3, #253	; 0xfd
 8000f5a:	d031      	beq.n	8000fc0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fee7 	bl	8000d3c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fee0 	bl	8000d3c <SPI_TxByte>
    } while (--wc);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	73bb      	strb	r3, [r7, #14]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1eb      	bne.n	8000f60 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000f88:	f7ff fef2 	bl	8000d70 <SPI_RxByte>
    SPI_RxByte();
 8000f8c:	f7ff fef0 	bl	8000d70 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000f90:	e00b      	b.n	8000faa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000f92:	f7ff feed 	bl	8000d70 <SPI_RxByte>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d006      	beq.n	8000fb2 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	2b40      	cmp	r3, #64	; 0x40
 8000fae:	d9f0      	bls.n	8000f92 <SD_TxDataBlock+0x62>
 8000fb0:	e000      	b.n	8000fb4 <SD_TxDataBlock+0x84>
        break;
 8000fb2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000fb4:	bf00      	nop
 8000fb6:	f7ff fedb 	bl	8000d70 <SPI_RxByte>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0fa      	beq.n	8000fb6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d101      	bne.n	8000fce <SD_TxDataBlock+0x9e>
    return TRUE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fe4:	f7ff fef0 	bl	8000dc8 <SD_ReadyWait>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d001      	beq.n	8000ff2 <SD_SendCmd+0x1a>
    return 0xFF;
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	e040      	b.n	8001074 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fea1 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	0e1b      	lsrs	r3, r3, #24
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe9b 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe95 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe8f 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe8a 	bl	8000d3c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b40      	cmp	r3, #64	; 0x40
 8001030:	d101      	bne.n	8001036 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001032:	2395      	movs	r3, #149	; 0x95
 8001034:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b48      	cmp	r3, #72	; 0x48
 800103a:	d101      	bne.n	8001040 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800103c:	2387      	movs	r3, #135	; 0x87
 800103e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fe7a 	bl	8000d3c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b4c      	cmp	r3, #76	; 0x4c
 800104c:	d101      	bne.n	8001052 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800104e:	f7ff fe8f 	bl	8000d70 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001052:	230a      	movs	r3, #10
 8001054:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001056:	f7ff fe8b 	bl	8000d70 <SPI_RxByte>
 800105a:	4603      	mov	r3, r0
 800105c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800105e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001062:	2b00      	cmp	r3, #0
 8001064:	da05      	bge.n	8001072 <SD_SendCmd+0x9a>
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	3b01      	subs	r3, #1
 800106a:	73bb      	strb	r3, [r7, #14]
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f1      	bne.n	8001056 <SD_SendCmd+0x7e>

  return res;
 8001072:	7b7b      	ldrb	r3, [r7, #13]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d5      	b.n	800123c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <SD_disk_initialize+0x1c8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <SD_disk_initialize+0x2a>
    return Stat;
 800109e:	4b69      	ldr	r3, [pc, #420]	; (8001244 <SD_disk_initialize+0x1c8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	e0ca      	b.n	800123c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80010a6:	f7ff feab 	bl	8000e00 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80010aa:	f7ff fe2f 	bl	8000d0c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80010b2:	2100      	movs	r1, #0
 80010b4:	2040      	movs	r0, #64	; 0x40
 80010b6:	f7ff ff8f 	bl	8000fd8 <SD_SendCmd>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f040 80a5 	bne.w	800120c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <SD_disk_initialize+0x1cc>)
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010cc:	2048      	movs	r0, #72	; 0x48
 80010ce:	f7ff ff83 	bl	8000fd8 <SD_SendCmd>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d158      	bne.n	800118a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e00c      	b.n	80010f8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010de:	7bfc      	ldrb	r4, [r7, #15]
 80010e0:	f7ff fe46 	bl	8000d70 <SPI_RxByte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4423      	add	r3, r4
 80010ee:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d9ef      	bls.n	80010de <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010fe:	7abb      	ldrb	r3, [r7, #10]
 8001100:	2b01      	cmp	r3, #1
 8001102:	f040 8083 	bne.w	800120c <SD_disk_initialize+0x190>
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2baa      	cmp	r3, #170	; 0xaa
 800110a:	d17f      	bne.n	800120c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800110c:	2100      	movs	r1, #0
 800110e:	2077      	movs	r0, #119	; 0x77
 8001110:	f7ff ff62 	bl	8000fd8 <SD_SendCmd>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d807      	bhi.n	800112a <SD_disk_initialize+0xae>
 800111a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800111e:	2069      	movs	r0, #105	; 0x69
 8001120:	f7ff ff5a 	bl	8000fd8 <SD_SendCmd>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <SD_disk_initialize+0x1cc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1eb      	bne.n	800110c <SD_disk_initialize+0x90>
 8001134:	e000      	b.n	8001138 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001136:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <SD_disk_initialize+0x1cc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d064      	beq.n	800120c <SD_disk_initialize+0x190>
 8001142:	2100      	movs	r1, #0
 8001144:	207a      	movs	r0, #122	; 0x7a
 8001146:	f7ff ff47 	bl	8000fd8 <SD_SendCmd>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d15d      	bne.n	800120c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e00c      	b.n	8001170 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001156:	7bfc      	ldrb	r4, [r7, #15]
 8001158:	f7ff fe0a 	bl	8000d70 <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4423      	add	r3, r4
 8001166:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d9ef      	bls.n	8001156 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001176:	7a3b      	ldrb	r3, [r7, #8]
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SD_disk_initialize+0x108>
 8001180:	2306      	movs	r3, #6
 8001182:	e000      	b.n	8001186 <SD_disk_initialize+0x10a>
 8001184:	2302      	movs	r3, #2
 8001186:	73bb      	strb	r3, [r7, #14]
 8001188:	e040      	b.n	800120c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800118a:	2100      	movs	r1, #0
 800118c:	2077      	movs	r0, #119	; 0x77
 800118e:	f7ff ff23 	bl	8000fd8 <SD_SendCmd>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d808      	bhi.n	80011aa <SD_disk_initialize+0x12e>
 8001198:	2100      	movs	r1, #0
 800119a:	2069      	movs	r0, #105	; 0x69
 800119c:	f7ff ff1c 	bl	8000fd8 <SD_SendCmd>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d801      	bhi.n	80011aa <SD_disk_initialize+0x12e>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e000      	b.n	80011ac <SD_disk_initialize+0x130>
 80011aa:	2301      	movs	r3, #1
 80011ac:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d10e      	bne.n	80011d2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80011b4:	2100      	movs	r1, #0
 80011b6:	2077      	movs	r0, #119	; 0x77
 80011b8:	f7ff ff0e 	bl	8000fd8 <SD_SendCmd>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d80e      	bhi.n	80011e0 <SD_disk_initialize+0x164>
 80011c2:	2100      	movs	r1, #0
 80011c4:	2069      	movs	r0, #105	; 0x69
 80011c6:	f7ff ff07 	bl	8000fd8 <SD_SendCmd>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80011d0:	e00d      	b.n	80011ee <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80011d2:	2100      	movs	r1, #0
 80011d4:	2041      	movs	r0, #65	; 0x41
 80011d6:	f7ff feff 	bl	8000fd8 <SD_SendCmd>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <SD_disk_initialize+0x1cc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1e1      	bne.n	80011ae <SD_disk_initialize+0x132>
 80011ea:	e000      	b.n	80011ee <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011ec:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <SD_disk_initialize+0x1cc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <SD_disk_initialize+0x18c>
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	2050      	movs	r0, #80	; 0x50
 80011fe:	f7ff feeb 	bl	8000fd8 <SD_SendCmd>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <SD_disk_initialize+0x1d0>)
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001212:	f7ff fd87 	bl	8000d24 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001216:	f7ff fdab 	bl	8000d70 <SPI_RxByte>

  if (type)
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <SD_disk_initialize+0x1c8>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SD_disk_initialize+0x1c8>)
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e001      	b.n	8001236 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001232:	f7ff fe31 	bl	8000e98 <SD_PowerOff>
  }

  return Stat;
 8001236:	4b03      	ldr	r3, [pc, #12]	; (8001244 <SD_disk_initialize+0x1c8>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000b8d 	.word	0x20000b8d
 800124c:	200000a4 	.word	0x200000a4

08001250 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001260:	2301      	movs	r3, #1
 8001262:	e002      	b.n	800126a <SD_disk_status+0x1a>

  return Stat;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <SD_disk_status+0x24>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000000 	.word	0x20000000

08001278 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <SD_disk_read+0x1c>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <SD_disk_read+0x20>
    return RES_PARERR;
 8001294:	2304      	movs	r3, #4
 8001296:	e051      	b.n	800133c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <SD_disk_read+0xcc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SD_disk_read+0x32>
    return RES_NOTRDY;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e048      	b.n	800133c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <SD_disk_read+0xd0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	607b      	str	r3, [r7, #4]

  SELECT();
 80012bc:	f7ff fd26 	bl	8000d0c <SELECT>

  if (count == 1)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d111      	bne.n	80012ea <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	2051      	movs	r0, #81	; 0x51
 80012ca:	f7ff fe85 	bl	8000fd8 <SD_SendCmd>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d129      	bne.n	8001328 <SD_disk_read+0xb0>
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff fdf3 	bl	8000ec4 <SD_RxDataBlock>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d021      	beq.n	8001328 <SD_disk_read+0xb0>
      count = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	e01e      	b.n	8001328 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	2052      	movs	r0, #82	; 0x52
 80012ee:	f7ff fe73 	bl	8000fd8 <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d117      	bne.n	8001328 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff fde1 	bl	8000ec4 <SD_RxDataBlock>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00a      	beq.n	800131e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800130e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ed      	bne.n	80012f8 <SD_disk_read+0x80>
 800131c:	e000      	b.n	8001320 <SD_disk_read+0xa8>
          break;
 800131e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001320:	2100      	movs	r1, #0
 8001322:	204c      	movs	r0, #76	; 0x4c
 8001324:	f7ff fe58 	bl	8000fd8 <SD_SendCmd>
    }
  }

  DESELECT();
 8001328:	f7ff fcfc 	bl	8000d24 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800132c:	f7ff fd20 	bl	8000d70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	200000a4 	.word	0x200000a4

0800134c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <SD_disk_write+0x1c>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <SD_disk_write+0x20>
    return RES_PARERR;
 8001368:	2304      	movs	r3, #4
 800136a:	e06b      	b.n	8001444 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <SD_disk_write+0x100>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800137a:	2303      	movs	r3, #3
 800137c:	e062      	b.n	8001444 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <SD_disk_write+0x100>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SD_disk_write+0x44>
    return RES_WRPRT;
 800138c:	2302      	movs	r3, #2
 800138e:	e059      	b.n	8001444 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <SD_disk_write+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	025b      	lsls	r3, r3, #9
 80013a0:	607b      	str	r3, [r7, #4]

  SELECT();
 80013a2:	f7ff fcb3 	bl	8000d0c <SELECT>

  if (count == 1)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d110      	bne.n	80013ce <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	2058      	movs	r0, #88	; 0x58
 80013b0:	f7ff fe12 	bl	8000fd8 <SD_SendCmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d13a      	bne.n	8001430 <SD_disk_write+0xe4>
 80013ba:	21fe      	movs	r1, #254	; 0xfe
 80013bc:	68b8      	ldr	r0, [r7, #8]
 80013be:	f7ff fdb7 	bl	8000f30 <SD_TxDataBlock>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d033      	beq.n	8001430 <SD_disk_write+0xe4>
      count = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	e030      	b.n	8001430 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <SD_disk_write+0x104>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	2077      	movs	r0, #119	; 0x77
 80013de:	f7ff fdfb 	bl	8000fd8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	2057      	movs	r0, #87	; 0x57
 80013e6:	f7ff fdf7 	bl	8000fd8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	2059      	movs	r0, #89	; 0x59
 80013ee:	f7ff fdf3 	bl	8000fd8 <SD_SendCmd>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11b      	bne.n	8001430 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013f8:	21fc      	movs	r1, #252	; 0xfc
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f7ff fd98 	bl	8000f30 <SD_TxDataBlock>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800140c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <SD_disk_write+0xac>
 800141a:	e000      	b.n	800141e <SD_disk_write+0xd2>
          break;
 800141c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800141e:	21fd      	movs	r1, #253	; 0xfd
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fd85 	bl	8000f30 <SD_TxDataBlock>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SD_disk_write+0xe4>
      {
        count = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001430:	f7ff fc78 	bl	8000d24 <DESELECT>
  SPI_RxByte();
 8001434:	f7ff fc9c 	bl	8000d70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	200000a4 	.word	0x200000a4

08001454 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	603a      	str	r2, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	460b      	mov	r3, r1
 8001462:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800146e:	2304      	movs	r3, #4
 8001470:	e11b      	b.n	80016aa <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d129      	bne.n	80014d2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d017      	beq.n	80014b6 <SD_disk_ioctl+0x62>
 8001486:	2b02      	cmp	r3, #2
 8001488:	dc1f      	bgt.n	80014ca <SD_disk_ioctl+0x76>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <SD_disk_ioctl+0x40>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d00b      	beq.n	80014aa <SD_disk_ioctl+0x56>
 8001492:	e01a      	b.n	80014ca <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001494:	f7ff fd0c 	bl	8000eb0 <SD_CheckPower>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800149e:	f7ff fcfb 	bl	8000e98 <SD_PowerOff>
      res = RES_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014a8:	e0fd      	b.n	80016a6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80014aa:	f7ff fca9 	bl	8000e00 <SD_PowerOn>
      res = RES_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b4:	e0f7      	b.n	80016a6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	1c5c      	adds	r4, r3, #1
 80014ba:	f7ff fcf9 	bl	8000eb0 <SD_CheckPower>
 80014be:	4603      	mov	r3, r0
 80014c0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80014c2:	2300      	movs	r3, #0
 80014c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014c8:	e0ed      	b.n	80016a6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80014ca:	2304      	movs	r3, #4
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014d0:	e0e9      	b.n	80016a6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80014d2:	4b78      	ldr	r3, [pc, #480]	; (80016b4 <SD_disk_ioctl+0x260>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0e2      	b.n	80016aa <SD_disk_ioctl+0x256>

    SELECT();
 80014e4:	f7ff fc12 	bl	8000d0c <SELECT>

    switch (ctrl)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b0d      	cmp	r3, #13
 80014ec:	f200 80cc 	bhi.w	8001688 <SD_disk_ioctl+0x234>
 80014f0:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <SD_disk_ioctl+0xa4>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	080015f3 	.word	0x080015f3
 80014fc:	08001531 	.word	0x08001531
 8001500:	080015e3 	.word	0x080015e3
 8001504:	08001689 	.word	0x08001689
 8001508:	08001689 	.word	0x08001689
 800150c:	08001689 	.word	0x08001689
 8001510:	08001689 	.word	0x08001689
 8001514:	08001689 	.word	0x08001689
 8001518:	08001689 	.word	0x08001689
 800151c:	08001689 	.word	0x08001689
 8001520:	08001689 	.word	0x08001689
 8001524:	08001605 	.word	0x08001605
 8001528:	08001629 	.word	0x08001629
 800152c:	0800164d 	.word	0x0800164d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001530:	2100      	movs	r1, #0
 8001532:	2049      	movs	r0, #73	; 0x49
 8001534:	f7ff fd50 	bl	8000fd8 <SD_SendCmd>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 80a8 	bne.w	8001690 <SD_disk_ioctl+0x23c>
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2110      	movs	r1, #16
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fcbc 	bl	8000ec4 <SD_RxDataBlock>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 809e 	beq.w	8001690 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	099b      	lsrs	r3, r3, #6
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10e      	bne.n	800157c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800155e:	7d7b      	ldrb	r3, [r7, #21]
 8001560:	b29a      	uxth	r2, r3
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	b29b      	uxth	r3, r3
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001572:	8bfb      	ldrh	r3, [r7, #30]
 8001574:	029a      	lsls	r2, r3, #10
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e02e      	b.n	80015da <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800157c:	7c7b      	ldrb	r3, [r7, #17]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	b2da      	uxtb	r2, r3
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	09db      	lsrs	r3, r3, #7
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4413      	add	r3, r2
 800158c:	b2da      	uxtb	r2, r3
 800158e:	7d7b      	ldrb	r3, [r7, #21]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0306 	and.w	r3, r3, #6
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4413      	add	r3, r2
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3302      	adds	r3, #2
 80015a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015a4:	7d3b      	ldrb	r3, [r7, #20]
 80015a6:	099b      	lsrs	r3, r3, #6
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	7cbb      	ldrb	r3, [r7, #18]
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80015cc:	8bfa      	ldrh	r2, [r7, #30]
 80015ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d2:	3b09      	subs	r3, #9
 80015d4:	409a      	lsls	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80015e0:	e056      	b.n	8001690 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015f0:	e055      	b.n	800169e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015f2:	f7ff fbe9 	bl	8000dc8 <SD_ReadyWait>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2bff      	cmp	r3, #255	; 0xff
 80015fa:	d14b      	bne.n	8001694 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001602:	e047      	b.n	8001694 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001604:	2100      	movs	r1, #0
 8001606:	2049      	movs	r0, #73	; 0x49
 8001608:	f7ff fce6 	bl	8000fd8 <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d142      	bne.n	8001698 <SD_disk_ioctl+0x244>
 8001612:	2110      	movs	r1, #16
 8001614:	6a38      	ldr	r0, [r7, #32]
 8001616:	f7ff fc55 	bl	8000ec4 <SD_RxDataBlock>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03b      	beq.n	8001698 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001626:	e037      	b.n	8001698 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001628:	2100      	movs	r1, #0
 800162a:	204a      	movs	r0, #74	; 0x4a
 800162c:	f7ff fcd4 	bl	8000fd8 <SD_SendCmd>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d132      	bne.n	800169c <SD_disk_ioctl+0x248>
 8001636:	2110      	movs	r1, #16
 8001638:	6a38      	ldr	r0, [r7, #32]
 800163a:	f7ff fc43 	bl	8000ec4 <SD_RxDataBlock>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d02b      	beq.n	800169c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800164a:	e027      	b.n	800169c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800164c:	2100      	movs	r1, #0
 800164e:	207a      	movs	r0, #122	; 0x7a
 8001650:	f7ff fcc2 	bl	8000fd8 <SD_SendCmd>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001660:	e00b      	b.n	800167a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001662:	6a3c      	ldr	r4, [r7, #32]
 8001664:	1c63      	adds	r3, r4, #1
 8001666:	623b      	str	r3, [r7, #32]
 8001668:	f7ff fb82 	bl	8000d70 <SPI_RxByte>
 800166c:	4603      	mov	r3, r0
 800166e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001674:	3301      	adds	r3, #1
 8001676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800167a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800167e:	2b03      	cmp	r3, #3
 8001680:	d9ef      	bls.n	8001662 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001688:	2304      	movs	r3, #4
 800168a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800168e:	e006      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 8001690:	bf00      	nop
 8001692:	e004      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 8001694:	bf00      	nop
 8001696:	e002      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 800169c:	bf00      	nop
    }

    DESELECT();
 800169e:	f7ff fb41 	bl	8000d24 <DESELECT>
    SPI_RxByte();
 80016a2:	f7ff fb65 	bl	8000d70 <SPI_RxByte>
  }

  return res;
 80016a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	372c      	adds	r7, #44	; 0x2c
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000

080016b8 <indutivo_Init>:
 */

#include "indutivo.h"

HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fcda 	bl	8005090 <HAL_TIM_Base_Start_IT>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f003 fd7a 	bl	80051e4 <HAL_TIM_IC_Start_IT>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]

	return result;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <indutivo_filtro>:

void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f242 720f 	movw	r2, #9999	; 0x270f
 8001716:	4293      	cmp	r3, r2
 8001718:	dd03      	ble.n	8001722 <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00f      	b.n	8001748 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3304      	adds	r3, #4
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b03      	cmp	r3, #3
 800174c:	ddec      	ble.n	8001728 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	e00d      	b.n	8001778 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3304      	adds	r3, #4
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	441a      	add	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b04      	cmp	r3, #4
 800177c:	ddee      	ble.n	800175c <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe feea 	bl	800055c <__aeabi_i2d>
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <indutivo_filtro+0xac>)
 800178e:	f7ff f879 	bl	8000884 <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f95b 	bl	8000a54 <__aeabi_d2iz>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	605a      	str	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40140000 	.word	0x40140000

080017b0 <indutivo_calc>:

void indutivo_calc(indutivo_typedef *hindutivo)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d104      	bne.n	80017ca <indutivo_calc+0x1a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	e015      	b.n	80017f6 <indutivo_calc+0x46>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d104      	bne.n	80017dc <indutivo_calc+0x2c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	e00c      	b.n	80017f6 <indutivo_calc+0x46>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d104      	bne.n	80017ee <indutivo_calc+0x3e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	e003      	b.n	80017f6 <indutivo_calc+0x46>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68d2      	ldr	r2, [r2, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fea3 	bl	800055c <__aeabi_i2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	a115      	add	r1, pc, #84	; (adr r1, 8001870 <indutivo_calc+0xc0>)
 800181c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001820:	f7ff f830 	bl	8000884 <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f912 	bl	8000a54 <__aeabi_d2iz>
 8001830:	4602      	mov	r2, r0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f9ea 	bl	8000c18 <__aeabi_i2f>
 8001844:	4603      	mov	r3, r0
 8001846:	4619      	mov	r1, r3
 8001848:	4620      	mov	r0, r4
 800184a:	f7fe fc81 	bl	8000150 <__aeabi_fmul>
 800184e:	4603      	mov	r3, r0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa35 	bl	8000cc0 <__aeabi_f2iz>
 8001856:	4602      	mov	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff4f 	bl	8001700 <indutivo_filtro>
	hindutivo->count = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	00000000 	.word	0x00000000
 8001874:	4197d784 	.word	0x4197d784

08001878 <indutivo_reset>:

void indutivo_reset(indutivo_typedef *hindutivo)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <indutivo_reset+0x3c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	dc07      	bgt.n	800189a <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8001892:	3350      	adds	r3, #80	; 0x50
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8001898:	e008      	b.n	80018ac <indutivo_reset+0x34>
		hindutivo->freq=0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff2a 	bl	8001700 <indutivo_filtro>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	000f423f 	.word	0x000f423f

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018bc:	f001 f924 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c0:	f000 f82e 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c4:	f000 fb0c 	bl	8001ee0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c8:	f000 faec 	bl	8001ea4 <MX_DMA_Init>
  MX_ADC1_Init();
 80018cc:	f000 f884 	bl	80019d8 <MX_ADC1_Init>
  MX_I2C2_Init();
 80018d0:	f000 f8d0 	bl	8001a74 <MX_I2C2_Init>
  MX_SPI1_Init();
 80018d4:	f000 f8fc 	bl	8001ad0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018d8:	f000 f9ae 	bl	8001c38 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018dc:	f000 fa1c 	bl	8001d18 <MX_TIM3_Init>
  MX_FATFS_Init();
 80018e0:	f004 feaa 	bl	8006638 <MX_FATFS_Init>
  MX_TIM4_Init();
 80018e4:	f000 fa66 	bl	8001db4 <MX_TIM4_Init>
  MX_TIM1_Init();
 80018e8:	f000 f928 	bl	8001b3c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80018ec:	f000 fab0 	bl	8001e50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  fresult = SD_Init();
 80018f0:	f000 fbb0 	bl	8002054 <SD_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <main+0x60>)
 80018fa:	701a      	strb	r2, [r3, #0]

  if (sdCard.mode == 0)
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <main+0x64>)
 80018fe:	f8b3 35f0 	ldrh.w	r3, [r3, #1520]	; 0x5f0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <main+0x5c>
  {

  }
  else if (sdCard.mode == 1)
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <main+0x64>)
 8001908:	f8b3 35f0 	ldrh.w	r3, [r3, #1520]	; 0x5f0
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <main+0x5c>
  {
	  rot_Init();
 8001910:	f000 fb5a 	bl	8001fc8 <rot_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001914:	e7fe      	b.n	8001914 <main+0x5c>
 8001916:	bf00      	nop
 8001918:	20000aa4 	.word	0x20000aa4
 800191c:	20000310 	.word	0x20000310

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	2228      	movs	r2, #40	; 0x28
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f008 f82c 	bl	800998c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800195e:	2301      	movs	r3, #1
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2302      	movs	r3, #2
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800196c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001970:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001976:	4618      	mov	r0, r3
 8001978:	f002 f952 	bl	8003c20 <HAL_RCC_OscConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001982:	f000 fb1b 	bl	8001fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	230f      	movs	r3, #15
 8001988:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001996:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2102      	movs	r1, #2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fbbc 	bl	8004120 <HAL_RCC_ClockConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019ae:	f000 fb05 	bl	8001fbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019b2:	2302      	movs	r3, #2
 80019b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fd48 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019ca:	f000 faf7 	bl	8001fbc <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3750      	adds	r7, #80	; 0x50
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <MX_ADC1_Init+0x94>)
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <MX_ADC1_Init+0x98>)
 80019ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_ADC1_Init+0x94>)
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_ADC1_Init+0x94>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_ADC1_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_ADC1_Init+0x94>)
 8001a04:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_ADC1_Init+0x94>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_ADC1_Init+0x94>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a16:	4815      	ldr	r0, [pc, #84]	; (8001a6c <MX_ADC1_Init+0x94>)
 8001a18:	f001 f8d8 	bl	8002bcc <HAL_ADC_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001a22:	f000 facb 	bl	8001fbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a26:	2307      	movs	r3, #7
 8001a28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_ADC1_Init+0x94>)
 8001a38:	f001 f9a0 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f000 fabb 	bl	8001fbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a46:	2309      	movs	r3, #9
 8001a48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_ADC1_Init+0x94>)
 8001a54:	f001 f992 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001a5e:	f000 faad 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200009e8 	.word	0x200009e8
 8001a70:	40012400 	.word	0x40012400

08001a74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001a7a:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <MX_I2C2_Init+0x54>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_I2C2_Init+0x58>)
 8001a82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_I2C2_Init+0x50>)
 8001ab2:	f001 ff71 	bl	8003998 <HAL_I2C_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001abc:	f000 fa7e 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000094c 	.word	0x2000094c
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	000186a0 	.word	0x000186a0

08001ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <MX_SPI1_Init+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b04:	2210      	movs	r2, #16
 8001b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b1c:	220a      	movs	r2, #10
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_SPI1_Init+0x64>)
 8001b22:	f002 fd4d 	bl	80045c0 <HAL_SPI_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b2c:	f000 fa46 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000aa8 	.word	0x20000aa8
 8001b38:	40013000 	.word	0x40013000

08001b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b68:	4a32      	ldr	r2, [pc, #200]	; (8001c34 <MX_TIM1_Init+0xf8>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b6e:	2247      	movs	r2, #71	; 0x47
 8001b70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b7a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b92:	4827      	ldr	r0, [pc, #156]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001b94:	f003 fa2c 	bl	8004ff0 <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001b9e:	f000 fa0d 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4619      	mov	r1, r3
 8001bae:	4820      	ldr	r0, [pc, #128]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001bb0:	f003 fdba 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001bba:	f000 f9ff 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001bbe:	481c      	ldr	r0, [pc, #112]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001bc0:	f003 fab8 	bl	8005134 <HAL_TIM_IC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001bca:	f000 f9f7 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4814      	ldr	r0, [pc, #80]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001bde:	f004 f8bf 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001be8:	f000 f9e8 	bl	8001fbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bec:	2300      	movs	r3, #0
 8001bee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001c04:	f003 fcfc 	bl	8005600 <HAL_TIM_IC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c0e:	f000 f9d5 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c12:	463b      	mov	r3, r7
 8001c14:	2204      	movs	r2, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM1_Init+0xf4>)
 8001c1a:	f003 fcf1 	bl	8005600 <HAL_TIM_IC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001c24:	f000 f9ca 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000a5c 	.word	0x20000a5c
 8001c34:	40012c00 	.word	0x40012c00

08001c38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c6c:	2247      	movs	r2, #71	; 0x47
 8001c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001c76:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c78:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c8a:	4822      	ldr	r0, [pc, #136]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001c8c:	f003 f9b0 	bl	8004ff0 <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001c96:	f000 f991 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481b      	ldr	r0, [pc, #108]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001ca8:	f003 fd3e 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cb2:	f000 f983 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001cb6:	4817      	ldr	r0, [pc, #92]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001cb8:	f003 fa3c 	bl	8005134 <HAL_TIM_IC_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cc2:	f000 f97b 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480f      	ldr	r0, [pc, #60]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001cd6:	f004 f843 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001ce0:	f000 f96c 	bl	8001fbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <MX_TIM2_Init+0xdc>)
 8001cfc:	f003 fc80 	bl	8005600 <HAL_TIM_IC_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001d06:	f000 f959 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000b00 	.word	0x20000b00

08001d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <MX_TIM3_Init+0x98>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d3c:	2247      	movs	r2, #71	; 0x47
 8001d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d48:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d5c:	f003 f948 	bl	8004ff0 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d66:	f000 f929 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	4619      	mov	r1, r3
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d78:	f003 fcd6 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d82:	f000 f91b 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d94:	f003 ffe4 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d9e:	f000 f90d 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200009a0 	.word	0x200009a0
 8001db0:	40000400 	.word	0x40000400

08001db4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <MX_TIM4_Init+0x98>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001dd8:	2247      	movs	r2, #71	; 0x47
 8001dda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001de4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001de8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001df6:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001df8:	f003 f8fa 	bl	8004ff0 <HAL_TIM_Base_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e02:	f000 f8db 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001e14:	f003 fc88 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e1e:	f000 f8cd 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_TIM4_Init+0x94>)
 8001e30:	f003 ff96 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e3a:	f000 f8bf 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000904 	.word	0x20000904
 8001e4c:	40000800 	.word	0x40000800

08001e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART2_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e88:	f003 ffda 	bl	8005e40 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f000 f893 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000b48 	.word	0x20000b48
 8001ea0:	40004400 	.word	0x40004400

08001ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_DMA_Init+0x38>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <MX_DMA_Init+0x38>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6153      	str	r3, [r2, #20]
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_DMA_Init+0x38>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	200b      	movs	r0, #11
 8001ec8:	f001 f969 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ecc:	200b      	movs	r0, #11
 8001ece:	f001 f982 	bl	80031d6 <HAL_NVIC_EnableIRQ>

}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5a:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <MX_GPIO_Init+0xd4>)
 8001f5c:	f001 fcea 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <MX_GPIO_Init+0xd8>)
 8001f68:	f001 fce4 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8001f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	4619      	mov	r1, r3
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <MX_GPIO_Init+0xd4>)
 8001f86:	f001 fb51 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_GPIO_Init+0xd8>)
 8001fa4:	f001 fb42 	bl	800362c <HAL_GPIO_Init>

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40010800 	.word	0x40010800

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <rot_Init>:
 */

#include "rot.h"

void rot_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	rot.constante = 0.6;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <rot_Init+0x20>)
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <rot_Init+0x24>)
 8001fd0:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <rot_Init+0x20>)
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <rot_Init+0x28>)
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_2;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <rot_Init+0x20>)
 8001fda:	2204      	movs	r2, #4
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&rot);
 8001fde:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <rot_Init+0x20>)
 8001fe0:	f7ff fb6a 	bl	80016b8 <indutivo_Init>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200002e0 	.word	0x200002e0
 8001fec:	3f19999a 	.word	0x3f19999a
 8001ff0:	20000a5c 	.word	0x20000a5c

08001ff4 <rot_Reset>:

void rot_Reset(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <rot_Reset+0x10>)
 8001ffa:	f7ff fc3d 	bl	8001878 <indutivo_reset>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200002e0 	.word	0x200002e0

08002008 <rot_Calc>:

void rot_Calc(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <rot_Calc+0x10>)
 800200e:	f7ff fbcf 	bl	80017b0 <indutivo_calc>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200002e0 	.word	0x200002e0

0800201c <bufclear>:
		i++;
	return i;
}

void bufclear(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
	for (int i=0; i<SD_BUFFSIZE; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	e009      	b.n	800203c <bufclear+0x20>
		sdCard.buffer[i] = '\0';
 8002028:	4a09      	ldr	r2, [pc, #36]	; (8002050 <bufclear+0x34>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<SD_BUFFSIZE; i++)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3301      	adds	r3, #1
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b1f      	cmp	r3, #31
 8002040:	ddf2      	ble.n	8002028 <bufclear+0xc>
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000310 	.word	0x20000310

08002054 <SD_Init>:

FRESULT SD_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 8002058:	2200      	movs	r2, #0
 800205a:	4925      	ldr	r1, [pc, #148]	; (80020f0 <SD_Init+0x9c>)
 800205c:	4825      	ldr	r0, [pc, #148]	; (80020f4 <SD_Init+0xa0>)
 800205e:	f006 fe2f 	bl	8008cc0 <f_mount>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <SD_Init+0xa4>)
 8002068:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <SD_Init+0xa4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <SD_Init+0x24>
		return fresult;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <SD_Init+0xa4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	e039      	b.n	80020ec <SD_Init+0x98>

	fresult = SD_loadSettings();
 8002078:	f000 f844 	bl	8002104 <SD_loadSettings>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <SD_Init+0xa4>)
 8002082:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <SD_Init+0xa4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <SD_Init+0x3e>
		return fresult;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <SD_Init+0xa4>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	e02c      	b.n	80020ec <SD_Init+0x98>


	fresult = SD_createFile();
 8002092:	f000 f967 	bl	8002364 <SD_createFile>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <SD_Init+0xa4>)
 800209c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <SD_Init+0xa4>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <SD_Init+0x58>
		return fresult;
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <SD_Init+0xa4>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	e01f      	b.n	80020ec <SD_Init+0x98>

	bufclear();
 80020ac:	f7ff ffb6 	bl	800201c <bufclear>

	LDEBUG;
 80020b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b4:	4811      	ldr	r0, [pc, #68]	; (80020fc <SD_Init+0xa8>)
 80020b6:	f001 fc55 	bl	8003964 <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <SD_Init+0xa0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
	sdCard.blen = 0;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <SD_Init+0xa0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <SD_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <SD_Init+0xa0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8a3 25d0 	strh.w	r2, [r3, #1488]	; 0x5d0
	sdCard.timer = 0;
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SD_Init+0xa0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	f8a3 25d2 	strh.w	r2, [r3, #1490]	; 0x5d2

	HAL_TIM_Base_Start_IT(&htim2);
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <SD_Init+0xac>)
 80020e4:	f002 ffd4 	bl	8005090 <HAL_TIM_Base_Start_IT>

	return fresult;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <SD_Init+0xa4>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0800a228 	.word	0x0800a228
 80020f4:	20000310 	.word	0x20000310
 80020f8:	20000aa4 	.word	0x20000aa4
 80020fc:	40011000 	.word	0x40011000
 8002100:	20000b00 	.word	0x20000b00

08002104 <SD_loadSettings>:

FRESULT SD_loadSettings(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 8002108:	4912      	ldr	r1, [pc, #72]	; (8002154 <SD_loadSettings+0x50>)
 800210a:	4813      	ldr	r0, [pc, #76]	; (8002158 <SD_loadSettings+0x54>)
 800210c:	f007 fc46 	bl	800999c <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 8002110:	2201      	movs	r2, #1
 8002112:	4911      	ldr	r1, [pc, #68]	; (8002158 <SD_loadSettings+0x54>)
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <SD_loadSettings+0x58>)
 8002116:	f006 fe1b 	bl	8008d50 <f_open>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <SD_loadSettings+0x5c>)
 8002120:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <SD_loadSettings+0x5c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b04      	cmp	r3, #4
 8002128:	d106      	bne.n	8002138 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 800212a:	f000 f81b 	bl	8002164 <SD_createSettings>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <SD_loadSettings+0x5c>)
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e009      	b.n	800214c <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <SD_loadSettings+0x5c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 8002140:	f000 f866 	bl	8002210 <SD_searchSettings>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SD_loadSettings+0x5c>)
 800214a:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SD_loadSettings+0x5c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	0800a22c 	.word	0x0800a22c
 8002158:	200008d4 	.word	0x200008d4
 800215c:	20000740 	.word	0x20000740
 8002160:	20000aa4 	.word	0x20000aa4

08002164 <SD_createSettings>:

FRESULT SD_createSettings(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 800216a:	4822      	ldr	r0, [pc, #136]	; (80021f4 <SD_createSettings+0x90>)
 800216c:	f007 fafb 	bl	8009766 <f_close>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <SD_createSettings+0x94>)
 8002176:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8002178:	2212      	movs	r2, #18
 800217a:	4920      	ldr	r1, [pc, #128]	; (80021fc <SD_createSettings+0x98>)
 800217c:	481d      	ldr	r0, [pc, #116]	; (80021f4 <SD_createSettings+0x90>)
 800217e:	f006 fde7 	bl	8008d50 <f_open>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <SD_createSettings+0x94>)
 8002188:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <SD_createSettings+0x94>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <SD_createSettings+0x34>
		return fresult;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <SD_createSettings+0x94>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	e029      	b.n	80021ec <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8002198:	4919      	ldr	r1, [pc, #100]	; (8002200 <SD_createSettings+0x9c>)
 800219a:	481a      	ldr	r0, [pc, #104]	; (8002204 <SD_createSettings+0xa0>)
 800219c:	f007 fbfe 	bl	800999c <siprintf>
 80021a0:	6078      	str	r0, [r7, #4]
			";Seleciona o Modo de operação da Placa\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <SD_createSettings+0xa4>)
 80021a6:	4917      	ldr	r1, [pc, #92]	; (8002204 <SD_createSettings+0xa0>)
 80021a8:	4812      	ldr	r0, [pc, #72]	; (80021f4 <SD_createSettings+0x90>)
 80021aa:	f007 f8a6 	bl	80092fa <f_write>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <SD_createSettings+0x94>)
 80021b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SD_createSettings+0x94>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <SD_createSettings+0x60>
		return fresult;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <SD_createSettings+0x94>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	e013      	b.n	80021ec <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 80021c4:	480b      	ldr	r0, [pc, #44]	; (80021f4 <SD_createSettings+0x90>)
 80021c6:	f007 face 	bl	8009766 <f_close>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <SD_createSettings+0x94>)
 80021d0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <SD_createSettings+0x94>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <SD_createSettings+0x7c>
		return fresult;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <SD_createSettings+0x94>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	e005      	b.n	80021ec <SD_createSettings+0x88>

	sdCard.mode = 0;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <SD_createSettings+0xa8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8a3 25f0 	strh.w	r2, [r3, #1520]	; 0x5f0

	return fresult;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <SD_createSettings+0x94>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000740 	.word	0x20000740
 80021f8:	20000aa4 	.word	0x20000aa4
 80021fc:	200008d4 	.word	0x200008d4
 8002200:	0800a23c 	.word	0x0800a23c
 8002204:	20000794 	.word	0x20000794
 8002208:	200008ec 	.word	0x200008ec
 800220c:	20000310 	.word	0x20000310

08002210 <SD_searchSettings>:

FRESULT SD_searchSettings(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
	int index = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <SD_searchSettings+0x140>)
 8002220:	f240 123f 	movw	r2, #319	; 0x13f
 8002224:	494b      	ldr	r1, [pc, #300]	; (8002354 <SD_searchSettings+0x144>)
 8002226:	484c      	ldr	r0, [pc, #304]	; (8002358 <SD_searchSettings+0x148>)
 8002228:	f006 ff12 	bl	8009050 <f_read>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <SD_searchSettings+0x14c>)
 8002232:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002234:	4b49      	ldr	r3, [pc, #292]	; (800235c <SD_searchSettings+0x14c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <SD_searchSettings+0x38>
		return fresult;
 800223c:	4b47      	ldr	r3, [pc, #284]	; (800235c <SD_searchSettings+0x14c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	e081      	b.n	8002346 <SD_searchSettings+0x136>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3301      	adds	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	4a45      	ldr	r2, [pc, #276]	; (8002360 <SD_searchSettings+0x150>)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b3d      	cmp	r3, #61	; 0x3d
 8002256:	d1f4      	bne.n	8002242 <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800225e:	db0b      	blt.n	8002278 <SD_searchSettings+0x68>
	{
		fresult = SD_createSettings();
 8002260:	f7ff ff80 	bl	8002164 <SD_createSettings>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	4b3c      	ldr	r3, [pc, #240]	; (800235c <SD_searchSettings+0x14c>)
 800226a:	701a      	strb	r2, [r3, #0]
		return fresult;
 800226c:	4b3b      	ldr	r3, [pc, #236]	; (800235c <SD_searchSettings+0x14c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	e069      	b.n	8002346 <SD_searchSettings+0x136>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3301      	adds	r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	4a38      	ldr	r2, [pc, #224]	; (8002360 <SD_searchSettings+0x150>)
 8002280:	4413      	add	r3, r2
 8002282:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d908      	bls.n	800229c <SD_searchSettings+0x8c>
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a33      	ldr	r2, [pc, #204]	; (8002360 <SD_searchSettings+0x150>)
 8002292:	4413      	add	r3, r2
 8002294:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8002298:	2b5a      	cmp	r3, #90	; 0x5a
 800229a:	d9ea      	bls.n	8002272 <SD_searchSettings+0x62>
	deindex--;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3b01      	subs	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	e012      	b.n	80022ce <SD_searchSettings+0xbe>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad2      	subs	r2, r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <SD_searchSettings+0x150>)
 80022b4:	4413      	add	r3, r2
 80022b6:	f893 1484 	ldrb.w	r1, [r3, #1156]	; 0x484
 80022ba:	4a29      	ldr	r2, [pc, #164]	; (8002360 <SD_searchSettings+0x150>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 80022c4:	460a      	mov	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3301      	adds	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3301      	adds	r3, #1
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dde7      	ble.n	80022a8 <SD_searchSettings+0x98>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <SD_searchSettings+0x150>)
 80022da:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80022de:	2b4d      	cmp	r3, #77	; 0x4d
 80022e0:	d129      	bne.n	8002336 <SD_searchSettings+0x126>
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <SD_searchSettings+0x150>)
 80022e4:	f893 35e1 	ldrb.w	r3, [r3, #1505]	; 0x5e1
 80022e8:	2b4f      	cmp	r3, #79	; 0x4f
 80022ea:	d124      	bne.n	8002336 <SD_searchSettings+0x126>
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <SD_searchSettings+0x150>)
 80022ee:	f893 35e2 	ldrb.w	r3, [r3, #1506]	; 0x5e2
 80022f2:	2b44      	cmp	r3, #68	; 0x44
 80022f4:	d11f      	bne.n	8002336 <SD_searchSettings+0x126>
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <SD_searchSettings+0x150>)
 80022f8:	f893 35e3 	ldrb.w	r3, [r3, #1507]	; 0x5e3
 80022fc:	2b45      	cmp	r3, #69	; 0x45
 80022fe:	d11a      	bne.n	8002336 <SD_searchSettings+0x126>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <SD_searchSettings+0x150>)
 8002302:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 8002306:	2b2f      	cmp	r3, #47	; 0x2f
 8002308:	d90e      	bls.n	8002328 <SD_searchSettings+0x118>
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <SD_searchSettings+0x150>)
 800230c:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 8002310:	2b39      	cmp	r3, #57	; 0x39
 8002312:	d809      	bhi.n	8002328 <SD_searchSettings+0x118>
			sdCard.mode = sdCard.setting[5] - 48;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <SD_searchSettings+0x150>)
 8002316:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b30      	subs	r3, #48	; 0x30
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <SD_searchSettings+0x150>)
 8002322:	f8a3 25f0 	strh.w	r2, [r3, #1520]	; 0x5f0
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002326:	e00c      	b.n	8002342 <SD_searchSettings+0x132>
		else
			fresult = SD_createSettings();
 8002328:	f7ff ff1c 	bl	8002164 <SD_createSettings>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <SD_searchSettings+0x14c>)
 8002332:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002334:	e005      	b.n	8002342 <SD_searchSettings+0x132>
	}
	else
		fresult = SD_createSettings();
 8002336:	f7ff ff15 	bl	8002164 <SD_createSettings>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <SD_searchSettings+0x14c>)
 8002340:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <SD_searchSettings+0x14c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200008e8 	.word	0x200008e8
 8002354:	20000794 	.word	0x20000794
 8002358:	20000740 	.word	0x20000740
 800235c:	20000aa4 	.word	0x20000aa4
 8002360:	20000310 	.word	0x20000310

08002364 <SD_createFile>:

FRESULT SD_createFile(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4921      	ldr	r1, [pc, #132]	; (80023f8 <SD_createFile+0x94>)
 8002372:	4822      	ldr	r0, [pc, #136]	; (80023fc <SD_createFile+0x98>)
 8002374:	f007 fb12 	bl	800999c <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002378:	2206      	movs	r2, #6
 800237a:	4920      	ldr	r1, [pc, #128]	; (80023fc <SD_createFile+0x98>)
 800237c:	4820      	ldr	r0, [pc, #128]	; (8002400 <SD_createFile+0x9c>)
 800237e:	f006 fce7 	bl	8008d50 <f_open>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <SD_createFile+0xa0>)
 8002388:	701a      	strb	r2, [r3, #0]
		filnum++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3301      	adds	r3, #1
 800238e:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002394:	481c      	ldr	r0, [pc, #112]	; (8002408 <SD_createFile+0xa4>)
 8002396:	f001 fae5 	bl	8003964 <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <SD_createFile+0xa0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d0e5      	beq.n	800236e <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 80023a2:	491a      	ldr	r1, [pc, #104]	; (800240c <SD_createFile+0xa8>)
 80023a4:	481a      	ldr	r0, [pc, #104]	; (8002410 <SD_createFile+0xac>)
 80023a6:	f007 faf9 	bl	800999c <siprintf>
 80023aa:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <SD_createFile+0xb0>)
 80023b0:	4917      	ldr	r1, [pc, #92]	; (8002410 <SD_createFile+0xac>)
 80023b2:	4813      	ldr	r0, [pc, #76]	; (8002400 <SD_createFile+0x9c>)
 80023b4:	f006 ffa1 	bl	80092fa <f_write>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <SD_createFile+0xa0>)
 80023be:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <SD_createFile+0xa0>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <SD_createFile+0x6a>
		return fresult;
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <SD_createFile+0xa0>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	e00f      	b.n	80023ee <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <SD_createFile+0x9c>)
 80023d0:	f007 f9c9 	bl	8009766 <f_close>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <SD_createFile+0xa0>)
 80023da:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <SD_createFile+0xa0>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <SD_createFile+0x86>
		return fresult;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <SD_createFile+0xa0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	e001      	b.n	80023ee <SD_createFile+0x8a>

	return fresult;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <SD_createFile+0xa0>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	0800a270 	.word	0x0800a270
 80023fc:	200008d4 	.word	0x200008d4
 8002400:	20000740 	.word	0x20000740
 8002404:	20000aa4 	.word	0x20000aa4
 8002408:	40011000 	.word	0x40011000
 800240c:	0800a280 	.word	0x0800a280
 8002410:	20000774 	.word	0x20000774
 8002414:	200008ec 	.word	0x200008ec

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_MspInit+0x5c>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_MspInit+0x5c>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6193      	str	r3, [r2, #24]
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_MspInit+0x5c>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_MspInit+0x5c>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_MspInit+0x5c>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_MspInit+0x5c>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_MspInit+0x60>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_MspInit+0x60>)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40021000 	.word	0x40021000
 8002478:	40010000 	.word	0x40010000

0800247c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0318 	add.w	r3, r7, #24
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d15f      	bne.n	800255c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_ADC_MspInit+0xec>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a31      	ldr	r2, [pc, #196]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a25      	ldr	r2, [pc, #148]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e8:	2303      	movs	r3, #3
 80024ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 0318 	add.w	r3, r7, #24
 80024f0:	4619      	mov	r1, r3
 80024f2:	481e      	ldr	r0, [pc, #120]	; (800256c <HAL_ADC_MspInit+0xf0>)
 80024f4:	f001 f89a 	bl	800362c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fc:	2303      	movs	r3, #3
 80024fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	4619      	mov	r1, r3
 8002506:	481a      	ldr	r0, [pc, #104]	; (8002570 <HAL_ADC_MspInit+0xf4>)
 8002508:	f001 f890 	bl	800362c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 800250e:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_ADC_MspInit+0xfc>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 800252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002532:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002536:	2220      	movs	r2, #32
 8002538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002542:	f000 fe63 	bl	800320c <HAL_DMA_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800254c:	f7ff fd36 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002554:	621a      	str	r2, [r3, #32]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <HAL_ADC_MspInit+0xf8>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40012400 	.word	0x40012400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	20000a18 	.word	0x20000a18
 8002578:	40020008 	.word	0x40020008

0800257c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <HAL_I2C_MspInit+0x74>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d124      	bne.n	80025e6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_I2C_MspInit+0x78>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_I2C_MspInit+0x78>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_I2C_MspInit+0x78>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ba:	2312      	movs	r3, #18
 80025bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4619      	mov	r1, r3
 80025c8:	480b      	ldr	r0, [pc, #44]	; (80025f8 <HAL_I2C_MspInit+0x7c>)
 80025ca:	f001 f82f 	bl	800362c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_I2C_MspInit+0x78>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_I2C_MspInit+0x78>)
 80025d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_I2C_MspInit+0x78>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40005800 	.word	0x40005800
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010c00 	.word	0x40010c00

080025fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_SPI_MspInit+0xb4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d145      	bne.n	80026a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 800263a:	f043 0308 	orr.w	r3, r3, #8
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800264c:	2328      	movs	r3, #40	; 0x28
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4619      	mov	r1, r3
 800265e:	4816      	ldr	r0, [pc, #88]	; (80026b8 <HAL_SPI_MspInit+0xbc>)
 8002660:	f000 ffe4 	bl	800362c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002664:	2310      	movs	r3, #16
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4810      	ldr	r0, [pc, #64]	; (80026b8 <HAL_SPI_MspInit+0xbc>)
 8002678:	f000 ffd8 	bl	800362c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_SPI_MspInit+0xc0>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_SPI_MspInit+0xc0>)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	210f      	movs	r1, #15
 800269c:	2023      	movs	r0, #35	; 0x23
 800269e:	f000 fd7e 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80026a2:	2023      	movs	r0, #35	; 0x23
 80026a4:	f000 fd97 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026a8:	bf00      	nop
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40013000 	.word	0x40013000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	40010000 	.word	0x40010000

080026c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_TIM_Base_MspInit+0x160>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d135      	bne.n	800274c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80026e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a49      	ldr	r2, [pc, #292]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002710:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800271a:	2302      	movs	r3, #2
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0320 	add.w	r3, r7, #32
 8002722:	4619      	mov	r1, r3
 8002724:	4840      	ldr	r0, [pc, #256]	; (8002828 <HAL_TIM_Base_MspInit+0x168>)
 8002726:	f000 ff81 	bl	800362c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	210f      	movs	r1, #15
 800272e:	2019      	movs	r0, #25
 8002730:	f000 fd35 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002734:	2019      	movs	r0, #25
 8002736:	f000 fd4e 	bl	80031d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 15, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	210f      	movs	r1, #15
 800273e:	201b      	movs	r0, #27
 8002740:	f000 fd2d 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002744:	201b      	movs	r0, #27
 8002746:	f000 fd46 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800274a:	e064      	b.n	8002816 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d12c      	bne.n	80027b0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	4b33      	ldr	r3, [pc, #204]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a32      	ldr	r2, [pc, #200]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	61d3      	str	r3, [r2, #28]
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002786:	2301      	movs	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800278e:	2302      	movs	r3, #2
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	4619      	mov	r1, r3
 8002798:	4823      	ldr	r0, [pc, #140]	; (8002828 <HAL_TIM_Base_MspInit+0x168>)
 800279a:	f000 ff47 	bl	800362c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	210f      	movs	r1, #15
 80027a2:	201c      	movs	r0, #28
 80027a4:	f000 fcfb 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027a8:	201c      	movs	r0, #28
 80027aa:	f000 fd14 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 80027ae:	e032      	b.n	8002816 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_TIM_Base_MspInit+0x16c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d114      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	210f      	movs	r1, #15
 80027d6:	201d      	movs	r0, #29
 80027d8:	f000 fce1 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027dc:	201d      	movs	r0, #29
 80027de:	f000 fcfa 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 80027e2:	e018      	b.n	8002816 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_TIM_Base_MspInit+0x170>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d113      	bne.n	8002816 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_TIM_Base_MspInit+0x164>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	210f      	movs	r1, #15
 800280a:	201e      	movs	r0, #30
 800280c:	f000 fcc7 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002810:	201e      	movs	r0, #30
 8002812:	f000 fce0 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3730      	adds	r7, #48	; 0x30
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40010800 	.word	0x40010800
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800

08002834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_UART_MspInit+0x98>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d137      	bne.n	80028c4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	61d3      	str	r3, [r2, #28]
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002884:	2304      	movs	r3, #4
 8002886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4619      	mov	r1, r3
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <HAL_UART_MspInit+0xa0>)
 8002898:	f000 fec8 	bl	800362c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800289c:	2308      	movs	r3, #8
 800289e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4619      	mov	r1, r3
 80028ae:	4809      	ldr	r0, [pc, #36]	; (80028d4 <HAL_UART_MspInit+0xa0>)
 80028b0:	f000 febc 	bl	800362c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	210f      	movs	r1, #15
 80028b8:	2026      	movs	r0, #38	; 0x26
 80028ba:	f000 fc70 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028be:	2026      	movs	r0, #38	; 0x26
 80028c0:	f000 fc89 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028c4:	bf00      	nop
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40010800 	.word	0x40010800

080028d8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <SDTimer_Handler+0x3c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <SDTimer_Handler+0x1c>
    Timer1--;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <SDTimer_Handler+0x3c>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <SDTimer_Handler+0x3c>)
 80028f2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <SDTimer_Handler+0x40>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <SDTimer_Handler+0x34>
    Timer2--;
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SDTimer_Handler+0x40>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <SDTimer_Handler+0x40>)
 800290a:	701a      	strb	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000b8d 	.word	0x20000b8d
 8002918:	20000b8c 	.word	0x20000b8c

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>

08002922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler+0x4>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler+0x4>

0800293a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <SysTick_Handler+0x30>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3301      	adds	r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <SysTick_Handler+0x30>)
 8002970:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <SysTick_Handler+0x30>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b09      	cmp	r3, #9
 800297a:	d904      	bls.n	8002986 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Handler+0x30>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002982:	f7ff ffa9 	bl	80028d8 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002986:	f000 f905 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200000a6 	.word	0x200000a6

08002994 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <DMA1_Channel1_IRQHandler+0x10>)
 800299a:	f000 fd41 	bl	8003420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000a18 	.word	0x20000a18

080029a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	rot_Reset();
 80029ac:	f7ff fb22 	bl	8001ff4 <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <TIM1_UP_IRQHandler+0x14>)
 80029b2:	f002 fd1d 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000a5c 	.word	0x20000a5c

080029c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (htim1.Instance->CCR2 != RESET)
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <TIM1_CC_IRQHandler+0x1c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <TIM1_CC_IRQHandler+0x12>
		rot_Calc();
 80029ce:	f7ff fb1b 	bl	8002008 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029d2:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM1_CC_IRQHandler+0x1c>)
 80029d4:	f002 fd0c 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000a5c 	.word	0x20000a5c

080029e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <TIM2_IRQHandler+0x10>)
 80029e6:	f002 fd03 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000b00 	.word	0x20000b00

080029f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <TIM3_IRQHandler+0x10>)
 80029fa:	f002 fcf9 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200009a0 	.word	0x200009a0

08002a08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <TIM4_IRQHandler+0x10>)
 8002a0e:	f002 fcef 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000904 	.word	0x20000904

08002a1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <SPI1_IRQHandler+0x10>)
 8002a22:	f002 f92f 	bl	8004c84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000aa8 	.word	0x20000aa8

08002a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <USART2_IRQHandler+0x10>)
 8002a36:	f003 fa51 	bl	8005edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000b48 	.word	0x20000b48

08002a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <_sbrk+0x5c>)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <_sbrk+0x60>)
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_sbrk+0x64>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <_sbrk+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d207      	bcs.n	8002a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a74:	f006 ff60 	bl	8009938 <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e009      	b.n	8002a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <_sbrk+0x64>)
 8002a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20005000 	.word	0x20005000
 8002aa4:	00000400 	.word	0x00000400
 8002aa8:	200000a8 	.word	0x200000a8
 8002aac:	20001008 	.word	0x20001008

08002ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002abe:	490d      	ldr	r1, [pc, #52]	; (8002af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	; (8002b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ae2:	f7ff ffe5 	bl	8002ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ae6:	f006 ff2d 	bl	8009944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aea:	f7fe fee5 	bl	80018b8 <main>
  bx lr
 8002aee:	4770      	bx	lr
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002af8:	0800a880 	.word	0x0800a880
  ldr r2, =_sbss
 8002afc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002b00:	20001008 	.word	0x20001008

08002b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC1_2_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_Init+0x28>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_Init+0x28>)
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 fb35 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff fc78 	bl	8002418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40022000 	.word	0x40022000

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fb4d 	bl	80031f2 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 fb15 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	20000008 	.word	0x20000008

08002b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_IncTick+0x1c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_IncTick+0x20>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_IncTick+0x20>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	2000000c 	.word	0x2000000c
 8002bb4:	20000b90 	.word	0x20000b90

08002bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_GetTick+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000b90 	.word	0x20000b90

08002bcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0be      	b.n	8002d6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fc36 	bl	800247c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f9ab 	bl	8002f6c <ADC_ConversionStop_Disable>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8099 	bne.w	8002d5a <HAL_ADC_Init+0x18e>
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8095 	bne.w	8002d5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7b1b      	ldrb	r3, [r3, #12]
 8002c52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d003      	beq.n	8002c6e <HAL_ADC_Init+0xa2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_ADC_Init+0xa8>
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	e000      	b.n	8002c76 <HAL_ADC_Init+0xaa>
 8002c74:	2300      	movs	r3, #0
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7d1b      	ldrb	r3, [r3, #20]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d119      	bne.n	8002cb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7b1b      	ldrb	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	035a      	lsls	r2, r3, #13
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_ADC_Init+0x1a8>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce8:	d003      	beq.n	8002cf2 <HAL_ADC_Init+0x126>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d104      	bne.n	8002cfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_ADC_Init+0x1ac>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d36:	e018      	b.n	8002d6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f023 0312 	bic.w	r3, r3, #18
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d58:	e007      	b.n	8002d6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	ffe1f7fd 	.word	0xffe1f7fd
 8002d78:	ff1f0efe 	.word	0xff1f0efe

08002d7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x20>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0dc      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1da>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d81c      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b05      	subs	r3, #5
 8002dbe:	221f      	movs	r2, #31
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b05      	subs	r3, #5
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
 8002de4:	e03c      	b.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d81c      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b23      	subs	r3, #35	; 0x23
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b23      	subs	r3, #35	; 0x23
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
 8002e26:	e01b      	b.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	3b41      	subs	r3, #65	; 0x41
 8002e3a:	221f      	movs	r2, #31
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b41      	subs	r3, #65	; 0x41
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d91c      	bls.n	8002ea2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	e019      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6919      	ldr	r1, [r3, #16]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d003      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d132      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_ADC_ConfigChannel+0x1e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d125      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d126      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d11a      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	0c9a      	lsrs	r2, r3, #18
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f2c:	e002      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f9      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x1b2>
 8002f3a:	e007      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012400 	.word	0x40012400
 8002f64:	20000004 	.word	0x20000004
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d12e      	bne.n	8002fe4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0201 	bic.w	r2, r2, #1
 8002f94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f96:	f7ff fe0f 	bl	8002bb8 <HAL_GetTick>
 8002f9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f9c:	e01b      	b.n	8002fd6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f9e:	f7ff fe0b 	bl	8002bb8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d914      	bls.n	8002fd6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10d      	bne.n	8002fd6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e007      	b.n	8002fe6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d0dc      	beq.n	8002f9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4906      	ldr	r1, [pc, #24]	; (8003088 <__NVIC_EnableIRQ+0x34>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
         );
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff90 	bl	800308c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff2d 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff42 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff90 	bl	80030e0 <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5f 	bl	800308c <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff35 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e043      	b.n	80032aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_DMA_Init+0xa8>)
 800322a:	4413      	add	r3, r2
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_DMA_Init+0xac>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_DMA_Init+0xb0>)
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800325a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	bffdfff8 	.word	0xbffdfff8
 80032b8:	cccccccd 	.word	0xcccccccd
 80032bc:	40020000 	.word	0x40020000

080032c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d008      	beq.n	80032e8 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2204      	movs	r2, #4
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e020      	b.n	800332a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 020e 	bic.w	r2, r2, #14
 80032f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003346:	2b02      	cmp	r3, #2
 8003348:	d005      	beq.n	8003356 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2204      	movs	r2, #4
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e051      	b.n	80033fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 020e 	bic.w	r2, r2, #14
 8003364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_DMA_Abort_IT+0xd0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d029      	beq.n	80033d4 <HAL_DMA_Abort_IT+0xa0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_DMA_Abort_IT+0xd4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x9c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <HAL_DMA_Abort_IT+0xd8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01a      	beq.n	80033ca <HAL_DMA_Abort_IT+0x96>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_DMA_Abort_IT+0xdc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d012      	beq.n	80033c4 <HAL_DMA_Abort_IT+0x90>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_DMA_Abort_IT+0xe0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00a      	beq.n	80033be <HAL_DMA_Abort_IT+0x8a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_DMA_Abort_IT+0xe4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d102      	bne.n	80033b8 <HAL_DMA_Abort_IT+0x84>
 80033b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033b6:	e00e      	b.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 80033b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033bc:	e00b      	b.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 80033be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c2:	e008      	b.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 80033c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c8:	e005      	b.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 80033ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ce:	e002      	b.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 80033d0:	2310      	movs	r3, #16
 80033d2:	e000      	b.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_DMA_Abort_IT+0xe8>)
 80033d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
    } 
  }
  return status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40020008 	.word	0x40020008
 8003408:	4002001c 	.word	0x4002001c
 800340c:	40020030 	.word	0x40020030
 8003410:	40020044 	.word	0x40020044
 8003414:	40020058 	.word	0x40020058
 8003418:	4002006c 	.word	0x4002006c
 800341c:	40020000 	.word	0x40020000

08003420 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2204      	movs	r2, #4
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d04f      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xc8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d04a      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0204 	bic.w	r2, r2, #4
 800346e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a66      	ldr	r2, [pc, #408]	; (8003610 <HAL_DMA_IRQHandler+0x1f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d029      	beq.n	80034ce <HAL_DMA_IRQHandler+0xae>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a65      	ldr	r2, [pc, #404]	; (8003614 <HAL_DMA_IRQHandler+0x1f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_DMA_IRQHandler+0xaa>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <HAL_DMA_IRQHandler+0x1f8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01a      	beq.n	80034c4 <HAL_DMA_IRQHandler+0xa4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a62      	ldr	r2, [pc, #392]	; (800361c <HAL_DMA_IRQHandler+0x1fc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d012      	beq.n	80034be <HAL_DMA_IRQHandler+0x9e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a60      	ldr	r2, [pc, #384]	; (8003620 <HAL_DMA_IRQHandler+0x200>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00a      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x98>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a5f      	ldr	r2, [pc, #380]	; (8003624 <HAL_DMA_IRQHandler+0x204>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <HAL_DMA_IRQHandler+0x92>
 80034ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034b0:	e00e      	b.n	80034d0 <HAL_DMA_IRQHandler+0xb0>
 80034b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034b6:	e00b      	b.n	80034d0 <HAL_DMA_IRQHandler+0xb0>
 80034b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034bc:	e008      	b.n	80034d0 <HAL_DMA_IRQHandler+0xb0>
 80034be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c2:	e005      	b.n	80034d0 <HAL_DMA_IRQHandler+0xb0>
 80034c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c8:	e002      	b.n	80034d0 <HAL_DMA_IRQHandler+0xb0>
 80034ca:	2340      	movs	r3, #64	; 0x40
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_IRQHandler+0xb0>
 80034ce:	2304      	movs	r3, #4
 80034d0:	4a55      	ldr	r2, [pc, #340]	; (8003628 <HAL_DMA_IRQHandler+0x208>)
 80034d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8094 	beq.w	8003606 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034e6:	e08e      	b.n	8003606 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2202      	movs	r2, #2
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d056      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x186>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d051      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 020a 	bic.w	r2, r2, #10
 800351e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a38      	ldr	r2, [pc, #224]	; (8003610 <HAL_DMA_IRQHandler+0x1f0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d029      	beq.n	8003586 <HAL_DMA_IRQHandler+0x166>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a37      	ldr	r2, [pc, #220]	; (8003614 <HAL_DMA_IRQHandler+0x1f4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x162>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a35      	ldr	r2, [pc, #212]	; (8003618 <HAL_DMA_IRQHandler+0x1f8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01a      	beq.n	800357c <HAL_DMA_IRQHandler+0x15c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_DMA_IRQHandler+0x1fc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d012      	beq.n	8003576 <HAL_DMA_IRQHandler+0x156>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a32      	ldr	r2, [pc, #200]	; (8003620 <HAL_DMA_IRQHandler+0x200>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00a      	beq.n	8003570 <HAL_DMA_IRQHandler+0x150>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a31      	ldr	r2, [pc, #196]	; (8003624 <HAL_DMA_IRQHandler+0x204>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d102      	bne.n	800356a <HAL_DMA_IRQHandler+0x14a>
 8003564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003568:	e00e      	b.n	8003588 <HAL_DMA_IRQHandler+0x168>
 800356a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356e:	e00b      	b.n	8003588 <HAL_DMA_IRQHandler+0x168>
 8003570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003574:	e008      	b.n	8003588 <HAL_DMA_IRQHandler+0x168>
 8003576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357a:	e005      	b.n	8003588 <HAL_DMA_IRQHandler+0x168>
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	e002      	b.n	8003588 <HAL_DMA_IRQHandler+0x168>
 8003582:	2320      	movs	r3, #32
 8003584:	e000      	b.n	8003588 <HAL_DMA_IRQHandler+0x168>
 8003586:	2302      	movs	r3, #2
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_DMA_IRQHandler+0x208>)
 800358a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d034      	beq.n	8003606 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035a4:	e02f      	b.n	8003606 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2208      	movs	r2, #8
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d028      	beq.n	8003608 <HAL_DMA_IRQHandler+0x1e8>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d023      	beq.n	8003608 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 020e 	bic.w	r2, r2, #14
 80035ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
    }
  }
  return;
 8003606:	bf00      	nop
 8003608:	bf00      	nop
}
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40020008 	.word	0x40020008
 8003614:	4002001c 	.word	0x4002001c
 8003618:	40020030 	.word	0x40020030
 800361c:	40020044 	.word	0x40020044
 8003620:	40020058 	.word	0x40020058
 8003624:	4002006c 	.word	0x4002006c
 8003628:	40020000 	.word	0x40020000

0800362c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800362c:	b480      	push	{r7}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363e:	e169      	b.n	8003914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003640:	2201      	movs	r2, #1
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 8158 	bne.w	800390e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a9a      	ldr	r2, [pc, #616]	; (80038cc <HAL_GPIO_Init+0x2a0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d05e      	beq.n	8003726 <HAL_GPIO_Init+0xfa>
 8003668:	4a98      	ldr	r2, [pc, #608]	; (80038cc <HAL_GPIO_Init+0x2a0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d875      	bhi.n	800375a <HAL_GPIO_Init+0x12e>
 800366e:	4a98      	ldr	r2, [pc, #608]	; (80038d0 <HAL_GPIO_Init+0x2a4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d058      	beq.n	8003726 <HAL_GPIO_Init+0xfa>
 8003674:	4a96      	ldr	r2, [pc, #600]	; (80038d0 <HAL_GPIO_Init+0x2a4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d86f      	bhi.n	800375a <HAL_GPIO_Init+0x12e>
 800367a:	4a96      	ldr	r2, [pc, #600]	; (80038d4 <HAL_GPIO_Init+0x2a8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d052      	beq.n	8003726 <HAL_GPIO_Init+0xfa>
 8003680:	4a94      	ldr	r2, [pc, #592]	; (80038d4 <HAL_GPIO_Init+0x2a8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d869      	bhi.n	800375a <HAL_GPIO_Init+0x12e>
 8003686:	4a94      	ldr	r2, [pc, #592]	; (80038d8 <HAL_GPIO_Init+0x2ac>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04c      	beq.n	8003726 <HAL_GPIO_Init+0xfa>
 800368c:	4a92      	ldr	r2, [pc, #584]	; (80038d8 <HAL_GPIO_Init+0x2ac>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d863      	bhi.n	800375a <HAL_GPIO_Init+0x12e>
 8003692:	4a92      	ldr	r2, [pc, #584]	; (80038dc <HAL_GPIO_Init+0x2b0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d046      	beq.n	8003726 <HAL_GPIO_Init+0xfa>
 8003698:	4a90      	ldr	r2, [pc, #576]	; (80038dc <HAL_GPIO_Init+0x2b0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d85d      	bhi.n	800375a <HAL_GPIO_Init+0x12e>
 800369e:	2b12      	cmp	r3, #18
 80036a0:	d82a      	bhi.n	80036f8 <HAL_GPIO_Init+0xcc>
 80036a2:	2b12      	cmp	r3, #18
 80036a4:	d859      	bhi.n	800375a <HAL_GPIO_Init+0x12e>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_GPIO_Init+0x80>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	08003727 	.word	0x08003727
 80036b0:	08003701 	.word	0x08003701
 80036b4:	08003713 	.word	0x08003713
 80036b8:	08003755 	.word	0x08003755
 80036bc:	0800375b 	.word	0x0800375b
 80036c0:	0800375b 	.word	0x0800375b
 80036c4:	0800375b 	.word	0x0800375b
 80036c8:	0800375b 	.word	0x0800375b
 80036cc:	0800375b 	.word	0x0800375b
 80036d0:	0800375b 	.word	0x0800375b
 80036d4:	0800375b 	.word	0x0800375b
 80036d8:	0800375b 	.word	0x0800375b
 80036dc:	0800375b 	.word	0x0800375b
 80036e0:	0800375b 	.word	0x0800375b
 80036e4:	0800375b 	.word	0x0800375b
 80036e8:	0800375b 	.word	0x0800375b
 80036ec:	0800375b 	.word	0x0800375b
 80036f0:	08003709 	.word	0x08003709
 80036f4:	0800371d 	.word	0x0800371d
 80036f8:	4a79      	ldr	r2, [pc, #484]	; (80038e0 <HAL_GPIO_Init+0x2b4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036fe:	e02c      	b.n	800375a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	623b      	str	r3, [r7, #32]
          break;
 8003706:	e029      	b.n	800375c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	3304      	adds	r3, #4
 800370e:	623b      	str	r3, [r7, #32]
          break;
 8003710:	e024      	b.n	800375c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	3308      	adds	r3, #8
 8003718:	623b      	str	r3, [r7, #32]
          break;
 800371a:	e01f      	b.n	800375c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	330c      	adds	r3, #12
 8003722:	623b      	str	r3, [r7, #32]
          break;
 8003724:	e01a      	b.n	800375c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800372e:	2304      	movs	r3, #4
 8003730:	623b      	str	r3, [r7, #32]
          break;
 8003732:	e013      	b.n	800375c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800373c:	2308      	movs	r3, #8
 800373e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	611a      	str	r2, [r3, #16]
          break;
 8003746:	e009      	b.n	800375c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003748:	2308      	movs	r3, #8
 800374a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	615a      	str	r2, [r3, #20]
          break;
 8003752:	e003      	b.n	800375c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003754:	2300      	movs	r3, #0
 8003756:	623b      	str	r3, [r7, #32]
          break;
 8003758:	e000      	b.n	800375c <HAL_GPIO_Init+0x130>
          break;
 800375a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d801      	bhi.n	8003766 <HAL_GPIO_Init+0x13a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	e001      	b.n	800376a <HAL_GPIO_Init+0x13e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d802      	bhi.n	8003778 <HAL_GPIO_Init+0x14c>
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	e002      	b.n	800377e <HAL_GPIO_Init+0x152>
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	3b08      	subs	r3, #8
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	210f      	movs	r1, #15
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	401a      	ands	r2, r3
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	431a      	orrs	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80b1 	beq.w	800390e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037ac:	4b4d      	ldr	r3, [pc, #308]	; (80038e4 <HAL_GPIO_Init+0x2b8>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4a4c      	ldr	r2, [pc, #304]	; (80038e4 <HAL_GPIO_Init+0x2b8>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6193      	str	r3, [r2, #24]
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_GPIO_Init+0x2b8>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037c4:	4a48      	ldr	r2, [pc, #288]	; (80038e8 <HAL_GPIO_Init+0x2bc>)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a40      	ldr	r2, [pc, #256]	; (80038ec <HAL_GPIO_Init+0x2c0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_GPIO_Init+0x1ec>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a3f      	ldr	r2, [pc, #252]	; (80038f0 <HAL_GPIO_Init+0x2c4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00d      	beq.n	8003814 <HAL_GPIO_Init+0x1e8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3e      	ldr	r2, [pc, #248]	; (80038f4 <HAL_GPIO_Init+0x2c8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <HAL_GPIO_Init+0x1e4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3d      	ldr	r2, [pc, #244]	; (80038f8 <HAL_GPIO_Init+0x2cc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_GPIO_Init+0x1e0>
 8003808:	2303      	movs	r3, #3
 800380a:	e006      	b.n	800381a <HAL_GPIO_Init+0x1ee>
 800380c:	2304      	movs	r3, #4
 800380e:	e004      	b.n	800381a <HAL_GPIO_Init+0x1ee>
 8003810:	2302      	movs	r3, #2
 8003812:	e002      	b.n	800381a <HAL_GPIO_Init+0x1ee>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_GPIO_Init+0x1ee>
 8003818:	2300      	movs	r3, #0
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	f002 0203 	and.w	r2, r2, #3
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	4093      	lsls	r3, r2
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800382a:	492f      	ldr	r1, [pc, #188]	; (80038e8 <HAL_GPIO_Init+0x2bc>)
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	492c      	ldr	r1, [pc, #176]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	43db      	mvns	r3, r3
 800385a:	4928      	ldr	r1, [pc, #160]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 800385c:	4013      	ands	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800386c:	4b23      	ldr	r3, [pc, #140]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4922      	ldr	r1, [pc, #136]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	43db      	mvns	r3, r3
 8003882:	491e      	ldr	r1, [pc, #120]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 8003884:	4013      	ands	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4918      	ldr	r1, [pc, #96]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	4914      	ldr	r1, [pc, #80]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d021      	beq.n	8003900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_GPIO_Init+0x2d0>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60cb      	str	r3, [r1, #12]
 80038c8:	e021      	b.n	800390e <HAL_GPIO_Init+0x2e2>
 80038ca:	bf00      	nop
 80038cc:	10320000 	.word	0x10320000
 80038d0:	10310000 	.word	0x10310000
 80038d4:	10220000 	.word	0x10220000
 80038d8:	10210000 	.word	0x10210000
 80038dc:	10120000 	.word	0x10120000
 80038e0:	10110000 	.word	0x10110000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40010800 	.word	0x40010800
 80038f0:	40010c00 	.word	0x40010c00
 80038f4:	40011000 	.word	0x40011000
 80038f8:	40011400 	.word	0x40011400
 80038fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_GPIO_Init+0x304>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	43db      	mvns	r3, r3
 8003908:	4909      	ldr	r1, [pc, #36]	; (8003930 <HAL_GPIO_Init+0x304>)
 800390a:	4013      	ands	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	3301      	adds	r3, #1
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f47f ae8e 	bne.w	8003640 <HAL_GPIO_Init+0x14>
  }
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	372c      	adds	r7, #44	; 0x2c
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	40010400 	.word	0x40010400

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	041a      	lsls	r2, r3, #16
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	43d9      	mvns	r1, r3
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	400b      	ands	r3, r1
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	611a      	str	r2, [r3, #16]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
	...

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e12b      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fddc 	bl	800257c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039fc:	f000 fce4 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a81      	ldr	r2, [pc, #516]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <HAL_I2C_Init+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a80      	ldr	r2, [pc, #512]	; (8003c10 <HAL_I2C_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e006      	b.n	8003a2a <HAL_I2C_Init+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_I2C_Init+0x27c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0e7      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <HAL_I2C_Init+0x280>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a6a      	ldr	r2, [pc, #424]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <HAL_I2C_Init+0xd4>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e009      	b.n	8003a80 <HAL_I2C_Init+0xe8>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <HAL_I2C_Init+0x284>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	3301      	adds	r3, #1
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	495c      	ldr	r1, [pc, #368]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_I2C_Init+0x13c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e59      	subs	r1, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_I2C_Init+0x138>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e59      	subs	r1, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	e051      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e04f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x168>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x18e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x196>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_Init+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6911      	ldr	r1, [r2, #16]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	000186a0 	.word	0x000186a0
 8003c10:	001e847f 	.word	0x001e847f
 8003c14:	003d08ff 	.word	0x003d08ff
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e26c      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8087 	beq.w	8003d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c40:	4b92      	ldr	r3, [pc, #584]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d112      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e>
 8003c58:	4b8c      	ldr	r3, [pc, #560]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d10b      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c66:	4b89      	ldr	r3, [pc, #548]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d06c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x12c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d168      	bne.n	8003d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e246      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x76>
 8003c88:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7f      	ldr	r2, [pc, #508]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	e02e      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x98>
 8003c9e:	4b7b      	ldr	r3, [pc, #492]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a77      	ldr	r2, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0xbc>
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6e      	ldr	r2, [pc, #440]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003cdc:	4b6b      	ldr	r3, [pc, #428]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6a      	ldr	r2, [pc, #424]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b68      	ldr	r3, [pc, #416]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a67      	ldr	r2, [pc, #412]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fe ff5c 	bl	8002bb8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fe ff58 	bl	8002bb8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1fa      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b5d      	ldr	r3, [pc, #372]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0xe4>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe ff48 	bl	8002bb8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fe ff44 	bl	8002bb8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1e6      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x10c>
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d063      	beq.n	8003e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d66:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11c      	bne.n	8003dac <HAL_RCC_OscConfig+0x18c>
 8003d72:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x176>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1ba      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4939      	ldr	r1, [pc, #228]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e03a      	b.n	8003e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x270>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fefd 	bl	8002bb8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fef9 	bl	8002bb8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e19b      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4927      	ldr	r1, [pc, #156]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_RCC_OscConfig+0x270>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fedc 	bl	8002bb8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fed8 	bl	8002bb8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e17a      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d03a      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_RCC_OscConfig+0x274>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fe febc 	bl	8002bb8 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fe feb8 	bl	8002bb8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e15a      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f000 fad8 	bl	8004418 <RCC_Delay>
 8003e68:	e01c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7fe fea2 	bl	8002bb8 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e76:	e00f      	b.n	8003e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe fe9e 	bl	8002bb8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d908      	bls.n	8003e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e140      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	42420000 	.word	0x42420000
 8003e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b9e      	ldr	r3, [pc, #632]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e9      	bne.n	8003e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a6 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b97      	ldr	r3, [pc, #604]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b94      	ldr	r3, [pc, #592]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4a93      	ldr	r2, [pc, #588]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	61d3      	str	r3, [r2, #28]
 8003ece:	4b91      	ldr	r3, [pc, #580]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b8e      	ldr	r3, [pc, #568]	; (8004118 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b8b      	ldr	r3, [pc, #556]	; (8004118 <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a8a      	ldr	r2, [pc, #552]	; (8004118 <HAL_RCC_OscConfig+0x4f8>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fe5f 	bl	8002bb8 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe fe5b 	bl	8002bb8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0fd      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b81      	ldr	r3, [pc, #516]	; (8004118 <HAL_RCC_OscConfig+0x4f8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x312>
 8003f24:	4b7b      	ldr	r3, [pc, #492]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4a7a      	ldr	r2, [pc, #488]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6213      	str	r3, [r2, #32]
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x334>
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a75      	ldr	r2, [pc, #468]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	4b73      	ldr	r3, [pc, #460]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a72      	ldr	r2, [pc, #456]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6213      	str	r3, [r2, #32]
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x356>
 8003f5c:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4a69      	ldr	r2, [pc, #420]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6213      	str	r3, [r2, #32]
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f76:	4b67      	ldr	r3, [pc, #412]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a66      	ldr	r2, [pc, #408]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6213      	str	r3, [r2, #32]
 8003f82:	4b64      	ldr	r3, [pc, #400]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4a63      	ldr	r2, [pc, #396]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fe0f 	bl	8002bb8 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe fe0b 	bl	8002bb8 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0ab      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b57      	ldr	r3, [pc, #348]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x37e>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fdf9 	bl	8002bb8 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fe fdf5 	bl	8002bb8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e095      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b4c      	ldr	r3, [pc, #304]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b48      	ldr	r3, [pc, #288]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4a47      	ldr	r2, [pc, #284]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8081 	beq.w	800410a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b42      	ldr	r3, [pc, #264]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d061      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d146      	bne.n	80040aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_OscConfig+0x4fc>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe fdc9 	bl	8002bb8 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe fdc5 	bl	8002bb8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e067      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403c:	4b35      	ldr	r3, [pc, #212]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d108      	bne.n	8004064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004052:	4b30      	ldr	r3, [pc, #192]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	492d      	ldr	r1, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a19      	ldr	r1, [r3, #32]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	430b      	orrs	r3, r1
 8004076:	4927      	ldr	r1, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b27      	ldr	r3, [pc, #156]	; (800411c <HAL_RCC_OscConfig+0x4fc>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe fd99 	bl	8002bb8 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe fd95 	bl	8002bb8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e037      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x46a>
 80040a8:	e02f      	b.n	800410a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_RCC_OscConfig+0x4fc>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe fd82 	bl	8002bb8 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe fd7e 	bl	8002bb8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e020      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x498>
 80040d6:	e018      	b.n	800410a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e013      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
 800411c:	42420060 	.word	0x42420060

08004120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0d0      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d910      	bls.n	8004164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b67      	ldr	r3, [pc, #412]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 0207 	bic.w	r2, r3, #7
 800414a:	4965      	ldr	r1, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800419e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d040      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d115      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e073      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06b      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4936      	ldr	r1, [pc, #216]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe fcd2 	bl	8002bb8 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe fcce 	bl	8002bb8 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e053      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d210      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 0207 	bic.w	r2, r3, #7
 8004256:	4922      	ldr	r1, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1cc>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1d0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fc30 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40021000 	.word	0x40021000
 80042e8:	0800a2dc 	.word	0x0800a2dc
 80042ec:	20000004 	.word	0x20000004
 80042f0:	20000008 	.word	0x20000008

080042f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b490      	push	{r4, r7}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042fa:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042fc:	1d3c      	adds	r4, r7, #4
 80042fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004304:	f240 2301 	movw	r3, #513	; 0x201
 8004308:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b04      	cmp	r3, #4
 800432c:	d002      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x40>
 800432e:	2b08      	cmp	r3, #8
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x46>
 8004332:	e02d      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004336:	623b      	str	r3, [r7, #32]
      break;
 8004338:	e02d      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	0c9b      	lsrs	r3, r3, #18
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004346:	4413      	add	r3, r2
 8004348:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800434c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d013      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c5b      	lsrs	r3, r3, #17
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004366:	4413      	add	r3, r2
 8004368:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800436c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	fb02 f203 	mul.w	r2, r2, r3
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	e004      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004384:	fb02 f303 	mul.w	r3, r2, r3
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	623b      	str	r3, [r7, #32]
      break;
 800438e:	e002      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004392:	623b      	str	r3, [r7, #32]
      break;
 8004394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004396:	6a3b      	ldr	r3, [r7, #32]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bc90      	pop	{r4, r7}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	0800a284 	.word	0x0800a284
 80043a8:	40021000 	.word	0x40021000
 80043ac:	007a1200 	.word	0x007a1200
 80043b0:	003d0900 	.word	0x003d0900

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b02      	ldr	r3, [pc, #8]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	20000004 	.word	0x20000004

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043cc:	f7ff fff2 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	0800a2ec 	.word	0x0800a2ec

080043f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043f4:	f7ff ffde 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	0adb      	lsrs	r3, r3, #11
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4903      	ldr	r1, [pc, #12]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	0800a2ec 	.word	0x0800a2ec

08004418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <RCC_Delay+0x34>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <RCC_Delay+0x38>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	0a5b      	lsrs	r3, r3, #9
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004434:	bf00      	nop
  }
  while (Delay --);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	60fa      	str	r2, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f9      	bne.n	8004434 <RCC_Delay+0x1c>
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	20000004 	.word	0x20000004
 8004450:	10624dd3 	.word	0x10624dd3

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d07d      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004474:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10d      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004480:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	4a4b      	ldr	r2, [pc, #300]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448a:	61d3      	str	r3, [r2, #28]
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d118      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a42      	ldr	r2, [pc, #264]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b4:	f7fe fb80 	bl	8002bb8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	e008      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044bc:	f7fe fb7c 	bl	8002bb8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e06d      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b3a      	ldr	r3, [pc, #232]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044da:	4b36      	ldr	r3, [pc, #216]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02e      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d027      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f8:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004502:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800450e:	4a29      	ldr	r2, [pc, #164]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe fb4b 	bl	8002bb8 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fe fb47 	bl	8002bb8 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e036      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ee      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4917      	ldr	r1, [pc, #92]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	4313      	orrs	r3, r2
 8004558:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4904      	ldr	r1, [pc, #16]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40007000 	.word	0x40007000
 80045bc:	42420440 	.word	0x42420440

080045c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e076      	b.n	80046c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e2:	d009      	beq.n	80045f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
 80045ea:	e005      	b.n	80045f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd fff2 	bl	80025fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	ea42 0103 	orr.w	r1, r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	0c1a      	lsrs	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f002 0204 	and.w	r2, r2, #4
 800469e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Transmit+0x22>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e126      	b.n	8004938 <HAL_SPI_Transmit+0x270>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f2:	f7fe fa61 	bl	8002bb8 <HAL_GetTick>
 80046f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d002      	beq.n	800470e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004708:	2302      	movs	r3, #2
 800470a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800470c:	e10b      	b.n	8004926 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Transmit+0x52>
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800471e:	e102      	b.n	8004926 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2203      	movs	r2, #3
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004766:	d10f      	bne.n	8004788 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004786:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d007      	beq.n	80047a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ae:	d14b      	bne.n	8004848 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_SPI_Transmit+0xf6>
 80047b8:	8afb      	ldrh	r3, [r7, #22]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d13e      	bne.n	800483c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	881a      	ldrh	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	1c9a      	adds	r2, r3, #2
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047e2:	e02b      	b.n	800483c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d112      	bne.n	8004818 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	881a      	ldrh	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	86da      	strh	r2, [r3, #54]	; 0x36
 8004816:	e011      	b.n	800483c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004818:	f7fe f9ce 	bl	8002bb8 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d803      	bhi.n	8004830 <HAL_SPI_Transmit+0x168>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d102      	bne.n	8004836 <HAL_SPI_Transmit+0x16e>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	77fb      	strb	r3, [r7, #31]
          goto error;
 800483a:	e074      	b.n	8004926 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ce      	bne.n	80047e4 <HAL_SPI_Transmit+0x11c>
 8004846:	e04c      	b.n	80048e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_SPI_Transmit+0x18e>
 8004850:	8afb      	ldrh	r3, [r7, #22]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d140      	bne.n	80048d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800487c:	e02c      	b.n	80048d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d113      	bne.n	80048b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048b2:	e011      	b.n	80048d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b4:	f7fe f980 	bl	8002bb8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d803      	bhi.n	80048cc <HAL_SPI_Transmit+0x204>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d102      	bne.n	80048d2 <HAL_SPI_Transmit+0x20a>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048d6:	e026      	b.n	8004926 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cd      	bne.n	800487e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fb64 	bl	8004fb4 <SPI_EndRxTxTransaction>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e000      	b.n	8004926 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004924:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004936:	7ffb      	ldrb	r3, [r7, #31]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	; 0x30
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800494e:	2301      	movs	r3, #1
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x26>
 8004962:	2302      	movs	r3, #2
 8004964:	e18a      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x33c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800496e:	f7fe f923 	bl	8002bb8 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800498c:	2b01      	cmp	r3, #1
 800498e:	d00f      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x70>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004996:	d107      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x68>
 80049a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d003      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049ae:	e15b      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0x82>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0x82>
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049c8:	e14e      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d003      	beq.n	80049de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2205      	movs	r2, #5
 80049da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	887a      	ldrh	r2, [r7, #2]
 80049ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	887a      	ldrh	r2, [r7, #2]
 8004a06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d007      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3a:	d178      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x10a>
 8004a44:	8b7b      	ldrh	r3, [r7, #26]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d166      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6e:	e053      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d11b      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x176>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d016      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x176>
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d113      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d119      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x1b8>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d014      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	1c9a      	adds	r2, r3, #2
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af4:	2301      	movs	r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004af8:	f7fe f85e 	bl	8002bb8 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d807      	bhi.n	8004b18 <HAL_SPI_TransmitReceive+0x1d8>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d003      	beq.n	8004b18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b16:	e0a7      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1a6      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x130>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1a1      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x130>
 8004b2c:	e07c      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x1fc>
 8004b36:	8b7b      	ldrh	r3, [r7, #26]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d16b      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b62:	e057      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d11c      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x26c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d017      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x26c>
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d114      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d119      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x2ae>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d014      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bea:	2301      	movs	r3, #1
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bee:	f7fd ffe3 	bl	8002bb8 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d803      	bhi.n	8004c06 <HAL_SPI_TransmitReceive+0x2c6>
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d102      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x2cc>
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c12:	e029      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1a2      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x224>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d19d      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f9c1 	bl	8004fb4 <SPI_EndRxTxTransaction>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c44:	e010      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	e000      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3730      	adds	r7, #48	; 0x30
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10f      	bne.n	8004cc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
    return;
 8004cc6:	e0be      	b.n	8004e46 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_SPI_IRQHandler+0x66>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	09db      	lsrs	r3, r3, #7
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
    return;
 8004ce8:	e0ad      	b.n	8004e46 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_SPI_IRQHandler+0x80>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a1 	beq.w	8004e46 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 809a 	beq.w	8004e46 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	099b      	lsrs	r3, r3, #6
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d023      	beq.n	8004d66 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d011      	beq.n	8004d4e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	e00b      	b.n	8004d66 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	693b      	ldr	r3, [r7, #16]
        return;
 8004d64:	e06f      	b.n	8004e46 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d014      	beq.n	8004d9c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f043 0201 	orr.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d04f      	beq.n	8004e44 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <HAL_SPI_IRQHandler+0x14c>
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d034      	beq.n	8004e3a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0203 	bic.w	r2, r2, #3
 8004dde:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <HAL_SPI_IRQHandler+0x1c8>)
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fe fa9d 	bl	8003334 <HAL_DMA_Abort_IT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e18:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <HAL_SPI_IRQHandler+0x1c8>)
 8004e1a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fa87 	bl	8003334 <HAL_DMA_Abort_IT>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e38:	e003      	b.n	8004e42 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f808 	bl	8004e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e40:	e000      	b.n	8004e44 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004e42:	bf00      	nop
    return;
 8004e44:	bf00      	nop
  }
}
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	08004e7d 	.word	0x08004e7d

08004e50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e70:	b2db      	uxtb	r3, r3
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff ffda 	bl	8004e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eb4:	f7fd fe80 	bl	8002bb8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ec4:	f7fd fe78 	bl	8002bb8 <HAL_GetTick>
 8004ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eca:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	015b      	lsls	r3, r3, #5
 8004ed0:	0d1b      	lsrs	r3, r3, #20
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	e054      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d050      	beq.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ee4:	f7fd fe68 	bl	8002bb8 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d902      	bls.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13d      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f12:	d111      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1c:	d004      	beq.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	d107      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f40:	d10f      	bne.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e017      	b.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d19b      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000004 	.word	0x20000004

08004fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff ff6a 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e000      	b.n	8004fe8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e041      	b.n	8005086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd fb52 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 fc6c 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e03a      	b.n	800511e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a18      	ldr	r2, [pc, #96]	; (8005128 <HAL_TIM_Base_Start_IT+0x98>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x58>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d009      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x58>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a14      	ldr	r2, [pc, #80]	; (800512c <HAL_TIM_Base_Start_IT+0x9c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x58>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a13      	ldr	r2, [pc, #76]	; (8005130 <HAL_TIM_Base_Start_IT+0xa0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d111      	bne.n	800510c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d010      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	e007      	b.n	800511c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800

08005134 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e041      	b.n	80051ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f839 	bl	80051d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f000 fbca 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_IC_Start_IT+0x1a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e013      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x42>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d104      	bne.n	800520e <HAL_TIM_IC_Start_IT+0x2a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e00b      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x42>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d104      	bne.n	800521e <HAL_TIM_IC_Start_IT+0x3a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e003      	b.n	8005226 <HAL_TIM_IC_Start_IT+0x42>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_TIM_IC_Start_IT+0x54>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e013      	b.n	8005260 <HAL_TIM_IC_Start_IT+0x7c>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d104      	bne.n	8005248 <HAL_TIM_IC_Start_IT+0x64>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e00b      	b.n	8005260 <HAL_TIM_IC_Start_IT+0x7c>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d104      	bne.n	8005258 <HAL_TIM_IC_Start_IT+0x74>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e003      	b.n	8005260 <HAL_TIM_IC_Start_IT+0x7c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	b2db      	uxtb	r3, r3
 8005260:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d102      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0b3      	b.n	80053da <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0x9e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	e013      	b.n	80052aa <HAL_TIM_IC_Start_IT+0xc6>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0xae>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	e00b      	b.n	80052aa <HAL_TIM_IC_Start_IT+0xc6>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0xbe>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a0:	e003      	b.n	80052aa <HAL_TIM_IC_Start_IT+0xc6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_IC_Start_IT+0xd6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b8:	e013      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0xfe>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_IC_Start_IT+0xe6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0xfe>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_IC_Start_IT+0xf6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d8:	e003      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0xfe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	d841      	bhi.n	800536c <HAL_TIM_IC_Start_IT+0x188>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_TIM_IC_Start_IT+0x10c>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005325 	.word	0x08005325
 80052f4:	0800536d 	.word	0x0800536d
 80052f8:	0800536d 	.word	0x0800536d
 80052fc:	0800536d 	.word	0x0800536d
 8005300:	08005337 	.word	0x08005337
 8005304:	0800536d 	.word	0x0800536d
 8005308:	0800536d 	.word	0x0800536d
 800530c:	0800536d 	.word	0x0800536d
 8005310:	08005349 	.word	0x08005349
 8005314:	0800536d 	.word	0x0800536d
 8005318:	0800536d 	.word	0x0800536d
 800531c:	0800536d 	.word	0x0800536d
 8005320:	0800535b 	.word	0x0800535b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0202 	orr.w	r2, r2, #2
 8005332:	60da      	str	r2, [r3, #12]
      break;
 8005334:	e01b      	b.n	800536e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0204 	orr.w	r2, r2, #4
 8005344:	60da      	str	r2, [r3, #12]
      break;
 8005346:	e012      	b.n	800536e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0208 	orr.w	r2, r2, #8
 8005356:	60da      	str	r2, [r3, #12]
      break;
 8005358:	e009      	b.n	800536e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0210 	orr.w	r2, r2, #16
 8005368:	60da      	str	r2, [r3, #12]
      break;
 800536a:	e000      	b.n	800536e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800536c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2201      	movs	r2, #1
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fccd 	bl	8005d16 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_TIM_IC_Start_IT+0x200>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d009      	beq.n	80053a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <HAL_TIM_IC_Start_IT+0x204>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIM_IC_Start_IT+0x1c0>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a13      	ldr	r2, [pc, #76]	; (80053ec <HAL_TIM_IC_Start_IT+0x208>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d111      	bne.n	80053c8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d010      	beq.n	80053d8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	e007      	b.n	80053d8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa4e 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa41 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fa50 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa24 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa17 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fa26 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0208 	mvn.w	r2, #8
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9fa 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9ed 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9fc 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9d0 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9c3 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f9d2 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f99e 	bl	80058b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fc47 	bl	8005e2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f996 	bl	80058f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d10e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0220 	mvn.w	r2, #32
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fc12 	bl	8005e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005616:	2302      	movs	r3, #2
 8005618:	e082      	b.n	8005720 <HAL_TIM_IC_ConfigChannel+0x120>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11b      	bne.n	8005660 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f000 f9ca 	bl	80059d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 020c 	bic.w	r2, r2, #12
 800564a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6999      	ldr	r1, [r3, #24]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	619a      	str	r2, [r3, #24]
 800565e:	e05a      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d11c      	bne.n	80056a0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f000 fa33 	bl	8005ae0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005688:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6999      	ldr	r1, [r3, #24]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	619a      	str	r2, [r3, #24]
 800569e:	e03a      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d11b      	bne.n	80056de <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6819      	ldr	r1, [r3, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f000 fa7e 	bl	8005bb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 020c 	bic.w	r2, r2, #12
 80056c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	61da      	str	r2, [r3, #28]
 80056dc:	e01b      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f000 fa9d 	bl	8005c2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005700:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69d9      	ldr	r1, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_ConfigClockSource+0x18>
 800573c:	2302      	movs	r3, #2
 800573e:	e0b3      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x180>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800575e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d03e      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0xd0>
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577e:	f200 8087 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	f000 8085 	beq.w	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	d87f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005790:	2b70      	cmp	r3, #112	; 0x70
 8005792:	d01a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xa2>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d87b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d050      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x116>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d877      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057a0:	2b50      	cmp	r3, #80	; 0x50
 80057a2:	d03c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xf6>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d873      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d058      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x136>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d86f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d064      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d86b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d060      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d867      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d05a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057c8:	e062      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f000 fa7d 	bl	8005cd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e04e      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 fa66 	bl	8005cd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e03b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	461a      	mov	r2, r3
 800582c:	f000 f92a 	bl	8005a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2150      	movs	r1, #80	; 0x50
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fa34 	bl	8005ca4 <TIM_ITRx_SetConfig>
      break;
 800583c:	e02b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f000 f984 	bl	8005b58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2160      	movs	r1, #96	; 0x60
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fa24 	bl	8005ca4 <TIM_ITRx_SetConfig>
      break;
 800585c:	e01b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 f90a 	bl	8005a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fa14 	bl	8005ca4 <TIM_ITRx_SetConfig>
      break;
 800587c:	e00b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 fa0b 	bl	8005ca4 <TIM_ITRx_SetConfig>
        break;
 800588e:	e002      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr
	...

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a25      	ldr	r2, [pc, #148]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800

080059d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <TIM_TI1_SetConfig+0xa8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_TI1_SetConfig+0x46>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d007      	beq.n	8005a16 <TIM_TI1_SetConfig+0x46>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <TIM_TI1_SetConfig+0xac>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_TI1_SetConfig+0x46>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <TIM_TI1_SetConfig+0xb0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <TIM_TI1_SetConfig+0x4a>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <TIM_TI1_SetConfig+0x4c>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e003      	b.n	8005a3a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f023 030a 	bic.w	r3, r3, #10
 8005a54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f003 030a 	and.w	r3, r3, #10
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800

08005a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f023 030a 	bic.w	r3, r3, #10
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0210 	bic.w	r2, r3, #16
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	031b      	lsls	r3, r3, #12
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f023 0210 	bic.w	r2, r3, #16
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	031b      	lsls	r3, r3, #12
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	031b      	lsls	r3, r3, #12
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	031b      	lsls	r3, r3, #12
 8005c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f043 0307 	orr.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	609a      	str	r2, [r3, #8]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	021a      	lsls	r2, r3, #8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2201      	movs	r2, #1
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	401a      	ands	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1a      	ldr	r2, [r3, #32]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e046      	b.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d009      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10c      	bne.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800

08005e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e03f      	b.n	8005ed2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc fce4 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fb49 	bl	800651c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_UART_IRQHandler+0x52>
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa4f 	bl	80063ca <UART_Receive_IT>
      return;
 8005f2c:	e17b      	b.n	8006226 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80b1 	beq.w	8006098 <HAL_UART_IRQHandler+0x1bc>
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_UART_IRQHandler+0x70>
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80a6 	beq.w	8006098 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_UART_IRQHandler+0x90>
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_UART_IRQHandler+0xb0>
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f043 0202 	orr.w	r2, r3, #2
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_UART_IRQHandler+0xd0>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	f043 0204 	orr.w	r2, r3, #4
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00f      	beq.n	8005fd6 <HAL_UART_IRQHandler+0xfa>
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <HAL_UART_IRQHandler+0xee>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f043 0208 	orr.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 811e 	beq.w	800621c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <HAL_UART_IRQHandler+0x11e>
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9e8 	bl	80063ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <HAL_UART_IRQHandler+0x146>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d031      	beq.n	8006086 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f92a 	bl	800627c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d023      	beq.n	800607e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006044:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	2b00      	cmp	r3, #0
 800604c:	d013      	beq.n	8006076 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	4a76      	ldr	r2, [pc, #472]	; (800622c <HAL_UART_IRQHandler+0x350>)
 8006054:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	4618      	mov	r0, r3
 800605c:	f7fd f96a 	bl	8003334 <HAL_DMA_Abort_IT>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d016      	beq.n	8006094 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006070:	4610      	mov	r0, r2
 8006072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	e00e      	b.n	8006094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8ec 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	e00a      	b.n	8006094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8e8 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	e006      	b.n	8006094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8e4 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006092:	e0c3      	b.n	800621c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	bf00      	nop
    return;
 8006096:	e0c1      	b.n	800621c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	2b01      	cmp	r3, #1
 800609e:	f040 80a1 	bne.w	80061e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 809b 	beq.w	80061e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8095 	beq.w	80061e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d04e      	beq.n	800617c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80060e8:	8a3b      	ldrh	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8098 	beq.w	8006220 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060f4:	8a3a      	ldrh	r2, [r7, #16]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	f080 8092 	bcs.w	8006220 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8a3a      	ldrh	r2, [r7, #16]
 8006100:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b20      	cmp	r3, #32
 800610a:	d02b      	beq.n	8006164 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800611a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0210 	bic.w	r2, r2, #16
 8006158:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	4618      	mov	r0, r3
 8006160:	f7fd f8ae 	bl	80032c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800616c:	b29b      	uxth	r3, r3
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	b29b      	uxth	r3, r3
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f876 	bl	8006266 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800617a:	e051      	b.n	8006220 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006184:	b29b      	uxth	r3, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d047      	beq.n	8006224 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006194:	8a7b      	ldrh	r3, [r7, #18]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d044      	beq.n	8006224 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0210 	bic.w	r2, r2, #16
 80061d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d8:	8a7b      	ldrh	r3, [r7, #18]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f842 	bl	8006266 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061e2:	e01f      	b.n	8006224 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_UART_IRQHandler+0x324>
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f87f 	bl	80062fc <UART_Transmit_IT>
    return;
 80061fe:	e012      	b.n	8006226 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <HAL_UART_IRQHandler+0x34a>
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8c0 	bl	800639a <UART_EndTransmit_IT>
    return;
 800621a:	e004      	b.n	8006226 <HAL_UART_IRQHandler+0x34a>
    return;
 800621c:	bf00      	nop
 800621e:	e002      	b.n	8006226 <HAL_UART_IRQHandler+0x34a>
      return;
 8006220:	bf00      	nop
 8006222:	e000      	b.n	8006226 <HAL_UART_IRQHandler+0x34a>
      return;
 8006224:	bf00      	nop
  }
}
 8006226:	3728      	adds	r7, #40	; 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	080062d5 	.word	0x080062d5

08006230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006292:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d107      	bne.n	80062bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0210 	bic.w	r2, r2, #16
 80062ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff ffb0 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b21      	cmp	r3, #33	; 0x21
 800630e:	d13e      	bne.n	800638e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006318:	d114      	bne.n	8006344 <UART_Transmit_IT+0x48>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d110      	bne.n	8006344 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006336:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]
 8006342:	e008      	b.n	8006356 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6211      	str	r1, [r2, #32]
 800634e:	781a      	ldrb	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4619      	mov	r1, r3
 8006364:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006378:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006388:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr

0800639a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff ff38 	bl	8006230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b22      	cmp	r3, #34	; 0x22
 80063dc:	f040 8099 	bne.w	8006512 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e8:	d117      	bne.n	800641a <UART_Receive_IT+0x50>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d113      	bne.n	800641a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006408:	b29a      	uxth	r2, r3
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	629a      	str	r2, [r3, #40]	; 0x28
 8006418:	e026      	b.n	8006468 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642c:	d007      	beq.n	800643e <UART_Receive_IT+0x74>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <UART_Receive_IT+0x82>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e008      	b.n	800645e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006458:	b2da      	uxtb	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29b      	uxth	r3, r3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4619      	mov	r1, r3
 8006476:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006478:	2b00      	cmp	r3, #0
 800647a:	d148      	bne.n	800650e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0220 	bic.w	r2, r2, #32
 800648a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800649a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d123      	bne.n	8006504 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0210 	bic.w	r2, r2, #16
 80064d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d10a      	bne.n	80064f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff feb2 	bl	8006266 <HAL_UARTEx_RxEventCallback>
 8006502:	e002      	b.n	800650a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fe9c 	bl	8006242 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e002      	b.n	8006514 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006556:	f023 030c 	bic.w	r3, r3, #12
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	430b      	orrs	r3, r1
 8006562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <UART_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d103      	bne.n	800658c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fd ff34 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	e002      	b.n	8006592 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fd ff1c 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8006590:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009a      	lsls	r2, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <UART_SetConfig+0x118>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	0119      	lsls	r1, r3, #4
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009a      	lsls	r2, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <UART_SetConfig+0x118>)
 80065ca:	fba3 0302 	umull	r0, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2064      	movs	r0, #100	; 0x64
 80065d2:	fb00 f303 	mul.w	r3, r0, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	3332      	adds	r3, #50	; 0x32
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <UART_SetConfig+0x118>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e8:	4419      	add	r1, r3
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009a      	lsls	r2, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <UART_SetConfig+0x118>)
 8006602:	fba3 0302 	umull	r0, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2064      	movs	r0, #100	; 0x64
 800660a:	fb00 f303 	mul.w	r3, r0, r3
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	3332      	adds	r3, #50	; 0x32
 8006614:	4a07      	ldr	r2, [pc, #28]	; (8006634 <UART_SetConfig+0x118>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	f003 020f 	and.w	r2, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	440a      	add	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40013800 	.word	0x40013800
 8006634:	51eb851f 	.word	0x51eb851f

08006638 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800663c:	4904      	ldr	r1, [pc, #16]	; (8006650 <MX_FATFS_Init+0x18>)
 800663e:	4805      	ldr	r0, [pc, #20]	; (8006654 <MX_FATFS_Init+0x1c>)
 8006640:	f003 f902 	bl	8009848 <FATFS_LinkDriver>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <MX_FATFS_Init+0x20>)
 800664a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800664c:	bf00      	nop
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20000b94 	.word	0x20000b94
 8006654:	20000010 	.word	0x20000010
 8006658:	20000b98 	.word	0x20000b98

0800665c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006660:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006662:	4618      	mov	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
	...

0800666c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	4618      	mov	r0, r3
 800667a:	f7fa fcff 	bl	800107c <SD_disk_initialize>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	4b04      	ldr	r3, [pc, #16]	; (8006694 <USER_initialize+0x28>)
 8006684:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006686:	4b03      	ldr	r3, [pc, #12]	; (8006694 <USER_initialize+0x28>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	2000000d 	.word	0x2000000d

08006698 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fa fdd3 	bl	8001250 <SD_disk_status>
 80066aa:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80066c4:	7bf8      	ldrb	r0, [r7, #15]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	f7fa fdd4 	bl	8001278 <SD_disk_read>
 80066d0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80066ea:	7bf8      	ldrb	r0, [r7, #15]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	f7fa fe2b 	bl	800134c <SD_disk_write>
 80066f6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	603a      	str	r2, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
 800670c:	460b      	mov	r3, r1
 800670e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006710:	79b9      	ldrb	r1, [r7, #6]
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f7fa fe9c 	bl	8001454 <SD_disk_ioctl>
 800671c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <disk_status+0x30>)
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	79fa      	ldrb	r2, [r7, #7]
 8006740:	4905      	ldr	r1, [pc, #20]	; (8006758 <disk_status+0x30>)
 8006742:	440a      	add	r2, r1
 8006744:	7a12      	ldrb	r2, [r2, #8]
 8006746:	4610      	mov	r0, r2
 8006748:	4798      	blx	r3
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	200002cc 	.word	0x200002cc

0800675c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	4a0d      	ldr	r2, [pc, #52]	; (80067a4 <disk_initialize+0x48>)
 800676e:	5cd3      	ldrb	r3, [r2, r3]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d111      	bne.n	8006798 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	4a0b      	ldr	r2, [pc, #44]	; (80067a4 <disk_initialize+0x48>)
 8006778:	2101      	movs	r1, #1
 800677a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	4a09      	ldr	r2, [pc, #36]	; (80067a4 <disk_initialize+0x48>)
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	79fa      	ldrb	r2, [r7, #7]
 800678a:	4906      	ldr	r1, [pc, #24]	; (80067a4 <disk_initialize+0x48>)
 800678c:	440a      	add	r2, r1
 800678e:	7a12      	ldrb	r2, [r2, #8]
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200002cc 	.word	0x200002cc

080067a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80067a8:	b590      	push	{r4, r7, lr}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <disk_read+0x3c>)
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	689c      	ldr	r4, [r3, #8]
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	4a07      	ldr	r2, [pc, #28]	; (80067e4 <disk_read+0x3c>)
 80067c8:	4413      	add	r3, r2
 80067ca:	7a18      	ldrb	r0, [r3, #8]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	47a0      	blx	r4
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd90      	pop	{r4, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200002cc 	.word	0x200002cc

080067e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <disk_write+0x3c>)
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68dc      	ldr	r4, [r3, #12]
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4a07      	ldr	r2, [pc, #28]	; (8006824 <disk_write+0x3c>)
 8006808:	4413      	add	r3, r2
 800680a:	7a18      	ldrb	r0, [r3, #8]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	47a0      	blx	r4
 8006814:	4603      	mov	r3, r0
 8006816:	75fb      	strb	r3, [r7, #23]
  return res;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
}
 800681a:	4618      	mov	r0, r3
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}
 8006822:	bf00      	nop
 8006824:	200002cc 	.word	0x200002cc

08006828 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	603a      	str	r2, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
 8006834:	460b      	mov	r3, r1
 8006836:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <disk_ioctl+0x38>)
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	79fa      	ldrb	r2, [r7, #7]
 8006846:	4906      	ldr	r1, [pc, #24]	; (8006860 <disk_ioctl+0x38>)
 8006848:	440a      	add	r2, r1
 800684a:	7a10      	ldrb	r0, [r2, #8]
 800684c:	79b9      	ldrb	r1, [r7, #6]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4798      	blx	r3
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
  return res;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200002cc 	.word	0x200002cc

08006864 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006878:	e007      	b.n	800688a <mem_cpy+0x26>
		*d++ = *s++;
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	1c53      	adds	r3, r2, #1
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	6179      	str	r1, [r7, #20]
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	1e5a      	subs	r2, r3, #1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f2      	bne.n	800687a <mem_cpy+0x16>
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80068b0:	e005      	b.n	80068be <mem_set+0x1e>
		*d++ = (BYTE)val;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	617a      	str	r2, [r7, #20]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	1e5a      	subs	r2, r3, #1
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f4      	bne.n	80068b2 <mem_set+0x12>
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80068d4:	b480      	push	{r7}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80068ec:	bf00      	nop
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00d      	beq.n	8006914 <mem_cmp+0x40>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	61fa      	str	r2, [r7, #28]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	4619      	mov	r1, r3
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	61ba      	str	r2, [r7, #24]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	1acb      	subs	r3, r1, r3
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ec      	beq.n	80068ee <mem_cmp+0x1a>
	return r;
 8006914:	697b      	ldr	r3, [r7, #20]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3724      	adds	r7, #36	; 0x24
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800692a:	e002      	b.n	8006932 <chk_chr+0x12>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <chk_chr+0x26>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	4293      	cmp	r3, r2
 8006944:	d1f2      	bne.n	800692c <chk_chr+0xc>
	return *str;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	781b      	ldrb	r3, [r3, #0]
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e035      	b.n	80069d4 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 8006968:	492e      	ldr	r1, [pc, #184]	; (8006a24 <chk_lock+0xd0>)
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4613      	mov	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d026      	beq.n	80069ca <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800697c:	4929      	ldr	r1, [pc, #164]	; (8006a24 <chk_lock+0xd0>)
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4613      	mov	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d11c      	bne.n	80069ce <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 8006994:	4923      	ldr	r1, [pc, #140]	; (8006a24 <chk_lock+0xd0>)
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	3304      	adds	r3, #4
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d10f      	bne.n	80069ce <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80069ae:	491d      	ldr	r1, [pc, #116]	; (8006a24 <chk_lock+0xd0>)
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4613      	mov	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	440b      	add	r3, r1
 80069bc:	3308      	adds	r3, #8
 80069be:	881a      	ldrh	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d102      	bne.n	80069ce <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80069c8:	e007      	b.n	80069da <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 80069ca:	2301      	movs	r3, #1
 80069cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d9c6      	bls.n	8006968 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d109      	bne.n	80069f4 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <chk_lock+0x98>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d101      	bne.n	80069f0 <chk_lock+0x9c>
 80069ec:	2300      	movs	r3, #0
 80069ee:	e013      	b.n	8006a18 <chk_lock+0xc4>
 80069f0:	2312      	movs	r3, #18
 80069f2:	e011      	b.n	8006a18 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <chk_lock+0xbe>
 80069fa:	490a      	ldr	r1, [pc, #40]	; (8006a24 <chk_lock+0xd0>)
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4613      	mov	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	330a      	adds	r3, #10
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a10:	d101      	bne.n	8006a16 <chk_lock+0xc2>
 8006a12:	2310      	movs	r3, #16
 8006a14:	e000      	b.n	8006a18 <chk_lock+0xc4>
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	200000b4 	.word	0x200000b4

08006a28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	e002      	b.n	8006a3a <enq_lock+0x12>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3301      	adds	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d809      	bhi.n	8006a54 <enq_lock+0x2c>
 8006a40:	490a      	ldr	r1, [pc, #40]	; (8006a6c <enq_lock+0x44>)
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1ef      	bne.n	8006a34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	bf14      	ite	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	2300      	moveq	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	200000b4 	.word	0x200000b4

08006a70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e028      	b.n	8006ad2 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8006a80:	4952      	ldr	r1, [pc, #328]	; (8006bcc <inc_lock+0x15c>)
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4613      	mov	r3, r2
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d119      	bne.n	8006acc <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 8006a98:	494c      	ldr	r1, [pc, #304]	; (8006bcc <inc_lock+0x15c>)
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d10c      	bne.n	8006acc <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 8006ab2:	4946      	ldr	r1, [pc, #280]	; (8006bcc <inc_lock+0x15c>)
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	881a      	ldrh	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d006      	beq.n	8006ada <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d9d3      	bls.n	8006a80 <inc_lock+0x10>
 8006ad8:	e000      	b.n	8006adc <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8006ada:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d142      	bne.n	8006b68 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e002      	b.n	8006aee <inc_lock+0x7e>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d809      	bhi.n	8006b08 <inc_lock+0x98>
 8006af4:	4935      	ldr	r1, [pc, #212]	; (8006bcc <inc_lock+0x15c>)
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1ef      	bne.n	8006ae8 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d101      	bne.n	8006b12 <inc_lock+0xa2>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e057      	b.n	8006bc2 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6819      	ldr	r1, [r3, #0]
 8006b16:	482d      	ldr	r0, [pc, #180]	; (8006bcc <inc_lock+0x15c>)
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4403      	add	r3, r0
 8006b24:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6899      	ldr	r1, [r3, #8]
 8006b2a:	4828      	ldr	r0, [pc, #160]	; (8006bcc <inc_lock+0x15c>)
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4403      	add	r3, r0
 8006b38:	3304      	adds	r3, #4
 8006b3a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	88d8      	ldrh	r0, [r3, #6]
 8006b40:	4922      	ldr	r1, [pc, #136]	; (8006bcc <inc_lock+0x15c>)
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4613      	mov	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	3308      	adds	r3, #8
 8006b50:	4602      	mov	r2, r0
 8006b52:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b54:	491d      	ldr	r1, [pc, #116]	; (8006bcc <inc_lock+0x15c>)
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	330a      	adds	r3, #10
 8006b64:	2200      	movs	r2, #0
 8006b66:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <inc_lock+0x118>
 8006b6e:	4917      	ldr	r1, [pc, #92]	; (8006bcc <inc_lock+0x15c>)
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4613      	mov	r3, r2
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	330a      	adds	r3, #10
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <inc_lock+0x118>
 8006b84:	2300      	movs	r3, #0
 8006b86:	e01c      	b.n	8006bc2 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <inc_lock+0x136>
 8006b8e:	490f      	ldr	r1, [pc, #60]	; (8006bcc <inc_lock+0x15c>)
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4613      	mov	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	330a      	adds	r3, #10
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	e001      	b.n	8006baa <inc_lock+0x13a>
 8006ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006baa:	4808      	ldr	r0, [pc, #32]	; (8006bcc <inc_lock+0x15c>)
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4403      	add	r3, r0
 8006bb8:	330a      	adds	r3, #10
 8006bba:	460a      	mov	r2, r1
 8006bbc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3301      	adds	r3, #1
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	200000b4 	.word	0x200000b4

08006bd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d82e      	bhi.n	8006c42 <dec_lock+0x72>
		n = Files[i].ctr;
 8006be4:	491b      	ldr	r1, [pc, #108]	; (8006c54 <dec_lock+0x84>)
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	330a      	adds	r3, #10
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006bf8:	89fb      	ldrh	r3, [r7, #14]
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d101      	bne.n	8006c04 <dec_lock+0x34>
 8006c00:	2300      	movs	r3, #0
 8006c02:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006c04:	89fb      	ldrh	r3, [r7, #14]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <dec_lock+0x40>
 8006c0a:	89fb      	ldrh	r3, [r7, #14]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006c10:	4910      	ldr	r1, [pc, #64]	; (8006c54 <dec_lock+0x84>)
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	330a      	adds	r3, #10
 8006c20:	89fa      	ldrh	r2, [r7, #14]
 8006c22:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006c24:	89fb      	ldrh	r3, [r7, #14]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d108      	bne.n	8006c3c <dec_lock+0x6c>
 8006c2a:	490a      	ldr	r1, [pc, #40]	; (8006c54 <dec_lock+0x84>)
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	737b      	strb	r3, [r7, #13]
 8006c40:	e001      	b.n	8006c46 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006c42:	2302      	movs	r3, #2
 8006c44:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006c46:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	200000b4 	.word	0x200000b4

08006c58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e016      	b.n	8006c94 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c66:	4910      	ldr	r1, [pc, #64]	; (8006ca8 <clear_lock+0x50>)
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d108      	bne.n	8006c8e <clear_lock+0x36>
 8006c7c:	490a      	ldr	r1, [pc, #40]	; (8006ca8 <clear_lock+0x50>)
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4613      	mov	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d9e5      	bls.n	8006c66 <clear_lock+0xe>
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	bf00      	nop
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	200000b4 	.word	0x200000b4

08006cac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d038      	beq.n	8006d34 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8006cc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	f7ff fd87 	bl	80067e8 <disk_write>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e026      	b.n	8006d34 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d218      	bcs.n	8006d34 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	e010      	b.n	8006d2e <sync_window+0x82>
					wsect += fs->fsize;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	2301      	movs	r3, #1
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	f7ff fd60 	bl	80067e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d8eb      	bhi.n	8006d0c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d01b      	beq.n	8006d90 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ffa7 	bl	8006cac <sync_window>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d113      	bne.n	8006d90 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	2301      	movs	r3, #1
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	f7ff fd18 	bl	80067a8 <disk_read>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d82:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff82 	bl	8006cac <sync_window>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 809c 	bne.w	8006eec <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	f040 8089 	bne.w	8006ed2 <sync_fs+0x138>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	f040 8083 	bne.w	8006ed2 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	f7ff fd62 	bl	80068a0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2255      	movs	r2, #85	; 0x55
 8006de0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	22aa      	movs	r2, #170	; 0xaa
 8006de8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2252      	movs	r2, #82	; 0x52
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2252      	movs	r2, #82	; 0x52
 8006df6:	705a      	strb	r2, [r3, #1]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2261      	movs	r2, #97	; 0x61
 8006dfc:	709a      	strb	r2, [r3, #2]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2241      	movs	r2, #65	; 0x41
 8006e02:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2272      	movs	r2, #114	; 0x72
 8006e08:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2272      	movs	r2, #114	; 0x72
 8006e10:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2241      	movs	r2, #65	; 0x41
 8006e18:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2261      	movs	r2, #97	; 0x61
 8006e20:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	0a1b      	lsrs	r3, r3, #8
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e5c:	0e1b      	lsrs	r3, r3, #24
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006e9e:	0e1b      	lsrs	r3, r3, #24
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f7ff fc8f 	bl	80067e8 <disk_write>
			fs->fsi_flag = 0;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fca3 	bl	8006828 <disk_ioctl>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <sync_fs+0x152>
			res = FR_DISK_ERR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	3b02      	subs	r3, #2
 8006f04:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006f0c:	3b02      	subs	r3, #2
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d301      	bcc.n	8006f18 <clust2sect+0x22>
 8006f14:	2300      	movs	r3, #0
 8006f16:	e00a      	b.n	8006f2e <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8006f1e:	461a      	mov	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	fb03 f202 	mul.w	r2, r3, r2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006f2c:	4413      	add	r3, r2
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d905      	bls.n	8006f54 <get_fat+0x1c>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <get_fat+0x22>
		val = 1;	/* Internal error */
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e0d7      	b.n	800710a <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	f000 808f 	beq.w	800708a <get_fat+0x152>
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	f300 80c2 	bgt.w	80070f6 <get_fat+0x1be>
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d002      	beq.n	8006f7c <get_fat+0x44>
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d059      	beq.n	800702e <get_fat+0xf6>
 8006f7a:	e0bc      	b.n	80070f6 <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006f96:	4619      	mov	r1, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fecb 	bl	8006d3e <move_window>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 80a6 	bne.w	80070fc <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	60fa      	str	r2, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fc0:	fb02 f201 	mul.w	r2, r2, r1
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	5cd3      	ldrb	r3, [r2, r3]
 8006fca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006fd8:	4619      	mov	r1, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fe0:	4413      	add	r3, r2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff feaa 	bl	8006d3e <move_window>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8087 	bne.w	8007100 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007000:	fb02 f201 	mul.w	r2, r2, r1
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	5cd3      	ldrb	r3, [r2, r3]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	461a      	mov	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4313      	orrs	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <get_fat+0xec>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	091b      	lsrs	r3, r3, #4
 8007022:	e002      	b.n	800702a <get_fat+0xf2>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800702a:	617b      	str	r3, [r7, #20]
			break;
 800702c:	e06d      	b.n	800710a <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	4619      	mov	r1, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	fbb3 f3f1 	udiv	r3, r3, r1
 8007046:	4413      	add	r3, r2
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fe77 	bl	8006d3e <move_window>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d156      	bne.n	8007104 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007060:	fbb3 f1f2 	udiv	r1, r3, r2
 8007064:	fb02 f201 	mul.w	r2, r2, r1
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	3301      	adds	r3, #1
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	b21a      	sxth	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b21b      	sxth	r3, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	b21b      	sxth	r3, r3
 8007084:	b29b      	uxth	r3, r3
 8007086:	617b      	str	r3, [r7, #20]
			break;
 8007088:	e03f      	b.n	800710a <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007096:	089b      	lsrs	r3, r3, #2
 8007098:	b29b      	uxth	r3, r3
 800709a:	4619      	mov	r1, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	fbb3 f3f1 	udiv	r3, r3, r1
 80070a2:	4413      	add	r3, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fe49 	bl	8006d3e <move_window>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d12a      	bne.n	8007108 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80070bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80070c0:	fb02 f201 	mul.w	r2, r2, r1
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3303      	adds	r3, #3
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	061a      	lsls	r2, r3, #24
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	3302      	adds	r3, #2
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	041b      	lsls	r3, r3, #16
 80070dc:	4313      	orrs	r3, r2
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	3201      	adds	r2, #1
 80070e2:	7812      	ldrb	r2, [r2, #0]
 80070e4:	0212      	lsls	r2, r2, #8
 80070e6:	4313      	orrs	r3, r2
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070f2:	617b      	str	r3, [r7, #20]
			break;
 80070f4:	e009      	b.n	800710a <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e006      	b.n	800710a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070fc:	bf00      	nop
 80070fe:	e004      	b.n	800710a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007100:	bf00      	nop
 8007102:	e002      	b.n	800710a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007108:	bf00      	nop
		}
	}

	return val;
 800710a:	697b      	ldr	r3, [r7, #20]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d905      	bls.n	8007132 <put_fat+0x1e>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <put_fat+0x24>
		res = FR_INT_ERR;
 8007132:	2302      	movs	r3, #2
 8007134:	77fb      	strb	r3, [r7, #31]
 8007136:	e128      	b.n	800738a <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800713e:	2b03      	cmp	r3, #3
 8007140:	f000 80c3 	beq.w	80072ca <put_fat+0x1b6>
 8007144:	2b03      	cmp	r3, #3
 8007146:	f300 8116 	bgt.w	8007376 <put_fat+0x262>
 800714a:	2b01      	cmp	r3, #1
 800714c:	d003      	beq.n	8007156 <put_fat+0x42>
 800714e:	2b02      	cmp	r3, #2
 8007150:	f000 8087 	beq.w	8007262 <put_fat+0x14e>
 8007154:	e10f      	b.n	8007376 <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007170:	4619      	mov	r1, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	fbb3 f3f1 	udiv	r3, r3, r1
 8007178:	4413      	add	r3, r2
 800717a:	4619      	mov	r1, r3
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7ff fdde 	bl	8006d3e <move_window>
 8007182:	4603      	mov	r3, r0
 8007184:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007186:	7ffb      	ldrb	r3, [r7, #31]
 8007188:	2b00      	cmp	r3, #0
 800718a:	f040 80f7 	bne.w	800737c <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	617a      	str	r2, [r7, #20]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800719a:	fbb3 f1f2 	udiv	r1, r3, r2
 800719e:	fb02 f201 	mul.w	r2, r2, r1
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00d      	beq.n	80071d0 <put_fat+0xbc>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b25b      	sxtb	r3, r3
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	b25a      	sxtb	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	b25b      	sxtb	r3, r3
 80071c8:	4313      	orrs	r3, r2
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e001      	b.n	80071d4 <put_fat+0xc0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80071ec:	4619      	mov	r1, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80071f4:	4413      	add	r3, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff fda0 	bl	8006d3e <move_window>
 80071fe:	4603      	mov	r3, r0
 8007200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007202:	7ffb      	ldrb	r3, [r7, #31]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 80bb 	bne.w	8007380 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007210:	461a      	mov	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	fbb3 f1f2 	udiv	r1, r3, r2
 8007218:	fb02 f201 	mul.w	r2, r2, r1
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <put_fat+0x122>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e00e      	b.n	8007254 <put_fat+0x140>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b25b      	sxtb	r3, r3
 800723c:	f023 030f 	bic.w	r3, r3, #15
 8007240:	b25a      	sxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	b25b      	sxtb	r3, r3
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	b25b      	sxtb	r3, r3
 800724e:	4313      	orrs	r3, r2
 8007250:	b25b      	sxtb	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8007260:	e093      	b.n	800738a <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	b29b      	uxth	r3, r3
 8007272:	4619      	mov	r1, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	fbb3 f3f1 	udiv	r3, r3, r1
 800727a:	4413      	add	r3, r2
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff fd5d 	bl	8006d3e <move_window>
 8007284:	4603      	mov	r3, r0
 8007286:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007288:	7ffb      	ldrb	r3, [r7, #31]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d17a      	bne.n	8007384 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007298:	fbb3 f1f2 	udiv	r1, r3, r2
 800729c:	fb02 f201 	mul.w	r2, r2, r1
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	3301      	adds	r3, #1
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80072c8:	e05f      	b.n	800738a <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80072d6:	089b      	lsrs	r3, r3, #2
 80072d8:	b29b      	uxth	r3, r3
 80072da:	4619      	mov	r1, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	fbb3 f3f1 	udiv	r3, r3, r1
 80072e2:	4413      	add	r3, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7ff fd29 	bl	8006d3e <move_window>
 80072ec:	4603      	mov	r3, r0
 80072ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072f0:	7ffb      	ldrb	r3, [r7, #31]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d148      	bne.n	8007388 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007300:	fbb3 f1f2 	udiv	r1, r3, r2
 8007304:	fb02 f201 	mul.w	r2, r2, r1
 8007308:	1a9b      	subs	r3, r3, r2
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	3303      	adds	r3, #3
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	061a      	lsls	r2, r3, #24
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	3302      	adds	r3, #2
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	4313      	orrs	r3, r2
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	3201      	adds	r2, #1
 8007326:	7812      	ldrb	r2, [r2, #0]
 8007328:	0212      	lsls	r2, r2, #8
 800732a:	4313      	orrs	r3, r2
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	7812      	ldrb	r2, [r2, #0]
 8007330:	4313      	orrs	r3, r2
 8007332:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	4313      	orrs	r3, r2
 800733a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	b2da      	uxtb	r2, r3
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	b29b      	uxth	r3, r3
 8007348:	0a1b      	lsrs	r3, r3, #8
 800734a:	b29a      	uxth	r2, r3
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	3301      	adds	r3, #1
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	0c1a      	lsrs	r2, r3, #16
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	3302      	adds	r3, #2
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0e1a      	lsrs	r2, r3, #24
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	3303      	adds	r3, #3
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8007374:	e009      	b.n	800738a <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e006      	b.n	800738a <put_fat+0x276>
			if (res != FR_OK) break;
 800737c:	bf00      	nop
 800737e:	e004      	b.n	800738a <put_fat+0x276>
			if (res != FR_OK) break;
 8007380:	bf00      	nop
 8007382:	e002      	b.n	800738a <put_fat+0x276>
			if (res != FR_OK) break;
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <put_fat+0x276>
			if (res != FR_OK) break;
 8007388:	bf00      	nop
		}
	}

	return res;
 800738a:	7ffb      	ldrb	r3, [r7, #31]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d905      	bls.n	80073b0 <remove_chain+0x1c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d302      	bcc.n	80073b6 <remove_chain+0x22>
		res = FR_INT_ERR;
 80073b0:	2302      	movs	r3, #2
 80073b2:	73fb      	strb	r3, [r7, #15]
 80073b4:	e043      	b.n	800743e <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80073ba:	e036      	b.n	800742a <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fdba 	bl	8006f38 <get_fat>
 80073c4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d035      	beq.n	8007438 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d102      	bne.n	80073d8 <remove_chain+0x44>
 80073d2:	2302      	movs	r3, #2
 80073d4:	73fb      	strb	r3, [r7, #15]
 80073d6:	e032      	b.n	800743e <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d102      	bne.n	80073e6 <remove_chain+0x52>
 80073e0:	2301      	movs	r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
 80073e4:	e02b      	b.n	800743e <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80073e6:	2200      	movs	r2, #0
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fe92 	bl	8007114 <put_fat>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d120      	bne.n	800743c <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d00f      	beq.n	8007426 <remove_chain+0x92>
				fs->free_clust++;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	b2da      	uxtb	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d3c2      	bcc.n	80073bc <remove_chain+0x28>
 8007436:	e002      	b.n	800743e <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8007438:	bf00      	nop
 800743a:	e000      	b.n	800743e <remove_chain+0xaa>
			if (res != FR_OK) break;
 800743c:	bf00      	nop
		}
	}

	return res;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10f      	bne.n	8007478 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800745e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <create_chain+0x2a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	429a      	cmp	r2, r3
 8007470:	d31c      	bcc.n	80074ac <create_chain+0x64>
 8007472:	2301      	movs	r3, #1
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	e019      	b.n	80074ac <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff fd5c 	bl	8006f38 <get_fat>
 8007480:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d801      	bhi.n	800748c <create_chain+0x44>
 8007488:	2301      	movs	r3, #1
 800748a:	e076      	b.n	800757a <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d101      	bne.n	8007498 <create_chain+0x50>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	e070      	b.n	800757a <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d201      	bcs.n	80074a8 <create_chain+0x60>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	e068      	b.n	800757a <create_chain+0x132>
		scl = clst;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	3301      	adds	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d307      	bcc.n	80074d2 <create_chain+0x8a>
			ncl = 2;
 80074c2:	2302      	movs	r3, #2
 80074c4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d901      	bls.n	80074d2 <create_chain+0x8a>
 80074ce:	2300      	movs	r3, #0
 80074d0:	e053      	b.n	800757a <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80074d2:	6979      	ldr	r1, [r7, #20]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fd2f 	bl	8006f38 <get_fat>
 80074da:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d002      	beq.n	80074f0 <create_chain+0xa8>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <create_chain+0xac>
			return cs;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	e042      	b.n	800757a <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d1d9      	bne.n	80074b0 <create_chain+0x68>
 80074fc:	2300      	movs	r3, #0
 80074fe:	e03c      	b.n	800757a <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007500:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007502:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fe03 	bl	8007114 <put_fat>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <create_chain+0xe4>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fdf6 	bl	8007114 <put_fat>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d11a      	bne.n	8007568 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007544:	d018      	beq.n	8007578 <create_chain+0x130>
			fs->free_clust--;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800754c:	1e5a      	subs	r2, r3, #1
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8007566:	e007      	b.n	8007578 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d102      	bne.n	8007574 <create_chain+0x12c>
 800756e:	f04f 33ff 	mov.w	r3, #4294967295
 8007572:	e000      	b.n	8007576 <create_chain+0x12e>
 8007574:	2301      	movs	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007578:	697b      	ldr	r3, [r7, #20]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	3304      	adds	r3, #4
 8007592:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800759c:	461a      	mov	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80075ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	613a      	str	r2, [r7, #16]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <clmt_clust+0x44>
 80075c2:	2300      	movs	r3, #0
 80075c4:	e010      	b.n	80075e8 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d307      	bcc.n	80075de <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	3304      	adds	r3, #4
 80075da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80075dc:	e7e9      	b.n	80075b2 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80075de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d006      	beq.n	800761e <dir_sdi+0x2c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	429a      	cmp	r2, r3
 800761c:	d301      	bcc.n	8007622 <dir_sdi+0x30>
		return FR_INT_ERR;
 800761e:	2302      	movs	r3, #2
 8007620:	e082      	b.n	8007728 <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <dir_sdi+0x4c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007630:	2b03      	cmp	r3, #3
 8007632:	d104      	bne.n	800763e <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800763c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10f      	bne.n	8007664 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800764c:	461a      	mov	r2, r3
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	4293      	cmp	r3, r2
 8007652:	d301      	bcc.n	8007658 <dir_sdi+0x66>
			return FR_INT_ERR;
 8007654:	2302      	movs	r3, #2
 8007656:	e067      	b.n	8007728 <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	e036      	b.n	80076d2 <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800766c:	095b      	lsrs	r3, r3, #5
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800767a:	fb03 f302 	mul.w	r3, r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007680:	e01c      	b.n	80076bc <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6979      	ldr	r1, [r7, #20]
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff fc55 	bl	8006f38 <get_fat>
 800768e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d101      	bne.n	800769c <dir_sdi+0xaa>
 8007698:	2301      	movs	r3, #1
 800769a:	e045      	b.n	8007728 <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d906      	bls.n	80076b0 <dir_sdi+0xbe>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d301      	bcc.n	80076b4 <dir_sdi+0xc2>
				return FR_INT_ERR;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e039      	b.n	8007728 <dir_sdi+0x136>
			idx -= ic;
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d2de      	bcs.n	8007682 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fc13 	bl	8006ef6 <clust2sect>
 80076d0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <dir_sdi+0xf0>
 80076de:	2302      	movs	r3, #2
 80076e0:	e022      	b.n	8007728 <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	441a      	add	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	fbb3 f1f2 	udiv	r1, r3, r2
 8007718:	fb02 f201 	mul.w	r2, r2, r1
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	015b      	lsls	r3, r3, #5
 8007720:	18c2      	adds	r2, r0, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007730:	b590      	push	{r4, r7, lr}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <dir_next+0x22>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <dir_next+0x26>
		return FR_NO_FILE;
 8007752:	2304      	movs	r3, #4
 8007754:	e0e2      	b.n	800791c <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	b29b      	uxth	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	fbb3 f1f2 	udiv	r1, r3, r2
 800776a:	fb02 f201 	mul.w	r2, r2, r1
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 80ba 	bne.w	80078ea <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007790:	461a      	mov	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4293      	cmp	r3, r2
 8007796:	f0c0 80a8 	bcc.w	80078ea <dir_next+0x1ba>
				return FR_NO_FILE;
 800779a:	2304      	movs	r3, #4
 800779c:	e0be      	b.n	800791c <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80077ba:	3a01      	subs	r2, #1
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 8093 	bne.w	80078ea <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7ff fbb2 	bl	8006f38 <get_fat>
 80077d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d801      	bhi.n	80077e0 <dir_next+0xb0>
 80077dc:	2302      	movs	r3, #2
 80077de:	e09d      	b.n	800791c <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d101      	bne.n	80077ec <dir_next+0xbc>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e097      	b.n	800791c <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d36b      	bcc.n	80078d2 <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <dir_next+0xd4>
 8007800:	2304      	movs	r3, #4
 8007802:	e08b      	b.n	800791c <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7ff fe1a 	bl	8007448 <create_chain>
 8007814:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <dir_next+0xf0>
 800781c:	2307      	movs	r3, #7
 800781e:	e07d      	b.n	800791c <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <dir_next+0xfa>
 8007826:	2302      	movs	r3, #2
 8007828:	e078      	b.n	800791c <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d101      	bne.n	8007836 <dir_next+0x106>
 8007832:	2301      	movs	r3, #1
 8007834:	e072      	b.n	800791c <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fa36 	bl	8006cac <sync_window>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <dir_next+0x11a>
 8007846:	2301      	movs	r3, #1
 8007848:	e068      	b.n	800791c <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007858:	461a      	mov	r2, r3
 800785a:	2100      	movs	r1, #0
 800785c:	f7ff f820 	bl	80068a0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681c      	ldr	r4, [r3, #0]
 8007868:	6979      	ldr	r1, [r7, #20]
 800786a:	4610      	mov	r0, r2
 800786c:	f7ff fb43 	bl	8006ef6 <clust2sect>
 8007870:	4603      	mov	r3, r0
 8007872:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007876:	2300      	movs	r3, #0
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	e018      	b.n	80078ae <dir_next+0x17e>
						dp->fs->wflag = 1;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fa0e 	bl	8006cac <sync_window>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <dir_next+0x16a>
 8007896:	2301      	movs	r3, #1
 8007898:	e040      	b.n	800791c <dir_next+0x1ec>
						dp->fs->winsect++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80078a2:	3201      	adds	r2, #1
 80078a4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3301      	adds	r3, #1
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80078b6:	461a      	mov	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d3de      	bcc.n	800787c <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	1a8a      	subs	r2, r1, r2
 80078ce:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6979      	ldr	r1, [r7, #20]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fb09 	bl	8006ef6 <clust2sect>
 80078e4:	4602      	mov	r2, r0
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	b29b      	uxth	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	fbb3 f1f2 	udiv	r1, r3, r2
 800790c:	fb02 f201 	mul.w	r2, r2, r1
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	015b      	lsls	r3, r3, #5
 8007914:	18c2      	adds	r2, r0, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	bd90      	pop	{r4, r7, pc}

08007924 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800792e:	2100      	movs	r1, #0
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff fe5e 	bl	80075f2 <dir_sdi>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d12d      	bne.n	800799c <dir_alloc+0x78>
		n = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7ff f9f5 	bl	8006d3e <move_window>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11d      	bne.n	800799a <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2be5      	cmp	r3, #229	; 0xe5
 8007966:	d004      	beq.n	8007972 <dir_alloc+0x4e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	60bb      	str	r3, [r7, #8]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d102      	bne.n	8007986 <dir_alloc+0x62>
 8007980:	e00c      	b.n	800799c <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007982:	2300      	movs	r3, #0
 8007984:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007986:	2101      	movs	r1, #1
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fed1 	bl	8007730 <dir_next>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0d5      	beq.n	8007944 <dir_alloc+0x20>
 8007998:	e000      	b.n	800799c <dir_alloc+0x78>
			if (res != FR_OK) break;
 800799a:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d101      	bne.n	80079a6 <dir_alloc+0x82>
 80079a2:	2307      	movs	r3, #7
 80079a4:	73fb      	strb	r3, [r7, #15]
	return res;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	331b      	adds	r3, #27
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	b21a      	sxth	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	331a      	adds	r3, #26
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b21b      	sxth	r3, r3
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d10f      	bne.n	80079fe <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	3315      	adds	r3, #21
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	b21a      	sxth	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3314      	adds	r3, #20
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b21b      	sxth	r3, r3
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b21b      	sxth	r3, r3
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

	return cl;
 80079fe:	68fb      	ldr	r3, [r7, #12]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	331a      	adds	r3, #26
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	331b      	adds	r3, #27
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	0c1a      	lsrs	r2, r3, #16
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3314      	adds	r3, #20
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	0a1b      	lsrs	r3, r3, #8
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3315      	adds	r3, #21
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	701a      	strb	r2, [r3, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
	...

08007a58 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a6a:	1e5a      	subs	r2, r3, #1
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8007a80:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <cmp_lfn+0xd8>)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	b21a      	sxth	r2, r3
 8007a94:	4926      	ldr	r1, [pc, #152]	; (8007b30 <cmp_lfn+0xd8>)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	440b      	add	r3, r1
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	440b      	add	r3, r1
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b21b      	sxth	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b21b      	sxth	r3, r3
 8007aaa:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8007aac:	89fb      	ldrh	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d019      	beq.n	8007ae6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8007ab2:	89bb      	ldrh	r3, [r7, #12]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 ff11 	bl	80098dc <ff_wtoupper>
 8007aba:	4603      	mov	r3, r0
 8007abc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8007ac2:	d80e      	bhi.n	8007ae2 <cmp_lfn+0x8a>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	617a      	str	r2, [r7, #20]
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 ff02 	bl	80098dc <ff_wtoupper>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	89fb      	ldrh	r3, [r7, #14]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d008      	beq.n	8007af4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e01f      	b.n	8007b26 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8007ae6:	89bb      	ldrh	r3, [r7, #12]
 8007ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d001      	beq.n	8007af4 <cmp_lfn+0x9c>
 8007af0:	2300      	movs	r3, #0
 8007af2:	e018      	b.n	8007b26 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	3301      	adds	r3, #1
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b0c      	cmp	r3, #12
 8007afe:	d9bf      	bls.n	8007a80 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <cmp_lfn+0xcc>
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <cmp_lfn+0xcc>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <cmp_lfn+0xcc>
		return 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8007b24:	2301      	movs	r3, #1
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	0800a374 	.word	0x0800a374

08007b34 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b089      	sub	sp, #36	; 0x24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	460b      	mov	r3, r1
 8007b44:	71fb      	strb	r3, [r7, #7]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	330d      	adds	r3, #13
 8007b4e:	79ba      	ldrb	r2, [r7, #6]
 8007b50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	330b      	adds	r3, #11
 8007b56:	220f      	movs	r2, #15
 8007b58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	331a      	adds	r3, #26
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	331b      	adds	r3, #27
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	4613      	mov	r3, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	82fb      	strh	r3, [r7, #22]
 8007b86:	2300      	movs	r3, #0
 8007b88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <fit_lfn+0x70>
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	61fa      	str	r2, [r7, #28]
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <fit_lfn+0xe4>)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	4413      	add	r3, r2
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	8afa      	ldrh	r2, [r7, #22]
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	8afb      	ldrh	r3, [r7, #22]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	b299      	uxth	r1, r3
 8007bbe:	4a16      	ldr	r2, [pc, #88]	; (8007c18 <fit_lfn+0xe4>)
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4413      	add	r3, r2
 8007bcc:	b2ca      	uxtb	r2, r1
 8007bce:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007bd0:	8afb      	ldrh	r3, [r7, #22]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <fit_lfn+0xa8>
 8007bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bda:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b0c      	cmp	r3, #12
 8007be6:	d9d0      	bls.n	8007b8a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007be8:	8afb      	ldrh	r3, [r7, #22]
 8007bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d006      	beq.n	8007c00 <fit_lfn+0xcc>
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <fit_lfn+0xd4>
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	79fa      	ldrb	r2, [r7, #7]
 8007c0c:	701a      	strb	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3724      	adds	r7, #36	; 0x24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr
 8007c18:	0800a374 	.word	0x0800a374

08007c1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007c2a:	220b      	movs	r2, #11
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7fe fe18 	bl	8006864 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d92b      	bls.n	8007c92 <gen_numname+0x76>
		sr = seq;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007c3e:	e022      	b.n	8007c86 <gen_numname+0x6a>
			wc = *lfn++;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	1c9a      	adds	r2, r3, #2
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4e:	e017      	b.n	8007c80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	005a      	lsls	r2, r3, #1
 8007c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007c5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <gen_numname+0x5e>
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007c74:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007c78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d9e4      	bls.n	8007c50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1d8      	bne.n	8007c40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007c92:	2307      	movs	r3, #7
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	3330      	adds	r3, #48	; 0x30
 8007ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007caa:	2b39      	cmp	r3, #57	; 0x39
 8007cac:	d904      	bls.n	8007cb8 <gen_numname+0x9c>
 8007cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cb2:	3307      	adds	r3, #7
 8007cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8007cbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007cc8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	091b      	lsrs	r3, r3, #4
 8007cd0:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1de      	bne.n	8007c96 <gen_numname+0x7a>
	ns[i] = '~';
 8007cd8:	f107 0214 	add.w	r2, r7, #20
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	4413      	add	r3, r2
 8007ce0:	227e      	movs	r2, #126	; 0x7e
 8007ce2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce8:	e002      	b.n	8007cf0 <gen_numname+0xd4>
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	3301      	adds	r3, #1
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d205      	bcs.n	8007d04 <gen_numname+0xe8>
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	4413      	add	r3, r2
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d1f2      	bne.n	8007cea <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	2b07      	cmp	r3, #7
 8007d08:	d808      	bhi.n	8007d1c <gen_numname+0x100>
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007d10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007d14:	4413      	add	r3, r2
 8007d16:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007d1a:	e000      	b.n	8007d1e <gen_numname+0x102>
 8007d1c:	2120      	movs	r1, #32
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	627a      	str	r2, [r7, #36]	; 0x24
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	460a      	mov	r2, r1
 8007d2a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	2b07      	cmp	r3, #7
 8007d30:	d9e8      	bls.n	8007d04 <gen_numname+0xe8>
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	3730      	adds	r7, #48	; 0x30
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007d48:	230b      	movs	r3, #11
 8007d4a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	0852      	lsrs	r2, r2, #1
 8007d52:	01db      	lsls	r3, r3, #7
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	1c59      	adds	r1, r3, #1
 8007d5c:	6079      	str	r1, [r7, #4]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	4413      	add	r3, r2
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1ed      	bne.n	8007d4c <sum_sfn+0x10>
	return sum;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fc33 	bl	80075f2 <dir_sdi>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <dir_find+0x1e>
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	e0a0      	b.n	8007edc <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007d9a:	23ff      	movs	r3, #255	; 0xff
 8007d9c:	753b      	strb	r3, [r7, #20]
 8007d9e:	7d3b      	ldrb	r3, [r7, #20]
 8007da0:	757b      	strb	r3, [r7, #21]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007da8:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fe ffc2 	bl	8006d3e <move_window>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f040 8085 	bne.w	8007ed0 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007dd2:	7dbb      	ldrb	r3, [r7, #22]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <dir_find+0x62>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	75fb      	strb	r3, [r7, #23]
 8007ddc:	e07d      	b.n	8007eda <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	330b      	adds	r3, #11
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007dea:	7dbb      	ldrb	r3, [r7, #22]
 8007dec:	2be5      	cmp	r3, #229	; 0xe5
 8007dee:	d007      	beq.n	8007e00 <dir_find+0x84>
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <dir_find+0x92>
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	2b0f      	cmp	r3, #15
 8007dfe:	d006      	beq.n	8007e0e <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007e00:	23ff      	movs	r3, #255	; 0xff
 8007e02:	757b      	strb	r3, [r7, #21]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0a:	849a      	strh	r2, [r3, #36]	; 0x24
 8007e0c:	e055      	b.n	8007eba <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	2b0f      	cmp	r3, #15
 8007e12:	d12f      	bne.n	8007e74 <dir_find+0xf8>
				if (dp->lfn) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d04e      	beq.n	8007eba <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007e1c:	7dbb      	ldrb	r3, [r7, #22]
 8007e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	7b5b      	ldrb	r3, [r3, #13]
 8007e2a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007e2c:	7dbb      	ldrb	r3, [r7, #22]
 8007e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e32:	75bb      	strb	r3, [r7, #22]
 8007e34:	7dbb      	ldrb	r3, [r7, #22]
 8007e36:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	88da      	ldrh	r2, [r3, #6]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007e40:	7dba      	ldrb	r2, [r7, #22]
 8007e42:	7d7b      	ldrb	r3, [r7, #21]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d112      	bne.n	8007e6e <dir_find+0xf2>
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	330d      	adds	r3, #13
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	7d3a      	ldrb	r2, [r7, #20]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d10c      	bne.n	8007e6e <dir_find+0xf2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	6939      	ldr	r1, [r7, #16]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fdfc 	bl	8007a58 <cmp_lfn>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <dir_find+0xf2>
 8007e66:	7d7b      	ldrb	r3, [r7, #21]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e000      	b.n	8007e70 <dir_find+0xf4>
 8007e6e:	23ff      	movs	r3, #255	; 0xff
 8007e70:	757b      	strb	r3, [r7, #21]
 8007e72:	e022      	b.n	8007eba <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007e74:	7d7b      	ldrb	r3, [r7, #21]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <dir_find+0x10e>
 8007e7a:	6938      	ldr	r0, [r7, #16]
 8007e7c:	f7ff ff5e 	bl	8007d3c <sum_sfn>
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	7d3b      	ldrb	r3, [r7, #20]
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d024      	beq.n	8007ed4 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	330b      	adds	r3, #11
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <dir_find+0x132>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	220b      	movs	r2, #11
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6938      	ldr	r0, [r7, #16]
 8007ea4:	f7fe fd16 	bl	80068d4 <mem_cmp>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d014      	beq.n	8007ed8 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007eae:	23ff      	movs	r3, #255	; 0xff
 8007eb0:	757b      	strb	r3, [r7, #21]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eb8:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fc37 	bl	8007730 <dir_next>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f43f af6e 	beq.w	8007daa <dir_find+0x2e>
 8007ece:	e004      	b.n	8007eda <dir_find+0x15e>
		if (res != FR_OK) break;
 8007ed0:	bf00      	nop
 8007ed2:	e002      	b.n	8007eda <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007ed4:	bf00      	nop
 8007ed6:	e000      	b.n	8007eda <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007ed8:	bf00      	nop

	return res;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08c      	sub	sp, #48	; 0x30
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	623b      	str	r3, [r7, #32]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	220c      	movs	r2, #12
 8007efe:	6a39      	ldr	r1, [r7, #32]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fcaf 	bl	8006864 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d035      	beq.n	8007f7c <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	330b      	adds	r3, #11
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 8007f1e:	2301      	movs	r3, #1
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f22:	e013      	b.n	8007f4c <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8007f24:	f107 010c 	add.w	r1, r7, #12
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	6a38      	ldr	r0, [r7, #32]
 8007f2e:	f7ff fe75 	bl	8007c1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff ff22 	bl	8007d7c <dir_find>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	3301      	adds	r3, #1
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	2b63      	cmp	r3, #99	; 0x63
 8007f50:	d9e8      	bls.n	8007f24 <dir_register+0x40>
 8007f52:	e000      	b.n	8007f56 <dir_register+0x72>
			if (res != FR_OK) break;
 8007f54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	2b64      	cmp	r3, #100	; 0x64
 8007f5a:	d101      	bne.n	8007f60 <dir_register+0x7c>
 8007f5c:	2307      	movs	r3, #7
 8007f5e:	e0b5      	b.n	80080cc <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d002      	beq.n	8007f6e <dir_register+0x8a>
 8007f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f6c:	e0ae      	b.n	80080cc <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	330b      	adds	r3, #11
 8007f72:	7dfa      	ldrb	r2, [r7, #23]
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d014      	beq.n	8007fb0 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 8007f86:	2300      	movs	r3, #0
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f8a:	e002      	b.n	8007f92 <dir_register+0xae>
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	3301      	adds	r3, #1
 8007f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f5      	bne.n	8007f8c <dir_register+0xa8>
		nent = (n + 25) / 13;
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	3319      	adds	r3, #25
 8007fa4:	4a4b      	ldr	r2, [pc, #300]	; (80080d4 <dir_register+0x1f0>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	089b      	lsrs	r3, r3, #2
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
 8007fae:	e001      	b.n	8007fb4 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fcb4 	bl	8007924 <dir_alloc>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d14c      	bne.n	8008064 <dir_register+0x180>
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d046      	beq.n	8008064 <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fb05 	bl	80075f2 <dir_sdi>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d136      	bne.n	8008064 <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fe9e 	bl	8007d3c <sum_sfn>
 8008000:	4603      	mov	r3, r0
 8008002:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7fe fe95 	bl	8006d3e <move_window>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800801a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11f      	bne.n	8008062 <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a18      	ldr	r0, [r3, #32]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6959      	ldr	r1, [r3, #20]
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	b2da      	uxtb	r2, r3
 800802e:	7efb      	ldrb	r3, [r7, #27]
 8008030:	f7ff fd80 	bl	8007b34 <fit_lfn>
				dp->fs->wflag = 1;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800803e:	2100      	movs	r1, #0
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff fb75 	bl	8007730 <dir_next>
 8008046:	4603      	mov	r3, r0
 8008048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800804c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <dir_register+0x180>
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	3b01      	subs	r3, #1
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1d1      	bne.n	8008004 <dir_register+0x120>
 8008060:	e000      	b.n	8008064 <dir_register+0x180>
				if (res != FR_OK) break;
 8008062:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008068:	2b00      	cmp	r3, #0
 800806a:	d12d      	bne.n	80080c8 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f7fe fe61 	bl	8006d3e <move_window>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008086:	2b00      	cmp	r3, #0
 8008088:	d11e      	bne.n	80080c8 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	2220      	movs	r2, #32
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fc04 	bl	80068a0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6958      	ldr	r0, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	220b      	movs	r2, #11
 80080a2:	4619      	mov	r1, r3
 80080a4:	f7fe fbde 	bl	8006864 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	330b      	adds	r3, #11
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	330c      	adds	r3, #12
 80080b6:	f002 0218 	and.w	r2, r2, #24
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 80080c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3730      	adds	r7, #48	; 0x30
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	4ec4ec4f 	.word	0x4ec4ec4f

080080d8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	; 0x28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	e002      	b.n	80080f0 <create_name+0x18>
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3301      	adds	r3, #1
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b2f      	cmp	r3, #47	; 0x2f
 80080f6:	d0f8      	beq.n	80080ea <create_name+0x12>
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b5c      	cmp	r3, #92	; 0x5c
 80080fe:	d0f4      	beq.n	80080ea <create_name+0x12>
	lfn = dp->lfn;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	61ba      	str	r2, [r7, #24]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4413      	add	r3, r2
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800811c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800811e:	2b1f      	cmp	r3, #31
 8008120:	d92f      	bls.n	8008182 <create_name+0xaa>
 8008122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008124:	2b2f      	cmp	r3, #47	; 0x2f
 8008126:	d02c      	beq.n	8008182 <create_name+0xaa>
 8008128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800812a:	2b5c      	cmp	r3, #92	; 0x5c
 800812c:	d029      	beq.n	8008182 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2bfe      	cmp	r3, #254	; 0xfe
 8008132:	d901      	bls.n	8008138 <create_name+0x60>
			return FR_INVALID_NAME;
 8008134:	2306      	movs	r3, #6
 8008136:	e176      	b.n	8008426 <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800813a:	b2db      	uxtb	r3, r3
 800813c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800813e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008140:	2101      	movs	r1, #1
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fb90 	bl	8009868 <ff_convert>
 8008148:	4603      	mov	r3, r0
 800814a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800814c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <create_name+0x7e>
 8008152:	2306      	movs	r3, #6
 8008154:	e167      	b.n	8008426 <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8008156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008158:	2b7f      	cmp	r3, #127	; 0x7f
 800815a:	d809      	bhi.n	8008170 <create_name+0x98>
 800815c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800815e:	4619      	mov	r1, r3
 8008160:	48b3      	ldr	r0, [pc, #716]	; (8008430 <create_name+0x358>)
 8008162:	f7fe fbdd 	bl	8006920 <chk_chr>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <create_name+0x98>
			return FR_INVALID_NAME;
 800816c:	2306      	movs	r3, #6
 800816e:	e15a      	b.n	8008426 <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	617a      	str	r2, [r7, #20]
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800817e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008180:	e7c5      	b.n	800810e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	441a      	add	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800818c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800818e:	2b1f      	cmp	r3, #31
 8008190:	d801      	bhi.n	8008196 <create_name+0xbe>
 8008192:	2304      	movs	r3, #4
 8008194:	e000      	b.n	8008198 <create_name+0xc0>
 8008196:	2300      	movs	r3, #0
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800819c:	e011      	b.n	80081c2 <create_name+0xea>
		w = lfn[di - 1];
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081a4:	3b01      	subs	r3, #1
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80081b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	d002      	beq.n	80081bc <create_name+0xe4>
 80081b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081b8:	2b2e      	cmp	r3, #46	; 0x2e
 80081ba:	d106      	bne.n	80081ca <create_name+0xf2>
		di--;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	3b01      	subs	r3, #1
 80081c0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1ea      	bne.n	800819e <create_name+0xc6>
 80081c8:	e000      	b.n	80081cc <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 80081ca:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <create_name+0xfe>
 80081d2:	2306      	movs	r3, #6
 80081d4:	e127      	b.n	8008426 <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	220b      	movs	r2, #11
 80081e8:	2120      	movs	r1, #32
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fb58 	bl	80068a0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80081f0:	2300      	movs	r3, #0
 80081f2:	61bb      	str	r3, [r7, #24]
 80081f4:	e002      	b.n	80081fc <create_name+0x124>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	3301      	adds	r3, #1
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	2b20      	cmp	r3, #32
 8008208:	d0f5      	beq.n	80081f6 <create_name+0x11e>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	2b2e      	cmp	r3, #46	; 0x2e
 8008216:	d0ee      	beq.n	80081f6 <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <create_name+0x15a>
 800821e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008222:	f043 0303 	orr.w	r3, r3, #3
 8008226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800822a:	e002      	b.n	8008232 <create_name+0x15a>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	3b01      	subs	r3, #1
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <create_name+0x174>
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800823e:	3b01      	subs	r3, #1
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	2b2e      	cmp	r3, #46	; 0x2e
 800824a:	d1ef      	bne.n	800822c <create_name+0x154>

	b = i = 0; ni = 8;
 800824c:	2300      	movs	r3, #0
 800824e:	623b      	str	r3, [r7, #32]
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008256:	2308      	movs	r3, #8
 8008258:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	61ba      	str	r2, [r7, #24]
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800826a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 808f 	beq.w	8008390 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008274:	2b20      	cmp	r3, #32
 8008276:	d006      	beq.n	8008286 <create_name+0x1ae>
 8008278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800827a:	2b2e      	cmp	r3, #46	; 0x2e
 800827c:	d10a      	bne.n	8008294 <create_name+0x1bc>
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	429a      	cmp	r2, r3
 8008284:	d006      	beq.n	8008294 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 8008286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800828a:	f043 0303 	orr.w	r3, r3, #3
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008292:	e07c      	b.n	800838e <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	429a      	cmp	r2, r3
 800829a:	d203      	bcs.n	80082a4 <create_name+0x1cc>
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d123      	bne.n	80082ec <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b0b      	cmp	r3, #11
 80082a8:	d106      	bne.n	80082b8 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 80082aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ae:	f043 0303 	orr.w	r3, r3, #3
 80082b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082b6:	e06e      	b.n	8008396 <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d005      	beq.n	80082cc <create_name+0x1f4>
 80082c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c4:	f043 0303 	orr.w	r3, r3, #3
 80082c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d85f      	bhi.n	8008394 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	2308      	movs	r3, #8
 80082da:	623b      	str	r3, [r7, #32]
 80082dc:	230b      	movs	r3, #11
 80082de:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80082e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80082ea:	e050      	b.n	800838e <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80082ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082ee:	2b7f      	cmp	r3, #127	; 0x7f
 80082f0:	d914      	bls.n	800831c <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80082f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fab6 	bl	8009868 <ff_convert>
 80082fc:	4603      	mov	r3, r0
 80082fe:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <create_name+0x238>
 8008306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008308:	3b80      	subs	r3, #128	; 0x80
 800830a:	4a4a      	ldr	r2, [pc, #296]	; (8008434 <create_name+0x35c>)
 800830c:	5cd3      	ldrb	r3, [r2, r3]
 800830e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008314:	f043 0302 	orr.w	r3, r3, #2
 8008318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800831c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <create_name+0x25a>
 8008322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008324:	4619      	mov	r1, r3
 8008326:	4844      	ldr	r0, [pc, #272]	; (8008438 <create_name+0x360>)
 8008328:	f7fe fafa 	bl	8006920 <chk_chr>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d008      	beq.n	8008344 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008332:	235f      	movs	r3, #95	; 0x5f
 8008334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800833a:	f043 0303 	orr.w	r3, r3, #3
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008342:	e01b      	b.n	800837c <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	d909      	bls.n	800835e <create_name+0x286>
 800834a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800834c:	2b5a      	cmp	r3, #90	; 0x5a
 800834e:	d806      	bhi.n	800835e <create_name+0x286>
					b |= 2;
 8008350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008354:	f043 0302 	orr.w	r3, r3, #2
 8008358:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800835c:	e00e      	b.n	800837c <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800835e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008360:	2b60      	cmp	r3, #96	; 0x60
 8008362:	d90b      	bls.n	800837c <create_name+0x2a4>
 8008364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008366:	2b7a      	cmp	r3, #122	; 0x7a
 8008368:	d808      	bhi.n	800837c <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800836a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800836e:	f043 0301 	orr.w	r3, r3, #1
 8008372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008378:	3b20      	subs	r3, #32
 800837a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699a      	ldr	r2, [r3, #24]
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	1c59      	adds	r1, r3, #1
 8008384:	6239      	str	r1, [r7, #32]
 8008386:	4413      	add	r3, r2
 8008388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800838e:	e764      	b.n	800825a <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 8008390:	bf00      	nop
 8008392:	e000      	b.n	8008396 <create_name+0x2be>
			if (si > di) break;			/* No extension */
 8008394:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2be5      	cmp	r3, #229	; 0xe5
 800839e:	d103      	bne.n	80083a8 <create_name+0x2d0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2205      	movs	r2, #5
 80083a6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	2b08      	cmp	r3, #8
 80083ac:	d104      	bne.n	80083b8 <create_name+0x2e0>
 80083ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80083b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083bc:	f003 030c 	and.w	r3, r3, #12
 80083c0:	2b0c      	cmp	r3, #12
 80083c2:	d005      	beq.n	80083d0 <create_name+0x2f8>
 80083c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d105      	bne.n	80083dc <create_name+0x304>
		cf |= NS_LFN;
 80083d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d4:	f043 0302 	orr.w	r3, r3, #2
 80083d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80083dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d117      	bne.n	8008418 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80083e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083ec:	f003 0303 	and.w	r3, r3, #3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d105      	bne.n	8008400 <create_name+0x328>
 80083f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f8:	f043 0310 	orr.w	r3, r3, #16
 80083fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008404:	f003 030c 	and.w	r3, r3, #12
 8008408:	2b04      	cmp	r3, #4
 800840a:	d105      	bne.n	8008418 <create_name+0x340>
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008410:	f043 0308 	orr.w	r3, r3, #8
 8008414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	330b      	adds	r3, #11
 800841e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008422:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008424:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008426:	4618      	mov	r0, r3
 8008428:	3728      	adds	r7, #40	; 0x28
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	0800a294 	.word	0x0800a294
 8008434:	0800a2f4 	.word	0x0800a2f4
 8008438:	0800a2a0 	.word	0x0800a2a0

0800843c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b2f      	cmp	r3, #47	; 0x2f
 800844c:	d003      	beq.n	8008456 <follow_path+0x1a>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b5c      	cmp	r3, #92	; 0x5c
 8008454:	d102      	bne.n	800845c <follow_path+0x20>
		path++;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	3301      	adds	r3, #1
 800845a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b1f      	cmp	r3, #31
 8008468:	d809      	bhi.n	800847e <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800846a:	2100      	movs	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff f8c0 	bl	80075f2 <dir_sdi>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	615a      	str	r2, [r3, #20]
 800847c:	e041      	b.n	8008502 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800847e:	463b      	mov	r3, r7
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fe28 	bl	80080d8 <create_name>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d132      	bne.n	80084f8 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fc72 	bl	8007d7c <dir_find>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	7adb      	ldrb	r3, [r3, #11]
 80084a2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d125      	bne.n	80084fc <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d120      	bne.n	80084fc <follow_path+0xc0>
 80084ba:	2305      	movs	r3, #5
 80084bc:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80084be:	e01d      	b.n	80084fc <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d11a      	bne.n	8008500 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	330b      	adds	r3, #11
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f003 0310 	and.w	r3, r3, #16
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 80084de:	2305      	movs	r3, #5
 80084e0:	73fb      	strb	r3, [r7, #15]
 80084e2:	e00e      	b.n	8008502 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fa60 	bl	80079b0 <ld_clust>
 80084f0:	4602      	mov	r2, r0
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80084f6:	e7c2      	b.n	800847e <follow_path+0x42>
			if (res != FR_OK) break;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <follow_path+0xc6>
				break;
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008500:	bf00      	nop
		}
	}

	return res;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d031      	beq.n	8008586 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e002      	b.n	8008530 <get_ldnumber+0x24>
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	3301      	adds	r3, #1
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b1f      	cmp	r3, #31
 8008536:	d903      	bls.n	8008540 <get_ldnumber+0x34>
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b3a      	cmp	r3, #58	; 0x3a
 800853e:	d1f4      	bne.n	800852a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b3a      	cmp	r3, #58	; 0x3a
 8008546:	d11c      	bne.n	8008582 <get_ldnumber+0x76>
			tp = *path;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	60fa      	str	r2, [r7, #12]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	3b30      	subs	r3, #48	; 0x30
 8008558:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b09      	cmp	r3, #9
 800855e:	d80e      	bhi.n	800857e <get_ldnumber+0x72>
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	429a      	cmp	r2, r3
 8008566:	d10a      	bne.n	800857e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d107      	bne.n	800857e <get_ldnumber+0x72>
					vol = (int)i;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	3301      	adds	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	e002      	b.n	8008588 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008582:	2300      	movs	r3, #0
 8008584:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008586:	693b      	ldr	r3, [r7, #16]
}
 8008588:	4618      	mov	r0, r3
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	bc80      	pop	{r7}
 8008590:	4770      	bx	lr
	...

08008594 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe fbc3 	bl	8006d3e <move_window>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <check_fs+0x2e>
		return 3;
 80085be:	2303      	movs	r3, #3
 80085c0:	e04a      	b.n	8008658 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085c8:	3301      	adds	r3, #1
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	b21a      	sxth	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80085d6:	b21b      	sxth	r3, r3
 80085d8:	4313      	orrs	r3, r2
 80085da:	b21b      	sxth	r3, r3
 80085dc:	4a20      	ldr	r2, [pc, #128]	; (8008660 <check_fs+0xcc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d001      	beq.n	80085e6 <check_fs+0x52>
		return 2;
 80085e2:	2302      	movs	r3, #2
 80085e4:	e038      	b.n	8008658 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3336      	adds	r3, #54	; 0x36
 80085ea:	3303      	adds	r3, #3
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	061a      	lsls	r2, r3, #24
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3336      	adds	r3, #54	; 0x36
 80085f4:	3302      	adds	r3, #2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	4313      	orrs	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	3236      	adds	r2, #54	; 0x36
 8008600:	3201      	adds	r2, #1
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	0212      	lsls	r2, r2, #8
 8008606:	4313      	orrs	r3, r2
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800860e:	4313      	orrs	r3, r2
 8008610:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008614:	4a13      	ldr	r2, [pc, #76]	; (8008664 <check_fs+0xd0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d101      	bne.n	800861e <check_fs+0x8a>
		return 0;
 800861a:	2300      	movs	r3, #0
 800861c:	e01c      	b.n	8008658 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3352      	adds	r3, #82	; 0x52
 8008622:	3303      	adds	r3, #3
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	061a      	lsls	r2, r3, #24
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3352      	adds	r3, #82	; 0x52
 800862c:	3302      	adds	r3, #2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	4313      	orrs	r3, r2
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	3252      	adds	r2, #82	; 0x52
 8008638:	3201      	adds	r2, #1
 800863a:	7812      	ldrb	r2, [r2, #0]
 800863c:	0212      	lsls	r2, r2, #8
 800863e:	4313      	orrs	r3, r2
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008646:	4313      	orrs	r3, r2
 8008648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800864c:	4a05      	ldr	r2, [pc, #20]	; (8008664 <check_fs+0xd0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <check_fs+0xc2>
		return 0;
 8008652:	2300      	movs	r3, #0
 8008654:	e000      	b.n	8008658 <check_fs+0xc4>

	return 1;
 8008656:	2301      	movs	r3, #1
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	ffffaa55 	.word	0xffffaa55
 8008664:	00544146 	.word	0x00544146

08008668 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b096      	sub	sp, #88	; 0x58
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800867c:	68b8      	ldr	r0, [r7, #8]
 800867e:	f7ff ff45 	bl	800850c <get_ldnumber>
 8008682:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008686:	2b00      	cmp	r3, #0
 8008688:	da01      	bge.n	800868e <find_volume+0x26>
 800868a:	230b      	movs	r3, #11
 800868c:	e2de      	b.n	8008c4c <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800868e:	4ab1      	ldr	r2, [pc, #708]	; (8008954 <find_volume+0x2ec>)
 8008690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008696:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <find_volume+0x3a>
 800869e:	230c      	movs	r3, #12
 80086a0:	e2d4      	b.n	8008c4c <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01b      	beq.n	80086ea <find_volume+0x82>
		stat = disk_status(fs->drv);
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f835 	bl	8006728 <disk_status>
 80086be:	4603      	mov	r3, r0
 80086c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80086c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10c      	bne.n	80086ea <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <find_volume+0x7e>
 80086d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80086e2:	230a      	movs	r3, #10
 80086e4:	e2b2      	b.n	8008c4c <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 80086e6:	2300      	movs	r3, #0
 80086e8:	e2b0      	b.n	8008c4c <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe f82a 	bl	800675c <disk_initialize>
 8008708:	4603      	mov	r3, r0
 800870a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800870e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800871a:	2303      	movs	r3, #3
 800871c:	e296      	b.n	8008c4c <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <find_volume+0xcc>
 8008724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8008730:	230a      	movs	r3, #10
 8008732:	e28b      	b.n	8008c4c <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8008740:	461a      	mov	r2, r3
 8008742:	2102      	movs	r1, #2
 8008744:	f7fe f870 	bl	8006828 <disk_ioctl>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008758:	d305      	bcc.n	8008766 <find_volume+0xfe>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008764:	d901      	bls.n	800876a <find_volume+0x102>
 8008766:	2301      	movs	r3, #1
 8008768:	e270      	b.n	8008c4c <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800876e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008772:	f7ff ff0f 	bl	8008594 <check_fs>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800877c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008780:	2b01      	cmp	r3, #1
 8008782:	d155      	bne.n	8008830 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008784:	2300      	movs	r3, #0
 8008786:	643b      	str	r3, [r7, #64]	; 0x40
 8008788:	e029      	b.n	80087de <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800878a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008794:	4413      	add	r3, r2
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	3304      	adds	r3, #4
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d012      	beq.n	80087c8 <find_volume+0x160>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	330b      	adds	r3, #11
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	061a      	lsls	r2, r3, #24
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	330a      	adds	r3, #10
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	041b      	lsls	r3, r3, #16
 80087b2:	4313      	orrs	r3, r2
 80087b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b6:	3209      	adds	r2, #9
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	0212      	lsls	r2, r2, #8
 80087bc:	4313      	orrs	r3, r2
 80087be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c0:	3208      	adds	r2, #8
 80087c2:	7812      	ldrb	r2, [r2, #0]
 80087c4:	431a      	orrs	r2, r3
 80087c6:	e000      	b.n	80087ca <find_volume+0x162>
 80087c8:	2200      	movs	r2, #0
 80087ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80087d2:	440b      	add	r3, r1
 80087d4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80087d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087da:	3301      	adds	r3, #1
 80087dc:	643b      	str	r3, [r7, #64]	; 0x40
 80087de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d9d2      	bls.n	800878a <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80087e4:	2300      	movs	r3, #0
 80087e6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80087e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <find_volume+0x18c>
 80087ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f0:	3b01      	subs	r3, #1
 80087f2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80087f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80087fc:	4413      	add	r3, r2
 80087fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008802:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <find_volume+0x1ae>
 800880a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800880c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800880e:	f7ff fec1 	bl	8008594 <check_fs>
 8008812:	4603      	mov	r3, r0
 8008814:	e000      	b.n	8008818 <find_volume+0x1b0>
 8008816:	2302      	movs	r3, #2
 8008818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800881c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <find_volume+0x1c8>
 8008824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008826:	3301      	adds	r3, #1
 8008828:	643b      	str	r3, [r7, #64]	; 0x40
 800882a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882c:	2b03      	cmp	r3, #3
 800882e:	d9e1      	bls.n	80087f4 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008834:	2b03      	cmp	r3, #3
 8008836:	d101      	bne.n	800883c <find_volume+0x1d4>
 8008838:	2301      	movs	r3, #1
 800883a:	e207      	b.n	8008c4c <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800883c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <find_volume+0x1e0>
 8008844:	230d      	movs	r3, #13
 8008846:	e201      	b.n	8008c4c <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	7b1b      	ldrb	r3, [r3, #12]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	b21a      	sxth	r2, r3
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	7adb      	ldrb	r3, [r3, #11]
 8008854:	b21b      	sxth	r3, r3
 8008856:	4313      	orrs	r3, r2
 8008858:	b21a      	sxth	r2, r3
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008860:	b21b      	sxth	r3, r3
 8008862:	429a      	cmp	r2, r3
 8008864:	d001      	beq.n	800886a <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 8008866:	230d      	movs	r3, #13
 8008868:	e1f0      	b.n	8008c4c <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	7ddb      	ldrb	r3, [r3, #23]
 800886e:	021b      	lsls	r3, r3, #8
 8008870:	b21a      	sxth	r2, r3
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	7d9b      	ldrb	r3, [r3, #22]
 8008876:	b21b      	sxth	r3, r3
 8008878:	4313      	orrs	r3, r2
 800887a:	b21b      	sxth	r3, r3
 800887c:	b29b      	uxth	r3, r3
 800887e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d112      	bne.n	80088ac <find_volume+0x244>
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800888c:	061a      	lsls	r2, r3, #24
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	4313      	orrs	r3, r2
 8008898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800889e:	0212      	lsls	r2, r2, #8
 80088a0:	4313      	orrs	r3, r2
 80088a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088a4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80088a8:	4313      	orrs	r3, r2
 80088aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088b0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	7c1a      	ldrb	r2, [r3, #16]
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d006      	beq.n	80088d6 <find_volume+0x26e>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d001      	beq.n	80088d6 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 80088d2:	230d      	movs	r3, #13
 80088d4:	e1ba      	b.n	8008c4c <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80088dc:	461a      	mov	r2, r3
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	fb02 f303 	mul.w	r3, r2, r3
 80088e4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	7b5a      	ldrb	r2, [r3, #13]
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <find_volume+0x2a8>
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008900:	461a      	mov	r2, r3
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008908:	3b01      	subs	r3, #1
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 8008910:	230d      	movs	r3, #13
 8008912:	e19b      	b.n	8008c4c <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	7c9b      	ldrb	r3, [r3, #18]
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	b21a      	sxth	r2, r3
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	7c5b      	ldrb	r3, [r3, #17]
 8008920:	b21b      	sxth	r3, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	b21b      	sxth	r3, r3
 8008926:	b29a      	uxth	r2, r3
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008936:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800893a:	0952      	lsrs	r2, r2, #5
 800893c:	b292      	uxth	r2, r2
 800893e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008942:	fb02 f201 	mul.w	r2, r2, r1
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800894e:	230d      	movs	r3, #13
 8008950:	e17c      	b.n	8008c4c <find_volume+0x5e4>
 8008952:	bf00      	nop
 8008954:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	7d1b      	ldrb	r3, [r3, #20]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	b21a      	sxth	r2, r3
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	7cdb      	ldrb	r3, [r3, #19]
 8008964:	b21b      	sxth	r3, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	b21b      	sxth	r3, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800896e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008970:	2b00      	cmp	r3, #0
 8008972:	d112      	bne.n	800899a <find_volume+0x332>
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800897a:	061a      	lsls	r2, r3, #24
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	4313      	orrs	r3, r2
 8008986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008988:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800898c:	0212      	lsls	r2, r2, #8
 800898e:	4313      	orrs	r3, r2
 8008990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008992:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008996:	4313      	orrs	r3, r2
 8008998:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	7bdb      	ldrb	r3, [r3, #15]
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b21a      	sxth	r2, r3
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	7b9b      	ldrb	r3, [r3, #14]
 80089a6:	b21b      	sxth	r3, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80089ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <find_volume+0x350>
 80089b4:	230d      	movs	r3, #13
 80089b6:	e149      	b.n	8008c4c <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80089b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80089ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089bc:	4413      	add	r3, r2
 80089be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089c0:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 80089c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089c6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80089ca:	0952      	lsrs	r2, r2, #5
 80089cc:	b292      	uxth	r2, r2
 80089ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80089d2:	b292      	uxth	r2, r2
 80089d4:	4413      	add	r3, r2
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80089d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	429a      	cmp	r2, r3
 80089de:	d201      	bcs.n	80089e4 <find_volume+0x37c>
 80089e0:	230d      	movs	r3, #13
 80089e2:	e133      	b.n	8008c4c <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80089e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ec:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80089f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <find_volume+0x398>
 80089fc:	230d      	movs	r3, #13
 80089fe:	e125      	b.n	8008c4c <find_volume+0x5e4>
	fmt = FS_FAT12;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d902      	bls.n	8008a16 <find_volume+0x3ae>
 8008a10:	2302      	movs	r3, #2
 8008a12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d902      	bls.n	8008a26 <find_volume+0x3be>
 8008a20:	2303      	movs	r3, #3
 8008a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	1c9a      	adds	r2, r3, #2
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a34:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3c:	441a      	add	r2, r3
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8008a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	441a      	add	r2, r3
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8008a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d121      	bne.n	8008a9c <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <find_volume+0x3fe>
 8008a62:	230d      	movs	r3, #13
 8008a64:	e0f2      	b.n	8008c4c <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a6c:	061a      	lsls	r2, r3, #24
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008a74:	041b      	lsls	r3, r3, #16
 8008a76:	4313      	orrs	r3, r2
 8008a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a7a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008a7e:	0212      	lsls	r2, r2, #8
 8008a80:	4313      	orrs	r3, r2
 8008a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a84:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
 8008a9a:	e025      	b.n	8008ae8 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <find_volume+0x442>
 8008aa6:	230d      	movs	r3, #13
 8008aa8:	e0d0      	b.n	8008c4c <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab2:	441a      	add	r2, r3
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d104      	bne.n	8008acc <find_volume+0x464>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	e00c      	b.n	8008ae6 <find_volume+0x47e>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	085a      	lsrs	r2, r3, #1
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008ae6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008af4:	4619      	mov	r1, r3
 8008af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af8:	440b      	add	r3, r1
 8008afa:	3b01      	subs	r3, #1
 8008afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008afe:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8008b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d201      	bcs.n	8008b0e <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8008b0a:	230d      	movs	r3, #13
 8008b0c:	e09e      	b.n	8008c4c <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295
 8008b14:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	2280      	movs	r2, #128	; 0x80
 8008b28:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d177      	bne.n	8008c24 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	b21a      	sxth	r2, r3
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b44:	b21b      	sxth	r3, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d16a      	bne.n	8008c24 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b50:	3301      	adds	r3, #1
 8008b52:	4619      	mov	r1, r3
 8008b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b56:	f7fe f8f2 	bl	8006d3e <move_window>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d161      	bne.n	8008c24 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	b21a      	sxth	r2, r3
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	4a35      	ldr	r2, [pc, #212]	; (8008c54 <find_volume+0x5ec>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d14f      	bne.n	8008c24 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	78db      	ldrb	r3, [r3, #3]
 8008b88:	061a      	lsls	r2, r3, #24
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	789b      	ldrb	r3, [r3, #2]
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	4313      	orrs	r3, r2
 8008b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b94:	7852      	ldrb	r2, [r2, #1]
 8008b96:	0212      	lsls	r2, r2, #8
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9c:	7812      	ldrb	r2, [r2, #0]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	4a2d      	ldr	r2, [pc, #180]	; (8008c58 <find_volume+0x5f0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d13e      	bne.n	8008c24 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008bac:	061a      	lsls	r2, r3, #24
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bba:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008bbe:	0212      	lsls	r2, r2, #8
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bc4:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	4a24      	ldr	r2, [pc, #144]	; (8008c5c <find_volume+0x5f4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d129      	bne.n	8008c24 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008bd6:	061a      	lsls	r2, r3, #24
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008bde:	041b      	lsls	r3, r3, #16
 8008be0:	4313      	orrs	r3, r2
 8008be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008be4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008be8:	0212      	lsls	r2, r2, #8
 8008bea:	4313      	orrs	r3, r2
 8008bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bee:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008c00:	061a      	lsls	r2, r3, #24
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c0e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008c12:	0212      	lsls	r2, r2, #8
 8008c14:	4313      	orrs	r3, r2
 8008c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c18:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008c2a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	; (8008c60 <find_volume+0x5f8>)
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <find_volume+0x5f8>)
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <find_volume+0x5f8>)
 8008c3c:	881a      	ldrh	r2, [r3, #0]
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008c44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c46:	f7fe f807 	bl	8006c58 <clear_lock>
#endif

	return FR_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3758      	adds	r7, #88	; 0x58
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	ffffaa55 	.word	0xffffaa55
 8008c58:	41615252 	.word	0x41615252
 8008c5c:	61417272 	.word	0x61417272
 8008c60:	200000b0 	.word	0x200000b0

08008c64 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d01d      	beq.n	8008cb2 <validate+0x4e>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d019      	beq.n	8008cb2 <validate+0x4e>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d013      	beq.n	8008cb2 <validate+0x4e>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	889b      	ldrh	r3, [r3, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d10b      	bne.n	8008cb2 <validate+0x4e>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fd40 	bl	8006728 <disk_status>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <validate+0x52>
		return FR_INVALID_OBJECT;
 8008cb2:	2309      	movs	r3, #9
 8008cb4:	e000      	b.n	8008cb8 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008cd2:	f107 0310 	add.w	r3, r7, #16
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fc18 	bl	800850c <get_ldnumber>
 8008cdc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da01      	bge.n	8008ce8 <f_mount+0x28>
 8008ce4:	230b      	movs	r3, #11
 8008ce6:	e02d      	b.n	8008d44 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ce8:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <f_mount+0x8c>)
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d006      	beq.n	8008d06 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8008cf8:	69b8      	ldr	r0, [r7, #24]
 8008cfa:	f7fd ffad 	bl	8006c58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	490d      	ldr	r1, [pc, #52]	; (8008d4c <f_mount+0x8c>)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <f_mount+0x6a>
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d001      	beq.n	8008d2e <f_mount+0x6e>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e00a      	b.n	8008d44 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008d2e:	f107 0108 	add.w	r1, r7, #8
 8008d32:	f107 030c 	add.w	r3, r7, #12
 8008d36:	2200      	movs	r2, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fc95 	bl	8008668 <find_volume>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200000ac 	.word	0x200000ac

08008d50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b096      	sub	sp, #88	; 0x58
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <f_open+0x18>
 8008d64:	2309      	movs	r3, #9
 8008d66:	e16d      	b.n	8009044 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	f003 031f 	and.w	r3, r3, #31
 8008d74:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	f107 0108 	add.w	r1, r7, #8
 8008d82:	f107 0320 	add.w	r3, r7, #32
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff fc6e 	bl	8008668 <find_volume>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008d92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f040 8152 	bne.w	8009040 <f_open+0x2f0>
		INIT_BUF(dj);
 8008d9c:	f107 0314 	add.w	r3, r7, #20
 8008da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008da2:	4baa      	ldr	r3, [pc, #680]	; (800904c <f_open+0x2fc>)
 8008da4:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	f107 0320 	add.w	r3, r7, #32
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fb44 	bl	800843c <follow_path>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008dbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d118      	bne.n	8008df8 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 8008dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <f_open+0x84>
				res = FR_INVALID_NAME;
 8008dcc:	2306      	movs	r3, #6
 8008dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008dd2:	e011      	b.n	8008df8 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	f023 0301 	bic.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bf14      	ite	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	2300      	moveq	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	f107 0320 	add.w	r3, r7, #32
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fd fdb1 	bl	8006954 <chk_lock>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	f003 031c 	and.w	r3, r3, #28
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 809a 	beq.w	8008f38 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 8008e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d019      	beq.n	8008e40 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d10e      	bne.n	8008e32 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008e14:	f7fd fe08 	bl	8006a28 <enq_lock>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d006      	beq.n	8008e2c <f_open+0xdc>
 8008e1e:	f107 0320 	add.w	r3, r7, #32
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff f85e 	bl	8007ee4 <dir_register>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	e000      	b.n	8008e2e <f_open+0xde>
 8008e2c:	2312      	movs	r3, #18
 8008e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	f043 0308 	orr.w	r3, r3, #8
 8008e38:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8008e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e3e:	e012      	b.n	8008e66 <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e42:	330b      	adds	r3, #11
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 0311 	and.w	r3, r3, #17
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <f_open+0x106>
					res = FR_DENIED;
 8008e4e:	2307      	movs	r3, #7
 8008e50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008e54:	e007      	b.n	8008e66 <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <f_open+0x116>
						res = FR_EXIST;
 8008e60:	2308      	movs	r3, #8
 8008e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 8082 	bne.w	8008f74 <f_open+0x224>
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	f003 0308 	and.w	r3, r3, #8
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d07c      	beq.n	8008f74 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 8008e7a:	f7fd fbef 	bl	800665c <get_fattime>
 8008e7e:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e82:	330e      	adds	r3, #14
 8008e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e94:	330f      	adds	r3, #15
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9c:	0c1a      	lsrs	r2, r3, #16
 8008e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea0:	3310      	adds	r3, #16
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea8:	0e1a      	lsrs	r2, r3, #24
 8008eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eac:	3311      	adds	r3, #17
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb4:	330b      	adds	r3, #11
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ebc:	331c      	adds	r3, #28
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ec4:	331d      	adds	r3, #29
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ecc:	331e      	adds	r3, #30
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed4:	331f      	adds	r3, #31
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fd66 	bl	80079b0 <ld_clust>
 8008ee4:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008eea:	f7fe fd8e 	bl	8007a0a <st_clust>
				dj.fs->wflag = 1;
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8008ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d03b      	beq.n	8008f74 <f_open+0x224>
					dw = dj.fs->winsect;
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8008f02:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe fa43 	bl	8007394 <remove_chain>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 8008f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d12b      	bne.n	8008f74 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f20:	3a01      	subs	r2, #1
 8008f22:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd ff07 	bl	8006d3e <move_window>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008f36:	e01d      	b.n	8008f74 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d119      	bne.n	8008f74 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f42:	330b      	adds	r3, #11
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	f003 0310 	and.w	r3, r3, #16
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <f_open+0x206>
					res = FR_NO_FILE;
 8008f4e:	2304      	movs	r3, #4
 8008f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008f54:	e00e      	b.n	8008f74 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d009      	beq.n	8008f74 <f_open+0x224>
 8008f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f62:	330b      	adds	r3, #11
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <f_open+0x224>
						res = FR_DENIED;
 8008f6e:	2307      	movs	r3, #7
 8008f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8008f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d129      	bne.n	8008fd0 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <f_open+0x23e>
				mode |= FA__WRITTEN;
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	f043 0320 	orr.w	r3, r3, #32
 8008f8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f9c:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bf14      	ite	ne
 8008fa8:	2301      	movne	r3, #1
 8008faa:	2300      	moveq	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f107 0320 	add.w	r3, r7, #32
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fd fd5a 	bl	8006a70 <inc_lock>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <f_open+0x280>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d133      	bne.n	8009040 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	79fa      	ldrb	r2, [r7, #7]
 8008fdc:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fce1 	bl	80079b0 <ld_clust>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff6:	331f      	adds	r3, #31
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	061a      	lsls	r2, r3, #24
 8008ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ffe:	331e      	adds	r3, #30
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	041b      	lsls	r3, r3, #16
 8009004:	4313      	orrs	r3, r2
 8009006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009008:	321d      	adds	r2, #29
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	0212      	lsls	r2, r2, #8
 800900e:	4313      	orrs	r3, r2
 8009010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009012:	321c      	adds	r2, #28
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	431a      	orrs	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800902e:	6a3a      	ldr	r2, [r7, #32]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8009044:	4618      	mov	r0, r3
 8009046:	3758      	adds	r7, #88	; 0x58
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	200000cc 	.word	0x200000cc

08009050 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	; 0x30
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7ff fdfb 	bl	8008c64 <validate>
 800906e:	4603      	mov	r3, r0
 8009070:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009072:	7ffb      	ldrb	r3, [r7, #31]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <f_read+0x2c>
 8009078:	7ffb      	ldrb	r3, [r7, #31]
 800907a:	e13a      	b.n	80092f2 <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	79db      	ldrb	r3, [r3, #7]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	79db      	ldrb	r3, [r3, #7]
 8009088:	e133      	b.n	80092f2 <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	799b      	ldrb	r3, [r3, #6]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009096:	2307      	movs	r3, #7
 8009098:	e12b      	b.n	80092f2 <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	f240 811c 	bls.w	80092e8 <f_read+0x298>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80090b4:	e118      	b.n	80092e8 <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80090c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80090c6:	fb02 f201 	mul.w	r2, r2, r1
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f040 80bc 	bne.w	800924a <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80090de:	fbb3 f3f2 	udiv	r3, r3, r2
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	4013      	ands	r3, r2
 80090f2:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d130      	bne.n	800915c <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009108:	e014      	b.n	8009134 <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	4619      	mov	r1, r3
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7fe fa32 	bl	8007582 <clmt_clust>
 800911e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009120:	e008      	b.n	8009134 <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f7fd ff03 	bl	8006f38 <get_fat>
 8009132:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	2b01      	cmp	r3, #1
 8009138:	d804      	bhi.n	8009144 <f_read+0xf4>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2202      	movs	r2, #2
 800913e:	71da      	strb	r2, [r3, #7]
 8009140:	2302      	movs	r3, #2
 8009142:	e0d6      	b.n	80092f2 <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d104      	bne.n	8009156 <f_read+0x106>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	71da      	strb	r2, [r3, #7]
 8009152:	2301      	movs	r3, #1
 8009154:	e0cd      	b.n	80092f2 <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800915a:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f7fd fec5 	bl	8006ef6 <clust2sect>
 800916c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d104      	bne.n	800917e <f_read+0x12e>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2202      	movs	r2, #2
 8009178:	71da      	strb	r2, [r3, #7]
 800917a:	2302      	movs	r3, #2
 800917c:	e0b9      	b.n	80092f2 <f_read+0x2a2>
			sect += csect;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4413      	add	r3, r2
 8009184:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	fbb3 f3f2 	udiv	r3, r3, r2
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d052      	beq.n	8009244 <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800919e:	7dfa      	ldrb	r2, [r7, #23]
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	4413      	add	r3, r2
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d907      	bls.n	80091c0 <f_read+0x170>
					cc = fp->fs->csize - csect;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80091b8:	461a      	mov	r2, r3
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	6a39      	ldr	r1, [r7, #32]
 80091ce:	f7fd faeb 	bl	80067a8 <disk_read>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d004      	beq.n	80091e2 <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	71da      	strb	r2, [r3, #7]
 80091de:	2301      	movs	r3, #1
 80091e0:	e087      	b.n	80092f2 <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d020      	beq.n	8009230 <f_read+0x1e0>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d917      	bls.n	8009230 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009214:	fb02 f303 	mul.w	r3, r2, r3
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	18d0      	adds	r0, r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4619      	mov	r1, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800922a:	461a      	mov	r2, r3
 800922c:	f7fd fb1a 	bl	8006864 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009238:	461a      	mov	r2, r3
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8009242:	e03d      	b.n	80092c0 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009252:	4618      	mov	r0, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	6812      	ldr	r2, [r2, #0]
 800925c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009260:	fbb3 f1f2 	udiv	r1, r3, r2
 8009264:	fb02 f201 	mul.w	r2, r2, r1
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	1ac3      	subs	r3, r0, r3
 800926c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800926e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d901      	bls.n	800927a <f_read+0x22a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	4619      	mov	r1, r3
 8009284:	4610      	mov	r0, r2
 8009286:	f7fd fd5a 	bl	8006d3e <move_window>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d004      	beq.n	800929a <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	71da      	strb	r2, [r3, #7]
 8009296:	2301      	movs	r3, #1
 8009298:	e02b      	b.n	80092f2 <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6819      	ldr	r1, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	6812      	ldr	r2, [r2, #0]
 80092a6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80092aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80092ae:	fb02 f200 	mul.w	r2, r2, r0
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	440b      	add	r3, r1
 80092b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092b8:	4619      	mov	r1, r3
 80092ba:	6a38      	ldr	r0, [r7, #32]
 80092bc:	f7fd fad2 	bl	8006864 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80092c0:	6a3a      	ldr	r2, [r7, #32]
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	4413      	add	r3, r2
 80092c6:	623b      	str	r3, [r7, #32]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	441a      	add	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	609a      	str	r2, [r3, #8]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	441a      	add	r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f47f aee3 	bne.w	80090b6 <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3730      	adds	r7, #48	; 0x30
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b08a      	sub	sp, #40	; 0x28
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
 8009306:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fca6 	bl	8008c64 <validate>
 8009318:	4603      	mov	r3, r0
 800931a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <f_write+0x2c>
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	e191      	b.n	800964a <f_write+0x350>
	if (fp->err)							/* Check error */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	79db      	ldrb	r3, [r3, #7]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	79db      	ldrb	r3, [r3, #7]
 8009332:	e18a      	b.n	800964a <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	799b      	ldrb	r3, [r3, #6]
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009340:	2307      	movs	r3, #7
 8009342:	e182      	b.n	800964a <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	441a      	add	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	429a      	cmp	r2, r3
 8009352:	f080 8162 	bcs.w	800961a <f_write+0x320>
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800935a:	e15e      	b.n	800961a <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	6812      	ldr	r2, [r2, #0]
 8009364:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009368:	fbb3 f1f2 	udiv	r1, r3, r2
 800936c:	fb02 f201 	mul.w	r2, r2, r1
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	2b00      	cmp	r3, #0
 8009374:	f040 80fd 	bne.w	8009572 <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009384:	fbb3 f3f2 	udiv	r3, r3, r2
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009392:	3b01      	subs	r3, #1
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4013      	ands	r3, r2
 8009398:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800939a:	7dbb      	ldrb	r3, [r7, #22]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d145      	bne.n	800942c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10d      	bne.n	80093c4 <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d11c      	bne.n	80093ee <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe f844 	bl	8007448 <create_chain>
 80093c0:	6278      	str	r0, [r7, #36]	; 0x24
 80093c2:	e014      	b.n	80093ee <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d007      	beq.n	80093dc <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	4619      	mov	r1, r3
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7fe f8d5 	bl	8007582 <clmt_clust>
 80093d8:	6278      	str	r0, [r7, #36]	; 0x24
 80093da:	e008      	b.n	80093ee <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	4619      	mov	r1, r3
 80093e6:	4610      	mov	r0, r2
 80093e8:	f7fe f82e 	bl	8007448 <create_chain>
 80093ec:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8117 	beq.w	8009624 <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d104      	bne.n	8009406 <f_write+0x10c>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2202      	movs	r2, #2
 8009400:	71da      	strb	r2, [r3, #7]
 8009402:	2302      	movs	r3, #2
 8009404:	e121      	b.n	800964a <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d104      	bne.n	8009418 <f_write+0x11e>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	71da      	strb	r2, [r3, #7]
 8009414:	2301      	movs	r3, #1
 8009416:	e118      	b.n	800964a <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <f_write+0x132>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	429a      	cmp	r2, r3
 800943a:	d10c      	bne.n	8009456 <f_write+0x15c>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f7fd fc33 	bl	8006cac <sync_window>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	71da      	strb	r2, [r3, #7]
 8009452:	2301      	movs	r3, #1
 8009454:	e0f9      	b.n	800964a <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	4619      	mov	r1, r3
 8009460:	4610      	mov	r0, r2
 8009462:	f7fd fd48 	bl	8006ef6 <clust2sect>
 8009466:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <f_write+0x17e>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2202      	movs	r2, #2
 8009472:	71da      	strb	r2, [r3, #7]
 8009474:	2302      	movs	r3, #2
 8009476:	e0e8      	b.n	800964a <f_write+0x350>
			sect += csect;
 8009478:	7dbb      	ldrb	r3, [r7, #22]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	4413      	add	r3, r2
 800947e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009488:	461a      	mov	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009490:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d051      	beq.n	800953c <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009498:	7dba      	ldrb	r2, [r7, #22]
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d907      	bls.n	80094ba <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80094b2:	461a      	mov	r2, r3
 80094b4:	7dbb      	ldrb	r3, [r7, #22]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	69b9      	ldr	r1, [r7, #24]
 80094c8:	f7fd f98e 	bl	80067e8 <disk_write>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d004      	beq.n	80094dc <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	71da      	strb	r2, [r3, #7]
 80094d8:	2301      	movs	r3, #1
 80094da:	e0b6      	b.n	800964a <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d91c      	bls.n	8009528 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	6812      	ldr	r2, [r2, #0]
 8009504:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009508:	fb02 f303 	mul.w	r3, r2, r3
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	18d1      	adds	r1, r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009518:	461a      	mov	r2, r3
 800951a:	f7fd f9a3 	bl	8006864 <mem_cpy>
					fp->fs->wflag = 0;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009530:	461a      	mov	r2, r3
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	fb02 f303 	mul.w	r3, r2, r3
 8009538:	623b      	str	r3, [r7, #32]
				continue;
 800953a:	e05a      	b.n	80095f2 <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	429a      	cmp	r2, r3
 8009546:	d311      	bcc.n	800956c <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f7fd fbad 	bl	8006cac <sync_window>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <f_write+0x268>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	71da      	strb	r2, [r3, #7]
 800955e:	2301      	movs	r3, #1
 8009560:	e073      	b.n	800964a <f_write+0x350>
				fp->fs->winsect = sect;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800957a:	4618      	mov	r0, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009588:	fbb3 f1f2 	udiv	r1, r3, r2
 800958c:	fb02 f201 	mul.w	r2, r2, r1
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	1ac3      	subs	r3, r0, r3
 8009594:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009596:	6a3a      	ldr	r2, [r7, #32]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d901      	bls.n	80095a2 <f_write+0x2a8>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f7fd fbc6 	bl	8006d3e <move_window>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	71da      	strb	r2, [r3, #7]
 80095be:	2301      	movs	r3, #1
 80095c0:	e043      	b.n	800964a <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6819      	ldr	r1, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	6812      	ldr	r2, [r2, #0]
 80095ce:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80095d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80095d6:	fb02 f200 	mul.w	r2, r2, r0
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	440b      	add	r3, r1
 80095de:	6a3a      	ldr	r2, [r7, #32]
 80095e0:	69b9      	ldr	r1, [r7, #24]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fd f93e 	bl	8006864 <mem_cpy>
		fp->fs->wflag = 1;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	4413      	add	r3, r2
 80095f8:	61bb      	str	r3, [r7, #24]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	441a      	add	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	609a      	str	r2, [r3, #8]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	441a      	add	r2, r3
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f47f ae9d 	bne.w	800935c <f_write+0x62>
 8009622:	e000      	b.n	8009626 <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009624:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	429a      	cmp	r2, r3
 8009630:	d903      	bls.n	800963a <f_write+0x340>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	799b      	ldrb	r3, [r3, #6]
 800963e:	f043 0320 	orr.w	r3, r3, #32
 8009642:	b2da      	uxtb	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3728      	adds	r7, #40	; 0x28
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff fb02 	bl	8008c64 <validate>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d178      	bne.n	800975c <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	799b      	ldrb	r3, [r3, #6]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d072      	beq.n	800975c <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	4619      	mov	r1, r3
 8009680:	4610      	mov	r0, r2
 8009682:	f7fd fb5c 	bl	8006d3e <move_window>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d165      	bne.n	800975c <f_sync+0x10a>
				dir = fp->dir_ptr;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	330b      	adds	r3, #11
 800969a:	781a      	ldrb	r2, [r3, #0]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	330b      	adds	r3, #11
 80096a0:	f042 0220 	orr.w	r2, r2, #32
 80096a4:	b2d2      	uxtb	r2, r2
 80096a6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	331c      	adds	r3, #28
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	b29a      	uxth	r2, r3
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	331d      	adds	r3, #29
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	0c1a      	lsrs	r2, r3, #16
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	331e      	adds	r3, #30
 80096d0:	b2d2      	uxtb	r2, r2
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	0e1a      	lsrs	r2, r3, #24
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	331f      	adds	r3, #31
 80096de:	b2d2      	uxtb	r2, r2
 80096e0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6938      	ldr	r0, [r7, #16]
 80096ea:	f7fe f98e 	bl	8007a0a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80096ee:	f7fc ffb5 	bl	800665c <get_fattime>
 80096f2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3316      	adds	r3, #22
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	701a      	strb	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	b29b      	uxth	r3, r3
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	b29a      	uxth	r2, r3
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3317      	adds	r3, #23
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	0c1a      	lsrs	r2, r3, #16
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	3318      	adds	r3, #24
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	0e1a      	lsrs	r2, r3, #24
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3319      	adds	r3, #25
 8009722:	b2d2      	uxtb	r2, r2
 8009724:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	3312      	adds	r3, #18
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3313      	adds	r3, #19
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	799b      	ldrb	r3, [r3, #6]
 800973a:	f023 0320 	bic.w	r3, r3, #32
 800973e:	b2da      	uxtb	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd fb21 	bl	8006d9a <sync_fs>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800975c:	7dfb      	ldrb	r3, [r7, #23]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff ff6f 	bl	8009652 <f_sync>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d114      	bne.n	80097a8 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff fa70 	bl	8008c64 <validate>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10c      	bne.n	80097a8 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009792:	4618      	mov	r0, r3
 8009794:	f7fd fa1c 	bl	8006bd0 <dec_lock>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80097ca:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097cc:	7a5b      	ldrb	r3, [r3, #9]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d831      	bhi.n	8009838 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097d4:	4b1b      	ldr	r3, [pc, #108]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097d6:	7a5b      	ldrb	r3, [r3, #9]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	4b19      	ldr	r3, [pc, #100]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097de:	2100      	movs	r1, #0
 80097e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80097e2:	4b18      	ldr	r3, [pc, #96]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097e4:	7a5b      	ldrb	r3, [r3, #9]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	4a16      	ldr	r2, [pc, #88]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80097f2:	4b14      	ldr	r3, [pc, #80]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097f4:	7a5b      	ldrb	r3, [r3, #9]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	461a      	mov	r2, r3
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 80097fc:	4413      	add	r3, r2
 80097fe:	79fa      	ldrb	r2, [r7, #7]
 8009800:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009802:	4b10      	ldr	r3, [pc, #64]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 8009804:	7a5b      	ldrb	r3, [r3, #9]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	b2d1      	uxtb	r1, r2
 800980c:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <FATFS_LinkDriverEx+0x90>)
 800980e:	7251      	strb	r1, [r2, #9]
 8009810:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009812:	7dbb      	ldrb	r3, [r7, #22]
 8009814:	3330      	adds	r3, #48	; 0x30
 8009816:	b2da      	uxtb	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	3301      	adds	r3, #1
 8009820:	223a      	movs	r2, #58	; 0x3a
 8009822:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	3302      	adds	r3, #2
 8009828:	222f      	movs	r2, #47	; 0x2f
 800982a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	3303      	adds	r3, #3
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr
 8009844:	200002cc 	.word	0x200002cc

08009848 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009852:	2200      	movs	r2, #0
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ffac 	bl	80097b4 <FATFS_LinkDriverEx>
 800985c:	4603      	mov	r3, r0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	6039      	str	r1, [r7, #0]
 8009872:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009874:	88fb      	ldrh	r3, [r7, #6]
 8009876:	2b7f      	cmp	r3, #127	; 0x7f
 8009878:	d802      	bhi.n	8009880 <ff_convert+0x18>
		c = chr;
 800987a:	88fb      	ldrh	r3, [r7, #6]
 800987c:	81fb      	strh	r3, [r7, #14]
 800987e:	e025      	b.n	80098cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	2bff      	cmp	r3, #255	; 0xff
 800988a:	d805      	bhi.n	8009898 <ff_convert+0x30>
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	3b80      	subs	r3, #128	; 0x80
 8009890:	4a11      	ldr	r2, [pc, #68]	; (80098d8 <ff_convert+0x70>)
 8009892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009896:	e000      	b.n	800989a <ff_convert+0x32>
 8009898:	2300      	movs	r3, #0
 800989a:	81fb      	strh	r3, [r7, #14]
 800989c:	e016      	b.n	80098cc <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800989e:	2300      	movs	r3, #0
 80098a0:	81fb      	strh	r3, [r7, #14]
 80098a2:	e009      	b.n	80098b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80098a4:	89fb      	ldrh	r3, [r7, #14]
 80098a6:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <ff_convert+0x70>)
 80098a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098ac:	88fa      	ldrh	r2, [r7, #6]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d006      	beq.n	80098c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80098b2:	89fb      	ldrh	r3, [r7, #14]
 80098b4:	3301      	adds	r3, #1
 80098b6:	81fb      	strh	r3, [r7, #14]
 80098b8:	89fb      	ldrh	r3, [r7, #14]
 80098ba:	2b7f      	cmp	r3, #127	; 0x7f
 80098bc:	d9f2      	bls.n	80098a4 <ff_convert+0x3c>
 80098be:	e000      	b.n	80098c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80098c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80098c2:	89fb      	ldrh	r3, [r7, #14]
 80098c4:	3380      	adds	r3, #128	; 0x80
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80098cc:	89fb      	ldrh	r3, [r7, #14]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr
 80098d8:	0800a384 	.word	0x0800a384

080098dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e002      	b.n	80098f2 <ff_wtoupper+0x16>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3301      	adds	r3, #1
 80098f0:	60fb      	str	r3, [r7, #12]
 80098f2:	4a0f      	ldr	r2, [pc, #60]	; (8009930 <ff_wtoupper+0x54>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d006      	beq.n	800990c <ff_wtoupper+0x30>
 80098fe:	4a0c      	ldr	r2, [pc, #48]	; (8009930 <ff_wtoupper+0x54>)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	429a      	cmp	r2, r3
 800990a:	d1ef      	bne.n	80098ec <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800990c:	4a08      	ldr	r2, [pc, #32]	; (8009930 <ff_wtoupper+0x54>)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <ff_wtoupper+0x46>
 8009918:	4a06      	ldr	r2, [pc, #24]	; (8009934 <ff_wtoupper+0x58>)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009920:	e000      	b.n	8009924 <ff_wtoupper+0x48>
 8009922:	88fb      	ldrh	r3, [r7, #6]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	bc80      	pop	{r7}
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	0800a484 	.word	0x0800a484
 8009934:	0800a664 	.word	0x0800a664

08009938 <__errno>:
 8009938:	4b01      	ldr	r3, [pc, #4]	; (8009940 <__errno+0x8>)
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	20000024 	.word	0x20000024

08009944 <__libc_init_array>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	2600      	movs	r6, #0
 8009948:	4d0c      	ldr	r5, [pc, #48]	; (800997c <__libc_init_array+0x38>)
 800994a:	4c0d      	ldr	r4, [pc, #52]	; (8009980 <__libc_init_array+0x3c>)
 800994c:	1b64      	subs	r4, r4, r5
 800994e:	10a4      	asrs	r4, r4, #2
 8009950:	42a6      	cmp	r6, r4
 8009952:	d109      	bne.n	8009968 <__libc_init_array+0x24>
 8009954:	f000 fc5c 	bl	800a210 <_init>
 8009958:	2600      	movs	r6, #0
 800995a:	4d0a      	ldr	r5, [pc, #40]	; (8009984 <__libc_init_array+0x40>)
 800995c:	4c0a      	ldr	r4, [pc, #40]	; (8009988 <__libc_init_array+0x44>)
 800995e:	1b64      	subs	r4, r4, r5
 8009960:	10a4      	asrs	r4, r4, #2
 8009962:	42a6      	cmp	r6, r4
 8009964:	d105      	bne.n	8009972 <__libc_init_array+0x2e>
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	f855 3b04 	ldr.w	r3, [r5], #4
 800996c:	4798      	blx	r3
 800996e:	3601      	adds	r6, #1
 8009970:	e7ee      	b.n	8009950 <__libc_init_array+0xc>
 8009972:	f855 3b04 	ldr.w	r3, [r5], #4
 8009976:	4798      	blx	r3
 8009978:	3601      	adds	r6, #1
 800997a:	e7f2      	b.n	8009962 <__libc_init_array+0x1e>
 800997c:	0800a878 	.word	0x0800a878
 8009980:	0800a878 	.word	0x0800a878
 8009984:	0800a878 	.word	0x0800a878
 8009988:	0800a87c 	.word	0x0800a87c

0800998c <memset>:
 800998c:	4603      	mov	r3, r0
 800998e:	4402      	add	r2, r0
 8009990:	4293      	cmp	r3, r2
 8009992:	d100      	bne.n	8009996 <memset+0xa>
 8009994:	4770      	bx	lr
 8009996:	f803 1b01 	strb.w	r1, [r3], #1
 800999a:	e7f9      	b.n	8009990 <memset+0x4>

0800999c <siprintf>:
 800999c:	b40e      	push	{r1, r2, r3}
 800999e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099a2:	b500      	push	{lr}
 80099a4:	b09c      	sub	sp, #112	; 0x70
 80099a6:	ab1d      	add	r3, sp, #116	; 0x74
 80099a8:	9002      	str	r0, [sp, #8]
 80099aa:	9006      	str	r0, [sp, #24]
 80099ac:	9107      	str	r1, [sp, #28]
 80099ae:	9104      	str	r1, [sp, #16]
 80099b0:	4808      	ldr	r0, [pc, #32]	; (80099d4 <siprintf+0x38>)
 80099b2:	4909      	ldr	r1, [pc, #36]	; (80099d8 <siprintf+0x3c>)
 80099b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b8:	9105      	str	r1, [sp, #20]
 80099ba:	6800      	ldr	r0, [r0, #0]
 80099bc:	a902      	add	r1, sp, #8
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	f000 f868 	bl	8009a94 <_svfiprintf_r>
 80099c4:	2200      	movs	r2, #0
 80099c6:	9b02      	ldr	r3, [sp, #8]
 80099c8:	701a      	strb	r2, [r3, #0]
 80099ca:	b01c      	add	sp, #112	; 0x70
 80099cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d0:	b003      	add	sp, #12
 80099d2:	4770      	bx	lr
 80099d4:	20000024 	.word	0x20000024
 80099d8:	ffff0208 	.word	0xffff0208

080099dc <__ssputs_r>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	688e      	ldr	r6, [r1, #8]
 80099e2:	4682      	mov	sl, r0
 80099e4:	429e      	cmp	r6, r3
 80099e6:	460c      	mov	r4, r1
 80099e8:	4690      	mov	r8, r2
 80099ea:	461f      	mov	r7, r3
 80099ec:	d838      	bhi.n	8009a60 <__ssputs_r+0x84>
 80099ee:	898a      	ldrh	r2, [r1, #12]
 80099f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099f4:	d032      	beq.n	8009a5c <__ssputs_r+0x80>
 80099f6:	6825      	ldr	r5, [r4, #0]
 80099f8:	6909      	ldr	r1, [r1, #16]
 80099fa:	3301      	adds	r3, #1
 80099fc:	eba5 0901 	sub.w	r9, r5, r1
 8009a00:	6965      	ldr	r5, [r4, #20]
 8009a02:	444b      	add	r3, r9
 8009a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a0c:	106d      	asrs	r5, r5, #1
 8009a0e:	429d      	cmp	r5, r3
 8009a10:	bf38      	it	cc
 8009a12:	461d      	movcc	r5, r3
 8009a14:	0553      	lsls	r3, r2, #21
 8009a16:	d531      	bpl.n	8009a7c <__ssputs_r+0xa0>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f000 fb53 	bl	800a0c4 <_malloc_r>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	b950      	cbnz	r0, 8009a38 <__ssputs_r+0x5c>
 8009a22:	230c      	movs	r3, #12
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295
 8009a28:	f8ca 3000 	str.w	r3, [sl]
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a38:	464a      	mov	r2, r9
 8009a3a:	6921      	ldr	r1, [r4, #16]
 8009a3c:	f000 face 	bl	8009fdc <memcpy>
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	6126      	str	r6, [r4, #16]
 8009a4e:	444e      	add	r6, r9
 8009a50:	6026      	str	r6, [r4, #0]
 8009a52:	463e      	mov	r6, r7
 8009a54:	6165      	str	r5, [r4, #20]
 8009a56:	eba5 0509 	sub.w	r5, r5, r9
 8009a5a:	60a5      	str	r5, [r4, #8]
 8009a5c:	42be      	cmp	r6, r7
 8009a5e:	d900      	bls.n	8009a62 <__ssputs_r+0x86>
 8009a60:	463e      	mov	r6, r7
 8009a62:	4632      	mov	r2, r6
 8009a64:	4641      	mov	r1, r8
 8009a66:	6820      	ldr	r0, [r4, #0]
 8009a68:	f000 fac6 	bl	8009ff8 <memmove>
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	1b9b      	subs	r3, r3, r6
 8009a72:	4432      	add	r2, r6
 8009a74:	2000      	movs	r0, #0
 8009a76:	60a3      	str	r3, [r4, #8]
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	e7db      	b.n	8009a34 <__ssputs_r+0x58>
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	f000 fb7b 	bl	800a178 <_realloc_r>
 8009a82:	4606      	mov	r6, r0
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1e1      	bne.n	8009a4c <__ssputs_r+0x70>
 8009a88:	4650      	mov	r0, sl
 8009a8a:	6921      	ldr	r1, [r4, #16]
 8009a8c:	f000 face 	bl	800a02c <_free_r>
 8009a90:	e7c7      	b.n	8009a22 <__ssputs_r+0x46>
	...

08009a94 <_svfiprintf_r>:
 8009a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a98:	4698      	mov	r8, r3
 8009a9a:	898b      	ldrh	r3, [r1, #12]
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	061b      	lsls	r3, r3, #24
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	4614      	mov	r4, r2
 8009aa4:	b09d      	sub	sp, #116	; 0x74
 8009aa6:	d50e      	bpl.n	8009ac6 <_svfiprintf_r+0x32>
 8009aa8:	690b      	ldr	r3, [r1, #16]
 8009aaa:	b963      	cbnz	r3, 8009ac6 <_svfiprintf_r+0x32>
 8009aac:	2140      	movs	r1, #64	; 0x40
 8009aae:	f000 fb09 	bl	800a0c4 <_malloc_r>
 8009ab2:	6028      	str	r0, [r5, #0]
 8009ab4:	6128      	str	r0, [r5, #16]
 8009ab6:	b920      	cbnz	r0, 8009ac2 <_svfiprintf_r+0x2e>
 8009ab8:	230c      	movs	r3, #12
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	e0d1      	b.n	8009c66 <_svfiprintf_r+0x1d2>
 8009ac2:	2340      	movs	r3, #64	; 0x40
 8009ac4:	616b      	str	r3, [r5, #20]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aca:	2320      	movs	r3, #32
 8009acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ad0:	2330      	movs	r3, #48	; 0x30
 8009ad2:	f04f 0901 	mov.w	r9, #1
 8009ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c80 <_svfiprintf_r+0x1ec>
 8009ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ae2:	4623      	mov	r3, r4
 8009ae4:	469a      	mov	sl, r3
 8009ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aea:	b10a      	cbz	r2, 8009af0 <_svfiprintf_r+0x5c>
 8009aec:	2a25      	cmp	r2, #37	; 0x25
 8009aee:	d1f9      	bne.n	8009ae4 <_svfiprintf_r+0x50>
 8009af0:	ebba 0b04 	subs.w	fp, sl, r4
 8009af4:	d00b      	beq.n	8009b0e <_svfiprintf_r+0x7a>
 8009af6:	465b      	mov	r3, fp
 8009af8:	4622      	mov	r2, r4
 8009afa:	4629      	mov	r1, r5
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7ff ff6d 	bl	80099dc <__ssputs_r>
 8009b02:	3001      	adds	r0, #1
 8009b04:	f000 80aa 	beq.w	8009c5c <_svfiprintf_r+0x1c8>
 8009b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b0a:	445a      	add	r2, fp
 8009b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 80a2 	beq.w	8009c5c <_svfiprintf_r+0x1c8>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b22:	f10a 0a01 	add.w	sl, sl, #1
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	9307      	str	r3, [sp, #28]
 8009b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b30:	4654      	mov	r4, sl
 8009b32:	2205      	movs	r2, #5
 8009b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b38:	4851      	ldr	r0, [pc, #324]	; (8009c80 <_svfiprintf_r+0x1ec>)
 8009b3a:	f000 fa41 	bl	8009fc0 <memchr>
 8009b3e:	9a04      	ldr	r2, [sp, #16]
 8009b40:	b9d8      	cbnz	r0, 8009b7a <_svfiprintf_r+0xe6>
 8009b42:	06d0      	lsls	r0, r2, #27
 8009b44:	bf44      	itt	mi
 8009b46:	2320      	movmi	r3, #32
 8009b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b4c:	0711      	lsls	r1, r2, #28
 8009b4e:	bf44      	itt	mi
 8009b50:	232b      	movmi	r3, #43	; 0x2b
 8009b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b56:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5c:	d015      	beq.n	8009b8a <_svfiprintf_r+0xf6>
 8009b5e:	4654      	mov	r4, sl
 8009b60:	2000      	movs	r0, #0
 8009b62:	f04f 0c0a 	mov.w	ip, #10
 8009b66:	9a07      	ldr	r2, [sp, #28]
 8009b68:	4621      	mov	r1, r4
 8009b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b6e:	3b30      	subs	r3, #48	; 0x30
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	d94e      	bls.n	8009c12 <_svfiprintf_r+0x17e>
 8009b74:	b1b0      	cbz	r0, 8009ba4 <_svfiprintf_r+0x110>
 8009b76:	9207      	str	r2, [sp, #28]
 8009b78:	e014      	b.n	8009ba4 <_svfiprintf_r+0x110>
 8009b7a:	eba0 0308 	sub.w	r3, r0, r8
 8009b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b82:	4313      	orrs	r3, r2
 8009b84:	46a2      	mov	sl, r4
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	e7d2      	b.n	8009b30 <_svfiprintf_r+0x9c>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	1d19      	adds	r1, r3, #4
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	9103      	str	r1, [sp, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	bfbb      	ittet	lt
 8009b96:	425b      	neglt	r3, r3
 8009b98:	f042 0202 	orrlt.w	r2, r2, #2
 8009b9c:	9307      	strge	r3, [sp, #28]
 8009b9e:	9307      	strlt	r3, [sp, #28]
 8009ba0:	bfb8      	it	lt
 8009ba2:	9204      	strlt	r2, [sp, #16]
 8009ba4:	7823      	ldrb	r3, [r4, #0]
 8009ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba8:	d10c      	bne.n	8009bc4 <_svfiprintf_r+0x130>
 8009baa:	7863      	ldrb	r3, [r4, #1]
 8009bac:	2b2a      	cmp	r3, #42	; 0x2a
 8009bae:	d135      	bne.n	8009c1c <_svfiprintf_r+0x188>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	3402      	adds	r4, #2
 8009bb4:	1d1a      	adds	r2, r3, #4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	9203      	str	r2, [sp, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	bfb8      	it	lt
 8009bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c90 <_svfiprintf_r+0x1fc>
 8009bc8:	2203      	movs	r2, #3
 8009bca:	4650      	mov	r0, sl
 8009bcc:	7821      	ldrb	r1, [r4, #0]
 8009bce:	f000 f9f7 	bl	8009fc0 <memchr>
 8009bd2:	b140      	cbz	r0, 8009be6 <_svfiprintf_r+0x152>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	eba0 000a 	sub.w	r0, r0, sl
 8009bda:	fa03 f000 	lsl.w	r0, r3, r0
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	3401      	adds	r4, #1
 8009be2:	4303      	orrs	r3, r0
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bea:	2206      	movs	r2, #6
 8009bec:	4825      	ldr	r0, [pc, #148]	; (8009c84 <_svfiprintf_r+0x1f0>)
 8009bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bf2:	f000 f9e5 	bl	8009fc0 <memchr>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d038      	beq.n	8009c6c <_svfiprintf_r+0x1d8>
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <_svfiprintf_r+0x1f4>)
 8009bfc:	bb1b      	cbnz	r3, 8009c46 <_svfiprintf_r+0x1b2>
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	3307      	adds	r3, #7
 8009c02:	f023 0307 	bic.w	r3, r3, #7
 8009c06:	3308      	adds	r3, #8
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0c:	4433      	add	r3, r6
 8009c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c10:	e767      	b.n	8009ae2 <_svfiprintf_r+0x4e>
 8009c12:	460c      	mov	r4, r1
 8009c14:	2001      	movs	r0, #1
 8009c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c1a:	e7a5      	b.n	8009b68 <_svfiprintf_r+0xd4>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f04f 0c0a 	mov.w	ip, #10
 8009c22:	4619      	mov	r1, r3
 8009c24:	3401      	adds	r4, #1
 8009c26:	9305      	str	r3, [sp, #20]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c2e:	3a30      	subs	r2, #48	; 0x30
 8009c30:	2a09      	cmp	r2, #9
 8009c32:	d903      	bls.n	8009c3c <_svfiprintf_r+0x1a8>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0c5      	beq.n	8009bc4 <_svfiprintf_r+0x130>
 8009c38:	9105      	str	r1, [sp, #20]
 8009c3a:	e7c3      	b.n	8009bc4 <_svfiprintf_r+0x130>
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	2301      	movs	r3, #1
 8009c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c44:	e7f0      	b.n	8009c28 <_svfiprintf_r+0x194>
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <_svfiprintf_r+0x1f8>)
 8009c50:	a904      	add	r1, sp, #16
 8009c52:	f3af 8000 	nop.w
 8009c56:	1c42      	adds	r2, r0, #1
 8009c58:	4606      	mov	r6, r0
 8009c5a:	d1d6      	bne.n	8009c0a <_svfiprintf_r+0x176>
 8009c5c:	89ab      	ldrh	r3, [r5, #12]
 8009c5e:	065b      	lsls	r3, r3, #25
 8009c60:	f53f af2c 	bmi.w	8009abc <_svfiprintf_r+0x28>
 8009c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c66:	b01d      	add	sp, #116	; 0x74
 8009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	ab03      	add	r3, sp, #12
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	462a      	mov	r2, r5
 8009c72:	4638      	mov	r0, r7
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <_svfiprintf_r+0x1f8>)
 8009c76:	a904      	add	r1, sp, #16
 8009c78:	f000 f87c 	bl	8009d74 <_printf_i>
 8009c7c:	e7eb      	b.n	8009c56 <_svfiprintf_r+0x1c2>
 8009c7e:	bf00      	nop
 8009c80:	0800a844 	.word	0x0800a844
 8009c84:	0800a84e 	.word	0x0800a84e
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	080099dd 	.word	0x080099dd
 8009c90:	0800a84a 	.word	0x0800a84a

08009c94 <_printf_common>:
 8009c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c98:	4616      	mov	r6, r2
 8009c9a:	4699      	mov	r9, r3
 8009c9c:	688a      	ldr	r2, [r1, #8]
 8009c9e:	690b      	ldr	r3, [r1, #16]
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	bfb8      	it	lt
 8009ca6:	4613      	movlt	r3, r2
 8009ca8:	6033      	str	r3, [r6, #0]
 8009caa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cae:	460c      	mov	r4, r1
 8009cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cb4:	b10a      	cbz	r2, 8009cba <_printf_common+0x26>
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	6033      	str	r3, [r6, #0]
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	0699      	lsls	r1, r3, #26
 8009cbe:	bf42      	ittt	mi
 8009cc0:	6833      	ldrmi	r3, [r6, #0]
 8009cc2:	3302      	addmi	r3, #2
 8009cc4:	6033      	strmi	r3, [r6, #0]
 8009cc6:	6825      	ldr	r5, [r4, #0]
 8009cc8:	f015 0506 	ands.w	r5, r5, #6
 8009ccc:	d106      	bne.n	8009cdc <_printf_common+0x48>
 8009cce:	f104 0a19 	add.w	sl, r4, #25
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	6832      	ldr	r2, [r6, #0]
 8009cd6:	1a9b      	subs	r3, r3, r2
 8009cd8:	42ab      	cmp	r3, r5
 8009cda:	dc28      	bgt.n	8009d2e <_printf_common+0x9a>
 8009cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ce0:	1e13      	subs	r3, r2, #0
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	bf18      	it	ne
 8009ce6:	2301      	movne	r3, #1
 8009ce8:	0692      	lsls	r2, r2, #26
 8009cea:	d42d      	bmi.n	8009d48 <_printf_common+0xb4>
 8009cec:	4649      	mov	r1, r9
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cf4:	47c0      	blx	r8
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d020      	beq.n	8009d3c <_printf_common+0xa8>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	68e5      	ldr	r5, [r4, #12]
 8009cfe:	f003 0306 	and.w	r3, r3, #6
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	bf18      	it	ne
 8009d06:	2500      	movne	r5, #0
 8009d08:	6832      	ldr	r2, [r6, #0]
 8009d0a:	f04f 0600 	mov.w	r6, #0
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	bf08      	it	eq
 8009d12:	1aad      	subeq	r5, r5, r2
 8009d14:	6922      	ldr	r2, [r4, #16]
 8009d16:	bf08      	it	eq
 8009d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	bfc4      	itt	gt
 8009d20:	1a9b      	subgt	r3, r3, r2
 8009d22:	18ed      	addgt	r5, r5, r3
 8009d24:	341a      	adds	r4, #26
 8009d26:	42b5      	cmp	r5, r6
 8009d28:	d11a      	bne.n	8009d60 <_printf_common+0xcc>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e008      	b.n	8009d40 <_printf_common+0xac>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4652      	mov	r2, sl
 8009d32:	4649      	mov	r1, r9
 8009d34:	4638      	mov	r0, r7
 8009d36:	47c0      	blx	r8
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d103      	bne.n	8009d44 <_printf_common+0xb0>
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d44:	3501      	adds	r5, #1
 8009d46:	e7c4      	b.n	8009cd2 <_printf_common+0x3e>
 8009d48:	2030      	movs	r0, #48	; 0x30
 8009d4a:	18e1      	adds	r1, r4, r3
 8009d4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d56:	4422      	add	r2, r4
 8009d58:	3302      	adds	r3, #2
 8009d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d5e:	e7c5      	b.n	8009cec <_printf_common+0x58>
 8009d60:	2301      	movs	r3, #1
 8009d62:	4622      	mov	r2, r4
 8009d64:	4649      	mov	r1, r9
 8009d66:	4638      	mov	r0, r7
 8009d68:	47c0      	blx	r8
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	d0e6      	beq.n	8009d3c <_printf_common+0xa8>
 8009d6e:	3601      	adds	r6, #1
 8009d70:	e7d9      	b.n	8009d26 <_printf_common+0x92>
	...

08009d74 <_printf_i>:
 8009d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	7e27      	ldrb	r7, [r4, #24]
 8009d7c:	4691      	mov	r9, r2
 8009d7e:	2f78      	cmp	r7, #120	; 0x78
 8009d80:	4680      	mov	r8, r0
 8009d82:	469a      	mov	sl, r3
 8009d84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d8a:	d807      	bhi.n	8009d9c <_printf_i+0x28>
 8009d8c:	2f62      	cmp	r7, #98	; 0x62
 8009d8e:	d80a      	bhi.n	8009da6 <_printf_i+0x32>
 8009d90:	2f00      	cmp	r7, #0
 8009d92:	f000 80d9 	beq.w	8009f48 <_printf_i+0x1d4>
 8009d96:	2f58      	cmp	r7, #88	; 0x58
 8009d98:	f000 80a4 	beq.w	8009ee4 <_printf_i+0x170>
 8009d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009da4:	e03a      	b.n	8009e1c <_printf_i+0xa8>
 8009da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009daa:	2b15      	cmp	r3, #21
 8009dac:	d8f6      	bhi.n	8009d9c <_printf_i+0x28>
 8009dae:	a001      	add	r0, pc, #4	; (adr r0, 8009db4 <_printf_i+0x40>)
 8009db0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009db4:	08009e0d 	.word	0x08009e0d
 8009db8:	08009e21 	.word	0x08009e21
 8009dbc:	08009d9d 	.word	0x08009d9d
 8009dc0:	08009d9d 	.word	0x08009d9d
 8009dc4:	08009d9d 	.word	0x08009d9d
 8009dc8:	08009d9d 	.word	0x08009d9d
 8009dcc:	08009e21 	.word	0x08009e21
 8009dd0:	08009d9d 	.word	0x08009d9d
 8009dd4:	08009d9d 	.word	0x08009d9d
 8009dd8:	08009d9d 	.word	0x08009d9d
 8009ddc:	08009d9d 	.word	0x08009d9d
 8009de0:	08009f2f 	.word	0x08009f2f
 8009de4:	08009e51 	.word	0x08009e51
 8009de8:	08009f11 	.word	0x08009f11
 8009dec:	08009d9d 	.word	0x08009d9d
 8009df0:	08009d9d 	.word	0x08009d9d
 8009df4:	08009f51 	.word	0x08009f51
 8009df8:	08009d9d 	.word	0x08009d9d
 8009dfc:	08009e51 	.word	0x08009e51
 8009e00:	08009d9d 	.word	0x08009d9d
 8009e04:	08009d9d 	.word	0x08009d9d
 8009e08:	08009f19 	.word	0x08009f19
 8009e0c:	680b      	ldr	r3, [r1, #0]
 8009e0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e12:	1d1a      	adds	r2, r3, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	600a      	str	r2, [r1, #0]
 8009e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e0a4      	b.n	8009f6a <_printf_i+0x1f6>
 8009e20:	6825      	ldr	r5, [r4, #0]
 8009e22:	6808      	ldr	r0, [r1, #0]
 8009e24:	062e      	lsls	r6, r5, #24
 8009e26:	f100 0304 	add.w	r3, r0, #4
 8009e2a:	d50a      	bpl.n	8009e42 <_printf_i+0xce>
 8009e2c:	6805      	ldr	r5, [r0, #0]
 8009e2e:	600b      	str	r3, [r1, #0]
 8009e30:	2d00      	cmp	r5, #0
 8009e32:	da03      	bge.n	8009e3c <_printf_i+0xc8>
 8009e34:	232d      	movs	r3, #45	; 0x2d
 8009e36:	426d      	negs	r5, r5
 8009e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e3c:	230a      	movs	r3, #10
 8009e3e:	485e      	ldr	r0, [pc, #376]	; (8009fb8 <_printf_i+0x244>)
 8009e40:	e019      	b.n	8009e76 <_printf_i+0x102>
 8009e42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e46:	6805      	ldr	r5, [r0, #0]
 8009e48:	600b      	str	r3, [r1, #0]
 8009e4a:	bf18      	it	ne
 8009e4c:	b22d      	sxthne	r5, r5
 8009e4e:	e7ef      	b.n	8009e30 <_printf_i+0xbc>
 8009e50:	680b      	ldr	r3, [r1, #0]
 8009e52:	6825      	ldr	r5, [r4, #0]
 8009e54:	1d18      	adds	r0, r3, #4
 8009e56:	6008      	str	r0, [r1, #0]
 8009e58:	0628      	lsls	r0, r5, #24
 8009e5a:	d501      	bpl.n	8009e60 <_printf_i+0xec>
 8009e5c:	681d      	ldr	r5, [r3, #0]
 8009e5e:	e002      	b.n	8009e66 <_printf_i+0xf2>
 8009e60:	0669      	lsls	r1, r5, #25
 8009e62:	d5fb      	bpl.n	8009e5c <_printf_i+0xe8>
 8009e64:	881d      	ldrh	r5, [r3, #0]
 8009e66:	2f6f      	cmp	r7, #111	; 0x6f
 8009e68:	bf0c      	ite	eq
 8009e6a:	2308      	moveq	r3, #8
 8009e6c:	230a      	movne	r3, #10
 8009e6e:	4852      	ldr	r0, [pc, #328]	; (8009fb8 <_printf_i+0x244>)
 8009e70:	2100      	movs	r1, #0
 8009e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e76:	6866      	ldr	r6, [r4, #4]
 8009e78:	2e00      	cmp	r6, #0
 8009e7a:	bfa8      	it	ge
 8009e7c:	6821      	ldrge	r1, [r4, #0]
 8009e7e:	60a6      	str	r6, [r4, #8]
 8009e80:	bfa4      	itt	ge
 8009e82:	f021 0104 	bicge.w	r1, r1, #4
 8009e86:	6021      	strge	r1, [r4, #0]
 8009e88:	b90d      	cbnz	r5, 8009e8e <_printf_i+0x11a>
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d04d      	beq.n	8009f2a <_printf_i+0x1b6>
 8009e8e:	4616      	mov	r6, r2
 8009e90:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e94:	fb03 5711 	mls	r7, r3, r1, r5
 8009e98:	5dc7      	ldrb	r7, [r0, r7]
 8009e9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e9e:	462f      	mov	r7, r5
 8009ea0:	42bb      	cmp	r3, r7
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	d9f4      	bls.n	8009e90 <_printf_i+0x11c>
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d10b      	bne.n	8009ec2 <_printf_i+0x14e>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	07df      	lsls	r7, r3, #31
 8009eae:	d508      	bpl.n	8009ec2 <_printf_i+0x14e>
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	6861      	ldr	r1, [r4, #4]
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	bfde      	ittt	le
 8009eb8:	2330      	movle	r3, #48	; 0x30
 8009eba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ebe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ec2:	1b92      	subs	r2, r2, r6
 8009ec4:	6122      	str	r2, [r4, #16]
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f8cd a000 	str.w	sl, [sp]
 8009ed0:	aa03      	add	r2, sp, #12
 8009ed2:	f7ff fedf 	bl	8009c94 <_printf_common>
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d14c      	bne.n	8009f74 <_printf_i+0x200>
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	b004      	add	sp, #16
 8009ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee4:	4834      	ldr	r0, [pc, #208]	; (8009fb8 <_printf_i+0x244>)
 8009ee6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009eea:	680e      	ldr	r6, [r1, #0]
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ef2:	061f      	lsls	r7, r3, #24
 8009ef4:	600e      	str	r6, [r1, #0]
 8009ef6:	d514      	bpl.n	8009f22 <_printf_i+0x1ae>
 8009ef8:	07d9      	lsls	r1, r3, #31
 8009efa:	bf44      	itt	mi
 8009efc:	f043 0320 	orrmi.w	r3, r3, #32
 8009f00:	6023      	strmi	r3, [r4, #0]
 8009f02:	b91d      	cbnz	r5, 8009f0c <_printf_i+0x198>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	f023 0320 	bic.w	r3, r3, #32
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	e7af      	b.n	8009e70 <_printf_i+0xfc>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	f043 0320 	orr.w	r3, r3, #32
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	2378      	movs	r3, #120	; 0x78
 8009f1a:	4828      	ldr	r0, [pc, #160]	; (8009fbc <_printf_i+0x248>)
 8009f1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f20:	e7e3      	b.n	8009eea <_printf_i+0x176>
 8009f22:	065e      	lsls	r6, r3, #25
 8009f24:	bf48      	it	mi
 8009f26:	b2ad      	uxthmi	r5, r5
 8009f28:	e7e6      	b.n	8009ef8 <_printf_i+0x184>
 8009f2a:	4616      	mov	r6, r2
 8009f2c:	e7bb      	b.n	8009ea6 <_printf_i+0x132>
 8009f2e:	680b      	ldr	r3, [r1, #0]
 8009f30:	6826      	ldr	r6, [r4, #0]
 8009f32:	1d1d      	adds	r5, r3, #4
 8009f34:	6960      	ldr	r0, [r4, #20]
 8009f36:	600d      	str	r5, [r1, #0]
 8009f38:	0635      	lsls	r5, r6, #24
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	d501      	bpl.n	8009f42 <_printf_i+0x1ce>
 8009f3e:	6018      	str	r0, [r3, #0]
 8009f40:	e002      	b.n	8009f48 <_printf_i+0x1d4>
 8009f42:	0671      	lsls	r1, r6, #25
 8009f44:	d5fb      	bpl.n	8009f3e <_printf_i+0x1ca>
 8009f46:	8018      	strh	r0, [r3, #0]
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4616      	mov	r6, r2
 8009f4c:	6123      	str	r3, [r4, #16]
 8009f4e:	e7ba      	b.n	8009ec6 <_printf_i+0x152>
 8009f50:	680b      	ldr	r3, [r1, #0]
 8009f52:	1d1a      	adds	r2, r3, #4
 8009f54:	600a      	str	r2, [r1, #0]
 8009f56:	681e      	ldr	r6, [r3, #0]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	6862      	ldr	r2, [r4, #4]
 8009f5e:	f000 f82f 	bl	8009fc0 <memchr>
 8009f62:	b108      	cbz	r0, 8009f68 <_printf_i+0x1f4>
 8009f64:	1b80      	subs	r0, r0, r6
 8009f66:	6060      	str	r0, [r4, #4]
 8009f68:	6863      	ldr	r3, [r4, #4]
 8009f6a:	6123      	str	r3, [r4, #16]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f72:	e7a8      	b.n	8009ec6 <_printf_i+0x152>
 8009f74:	4632      	mov	r2, r6
 8009f76:	4649      	mov	r1, r9
 8009f78:	4640      	mov	r0, r8
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	47d0      	blx	sl
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d0ab      	beq.n	8009eda <_printf_i+0x166>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	079b      	lsls	r3, r3, #30
 8009f86:	d413      	bmi.n	8009fb0 <_printf_i+0x23c>
 8009f88:	68e0      	ldr	r0, [r4, #12]
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	4298      	cmp	r0, r3
 8009f8e:	bfb8      	it	lt
 8009f90:	4618      	movlt	r0, r3
 8009f92:	e7a4      	b.n	8009ede <_printf_i+0x16a>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4632      	mov	r2, r6
 8009f98:	4649      	mov	r1, r9
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	47d0      	blx	sl
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d09b      	beq.n	8009eda <_printf_i+0x166>
 8009fa2:	3501      	adds	r5, #1
 8009fa4:	68e3      	ldr	r3, [r4, #12]
 8009fa6:	9903      	ldr	r1, [sp, #12]
 8009fa8:	1a5b      	subs	r3, r3, r1
 8009faa:	42ab      	cmp	r3, r5
 8009fac:	dcf2      	bgt.n	8009f94 <_printf_i+0x220>
 8009fae:	e7eb      	b.n	8009f88 <_printf_i+0x214>
 8009fb0:	2500      	movs	r5, #0
 8009fb2:	f104 0619 	add.w	r6, r4, #25
 8009fb6:	e7f5      	b.n	8009fa4 <_printf_i+0x230>
 8009fb8:	0800a855 	.word	0x0800a855
 8009fbc:	0800a866 	.word	0x0800a866

08009fc0 <memchr>:
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	b510      	push	{r4, lr}
 8009fc4:	b2c9      	uxtb	r1, r1
 8009fc6:	4402      	add	r2, r0
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	d101      	bne.n	8009fd2 <memchr+0x12>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e003      	b.n	8009fda <memchr+0x1a>
 8009fd2:	7804      	ldrb	r4, [r0, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	428c      	cmp	r4, r1
 8009fd8:	d1f6      	bne.n	8009fc8 <memchr+0x8>
 8009fda:	bd10      	pop	{r4, pc}

08009fdc <memcpy>:
 8009fdc:	440a      	add	r2, r1
 8009fde:	4291      	cmp	r1, r2
 8009fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe4:	d100      	bne.n	8009fe8 <memcpy+0xc>
 8009fe6:	4770      	bx	lr
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ff4:	d1f9      	bne.n	8009fea <memcpy+0xe>
 8009ff6:	bd10      	pop	{r4, pc}

08009ff8 <memmove>:
 8009ff8:	4288      	cmp	r0, r1
 8009ffa:	b510      	push	{r4, lr}
 8009ffc:	eb01 0402 	add.w	r4, r1, r2
 800a000:	d902      	bls.n	800a008 <memmove+0x10>
 800a002:	4284      	cmp	r4, r0
 800a004:	4623      	mov	r3, r4
 800a006:	d807      	bhi.n	800a018 <memmove+0x20>
 800a008:	1e43      	subs	r3, r0, #1
 800a00a:	42a1      	cmp	r1, r4
 800a00c:	d008      	beq.n	800a020 <memmove+0x28>
 800a00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a012:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a016:	e7f8      	b.n	800a00a <memmove+0x12>
 800a018:	4601      	mov	r1, r0
 800a01a:	4402      	add	r2, r0
 800a01c:	428a      	cmp	r2, r1
 800a01e:	d100      	bne.n	800a022 <memmove+0x2a>
 800a020:	bd10      	pop	{r4, pc}
 800a022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a02a:	e7f7      	b.n	800a01c <memmove+0x24>

0800a02c <_free_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4605      	mov	r5, r0
 800a030:	2900      	cmp	r1, #0
 800a032:	d043      	beq.n	800a0bc <_free_r+0x90>
 800a034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a038:	1f0c      	subs	r4, r1, #4
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	bfb8      	it	lt
 800a03e:	18e4      	addlt	r4, r4, r3
 800a040:	f000 f8d0 	bl	800a1e4 <__malloc_lock>
 800a044:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <_free_r+0x94>)
 800a046:	6813      	ldr	r3, [r2, #0]
 800a048:	4610      	mov	r0, r2
 800a04a:	b933      	cbnz	r3, 800a05a <_free_r+0x2e>
 800a04c:	6063      	str	r3, [r4, #4]
 800a04e:	6014      	str	r4, [r2, #0]
 800a050:	4628      	mov	r0, r5
 800a052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a056:	f000 b8cb 	b.w	800a1f0 <__malloc_unlock>
 800a05a:	42a3      	cmp	r3, r4
 800a05c:	d90a      	bls.n	800a074 <_free_r+0x48>
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	1862      	adds	r2, r4, r1
 800a062:	4293      	cmp	r3, r2
 800a064:	bf01      	itttt	eq
 800a066:	681a      	ldreq	r2, [r3, #0]
 800a068:	685b      	ldreq	r3, [r3, #4]
 800a06a:	1852      	addeq	r2, r2, r1
 800a06c:	6022      	streq	r2, [r4, #0]
 800a06e:	6063      	str	r3, [r4, #4]
 800a070:	6004      	str	r4, [r0, #0]
 800a072:	e7ed      	b.n	800a050 <_free_r+0x24>
 800a074:	461a      	mov	r2, r3
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	b10b      	cbz	r3, 800a07e <_free_r+0x52>
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	d9fa      	bls.n	800a074 <_free_r+0x48>
 800a07e:	6811      	ldr	r1, [r2, #0]
 800a080:	1850      	adds	r0, r2, r1
 800a082:	42a0      	cmp	r0, r4
 800a084:	d10b      	bne.n	800a09e <_free_r+0x72>
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	4401      	add	r1, r0
 800a08a:	1850      	adds	r0, r2, r1
 800a08c:	4283      	cmp	r3, r0
 800a08e:	6011      	str	r1, [r2, #0]
 800a090:	d1de      	bne.n	800a050 <_free_r+0x24>
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	4401      	add	r1, r0
 800a098:	6011      	str	r1, [r2, #0]
 800a09a:	6053      	str	r3, [r2, #4]
 800a09c:	e7d8      	b.n	800a050 <_free_r+0x24>
 800a09e:	d902      	bls.n	800a0a6 <_free_r+0x7a>
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	e7d4      	b.n	800a050 <_free_r+0x24>
 800a0a6:	6820      	ldr	r0, [r4, #0]
 800a0a8:	1821      	adds	r1, r4, r0
 800a0aa:	428b      	cmp	r3, r1
 800a0ac:	bf01      	itttt	eq
 800a0ae:	6819      	ldreq	r1, [r3, #0]
 800a0b0:	685b      	ldreq	r3, [r3, #4]
 800a0b2:	1809      	addeq	r1, r1, r0
 800a0b4:	6021      	streq	r1, [r4, #0]
 800a0b6:	6063      	str	r3, [r4, #4]
 800a0b8:	6054      	str	r4, [r2, #4]
 800a0ba:	e7c9      	b.n	800a050 <_free_r+0x24>
 800a0bc:	bd38      	pop	{r3, r4, r5, pc}
 800a0be:	bf00      	nop
 800a0c0:	200002d8 	.word	0x200002d8

0800a0c4 <_malloc_r>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	1ccd      	adds	r5, r1, #3
 800a0c8:	f025 0503 	bic.w	r5, r5, #3
 800a0cc:	3508      	adds	r5, #8
 800a0ce:	2d0c      	cmp	r5, #12
 800a0d0:	bf38      	it	cc
 800a0d2:	250c      	movcc	r5, #12
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	db01      	blt.n	800a0de <_malloc_r+0x1a>
 800a0da:	42a9      	cmp	r1, r5
 800a0dc:	d903      	bls.n	800a0e6 <_malloc_r+0x22>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	6033      	str	r3, [r6, #0]
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e6:	f000 f87d 	bl	800a1e4 <__malloc_lock>
 800a0ea:	4921      	ldr	r1, [pc, #132]	; (800a170 <_malloc_r+0xac>)
 800a0ec:	680a      	ldr	r2, [r1, #0]
 800a0ee:	4614      	mov	r4, r2
 800a0f0:	b99c      	cbnz	r4, 800a11a <_malloc_r+0x56>
 800a0f2:	4f20      	ldr	r7, [pc, #128]	; (800a174 <_malloc_r+0xb0>)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	b923      	cbnz	r3, 800a102 <_malloc_r+0x3e>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 f862 	bl	800a1c4 <_sbrk_r>
 800a100:	6038      	str	r0, [r7, #0]
 800a102:	4629      	mov	r1, r5
 800a104:	4630      	mov	r0, r6
 800a106:	f000 f85d 	bl	800a1c4 <_sbrk_r>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d123      	bne.n	800a156 <_malloc_r+0x92>
 800a10e:	230c      	movs	r3, #12
 800a110:	4630      	mov	r0, r6
 800a112:	6033      	str	r3, [r6, #0]
 800a114:	f000 f86c 	bl	800a1f0 <__malloc_unlock>
 800a118:	e7e3      	b.n	800a0e2 <_malloc_r+0x1e>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	1b5b      	subs	r3, r3, r5
 800a11e:	d417      	bmi.n	800a150 <_malloc_r+0x8c>
 800a120:	2b0b      	cmp	r3, #11
 800a122:	d903      	bls.n	800a12c <_malloc_r+0x68>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	441c      	add	r4, r3
 800a128:	6025      	str	r5, [r4, #0]
 800a12a:	e004      	b.n	800a136 <_malloc_r+0x72>
 800a12c:	6863      	ldr	r3, [r4, #4]
 800a12e:	42a2      	cmp	r2, r4
 800a130:	bf0c      	ite	eq
 800a132:	600b      	streq	r3, [r1, #0]
 800a134:	6053      	strne	r3, [r2, #4]
 800a136:	4630      	mov	r0, r6
 800a138:	f000 f85a 	bl	800a1f0 <__malloc_unlock>
 800a13c:	f104 000b 	add.w	r0, r4, #11
 800a140:	1d23      	adds	r3, r4, #4
 800a142:	f020 0007 	bic.w	r0, r0, #7
 800a146:	1ac2      	subs	r2, r0, r3
 800a148:	d0cc      	beq.n	800a0e4 <_malloc_r+0x20>
 800a14a:	1a1b      	subs	r3, r3, r0
 800a14c:	50a3      	str	r3, [r4, r2]
 800a14e:	e7c9      	b.n	800a0e4 <_malloc_r+0x20>
 800a150:	4622      	mov	r2, r4
 800a152:	6864      	ldr	r4, [r4, #4]
 800a154:	e7cc      	b.n	800a0f0 <_malloc_r+0x2c>
 800a156:	1cc4      	adds	r4, r0, #3
 800a158:	f024 0403 	bic.w	r4, r4, #3
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d0e3      	beq.n	800a128 <_malloc_r+0x64>
 800a160:	1a21      	subs	r1, r4, r0
 800a162:	4630      	mov	r0, r6
 800a164:	f000 f82e 	bl	800a1c4 <_sbrk_r>
 800a168:	3001      	adds	r0, #1
 800a16a:	d1dd      	bne.n	800a128 <_malloc_r+0x64>
 800a16c:	e7cf      	b.n	800a10e <_malloc_r+0x4a>
 800a16e:	bf00      	nop
 800a170:	200002d8 	.word	0x200002d8
 800a174:	200002dc 	.word	0x200002dc

0800a178 <_realloc_r>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	4607      	mov	r7, r0
 800a17c:	4614      	mov	r4, r2
 800a17e:	460e      	mov	r6, r1
 800a180:	b921      	cbnz	r1, 800a18c <_realloc_r+0x14>
 800a182:	4611      	mov	r1, r2
 800a184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a188:	f7ff bf9c 	b.w	800a0c4 <_malloc_r>
 800a18c:	b922      	cbnz	r2, 800a198 <_realloc_r+0x20>
 800a18e:	f7ff ff4d 	bl	800a02c <_free_r>
 800a192:	4625      	mov	r5, r4
 800a194:	4628      	mov	r0, r5
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	f000 f830 	bl	800a1fc <_malloc_usable_size_r>
 800a19c:	42a0      	cmp	r0, r4
 800a19e:	d20f      	bcs.n	800a1c0 <_realloc_r+0x48>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f7ff ff8e 	bl	800a0c4 <_malloc_r>
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d0f2      	beq.n	800a194 <_realloc_r+0x1c>
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	f7ff ff13 	bl	8009fdc <memcpy>
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff ff37 	bl	800a02c <_free_r>
 800a1be:	e7e9      	b.n	800a194 <_realloc_r+0x1c>
 800a1c0:	4635      	mov	r5, r6
 800a1c2:	e7e7      	b.n	800a194 <_realloc_r+0x1c>

0800a1c4 <_sbrk_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4d05      	ldr	r5, [pc, #20]	; (800a1e0 <_sbrk_r+0x1c>)
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	f7f8 fc38 	bl	8002a44 <_sbrk>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_sbrk_r+0x1a>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_sbrk_r+0x1a>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	20000ff8 	.word	0x20000ff8

0800a1e4 <__malloc_lock>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__malloc_lock+0x8>)
 800a1e6:	f000 b811 	b.w	800a20c <__retarget_lock_acquire_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	20001000 	.word	0x20001000

0800a1f0 <__malloc_unlock>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <__malloc_unlock+0x8>)
 800a1f2:	f000 b80c 	b.w	800a20e <__retarget_lock_release_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20001000 	.word	0x20001000

0800a1fc <_malloc_usable_size_r>:
 800a1fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a200:	1f18      	subs	r0, r3, #4
 800a202:	2b00      	cmp	r3, #0
 800a204:	bfbc      	itt	lt
 800a206:	580b      	ldrlt	r3, [r1, r0]
 800a208:	18c0      	addlt	r0, r0, r3
 800a20a:	4770      	bx	lr

0800a20c <__retarget_lock_acquire_recursive>:
 800a20c:	4770      	bx	lr

0800a20e <__retarget_lock_release_recursive>:
 800a20e:	4770      	bx	lr

0800a210 <_init>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	bf00      	nop
 800a214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a216:	bc08      	pop	{r3}
 800a218:	469e      	mov	lr, r3
 800a21a:	4770      	bx	lr

0800a21c <_fini>:
 800a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21e:	bf00      	nop
 800a220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a222:	bc08      	pop	{r3}
 800a224:	469e      	mov	lr, r3
 800a226:	4770      	bx	lr
