
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800982c  0800982c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800982c  0800982c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f50  20000088  080098bc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd8  080098bc  00020fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001993b  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003680  00000000  00000000  000399ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003d070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  0003e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac7d  00000000  00000000  0003fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b62a  00000000  00000000  0005a84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095857  00000000  00000000  00075e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b6ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c4  00000000  00000000  0010b724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080091c4 	.word	0x080091c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080091c4 	.word	0x080091c4

0800014c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <SELECT+0x14>)
 8000158:	f002 fcf0 	bl	8002b3c <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010800 	.word	0x40010800

08000164 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <DESELECT+0x14>)
 8000170:	f002 fce4 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000186:	bf00      	nop
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <SPI_TxByte+0x30>)
 800018a:	f003 ff6e 	bl	800406a <HAL_SPI_GetState>
 800018e:	4603      	mov	r3, r0
 8000190:	2b01      	cmp	r3, #1
 8000192:	d1f9      	bne.n	8000188 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000194:	1df9      	adds	r1, r7, #7
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	2201      	movs	r2, #1
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <SPI_TxByte+0x30>)
 800019e:	f003 fb97 	bl	80038d0 <HAL_SPI_Transmit>
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000a78 	.word	0x20000a78

080001b0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001b6:	23ff      	movs	r3, #255	; 0xff
 80001b8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001be:	bf00      	nop
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <SPI_RxByte+0x38>)
 80001c2:	f003 ff52 	bl	800406a <HAL_SPI_GetState>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d1f9      	bne.n	80001c0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80001cc:	1dba      	adds	r2, r7, #6
 80001ce:	1df9      	adds	r1, r7, #7
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_RxByte+0x38>)
 80001da:	f003 fcb5 	bl	8003b48 <HAL_SPI_TransmitReceive>

  return data;
 80001de:	79bb      	ldrb	r3, [r7, #6]
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000a78 	.word	0x20000a78

080001ec <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80001f4:	f7ff ffdc 	bl	80001b0 <SPI_RxByte>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	701a      	strb	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SD_ReadyWait+0x34>)
 8000210:	2232      	movs	r2, #50	; 0x32
 8000212:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000214:	f7ff ffcc 	bl	80001b0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000218:	f7ff ffca 	bl	80001b0 <SPI_RxByte>
 800021c:	4603      	mov	r3, r0
 800021e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	2bff      	cmp	r3, #255	; 0xff
 8000224:	d004      	beq.n	8000230 <SD_ReadyWait+0x28>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <SD_ReadyWait+0x34>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1f3      	bne.n	8000218 <SD_ReadyWait+0x10>

  return res;
 8000230:	79fb      	ldrb	r3, [r7, #7]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000b5c 	.word	0x20000b5c

08000240 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000246:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800024a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800024c:	f7ff ff8a 	bl	8000164 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
 8000254:	e005      	b.n	8000262 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000256:	20ff      	movs	r0, #255	; 0xff
 8000258:	f7ff ff90 	bl	800017c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	3301      	adds	r3, #1
 8000260:	613b      	str	r3, [r7, #16]
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	2b09      	cmp	r3, #9
 8000266:	ddf6      	ble.n	8000256 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000268:	f7ff ff70 	bl	800014c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800026c:	2340      	movs	r3, #64	; 0x40
 800026e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000280:	2395      	movs	r3, #149	; 0x95
 8000282:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e009      	b.n	800029e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800028a:	1d3a      	adds	r2, r7, #4
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff72 	bl	800017c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b05      	cmp	r3, #5
 80002a2:	ddf2      	ble.n	800028a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80002a4:	e002      	b.n	80002ac <SD_PowerOn+0x6c>
  {
    Count--;
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002ac:	f7ff ff80 	bl	80001b0 <SPI_RxByte>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d002      	beq.n	80002bc <SD_PowerOn+0x7c>
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f4      	bne.n	80002a6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80002bc:	f7ff ff52 	bl	8000164 <DESELECT>
  SPI_TxByte(0XFF);
 80002c0:	20ff      	movs	r0, #255	; 0xff
 80002c2:	f7ff ff5b 	bl	800017c <SPI_TxByte>

  PowerFlag = 1;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <SD_PowerOn+0x94>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000a5 	.word	0x200000a5

080002d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <SD_PowerOff+0x14>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200000a5 	.word	0x200000a5

080002f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80002f4:	4b02      	ldr	r3, [pc, #8]	; (8000300 <SD_CheckPower+0x10>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	200000a5 	.word	0x200000a5

08000304 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <SD_RxDataBlock+0x68>)
 8000310:	220a      	movs	r2, #10
 8000312:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000314:	f7ff ff4c 	bl	80001b0 <SPI_RxByte>
 8000318:	4603      	mov	r3, r0
 800031a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2bff      	cmp	r3, #255	; 0xff
 8000320:	d104      	bne.n	800032c <SD_RxDataBlock+0x28>
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <SD_RxDataBlock+0x68>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f3      	bne.n	8000314 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2bfe      	cmp	r3, #254	; 0xfe
 8000330:	d001      	beq.n	8000336 <SD_RxDataBlock+0x32>
    return FALSE;
 8000332:	2300      	movs	r3, #0
 8000334:	e016      	b.n	8000364 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	1c5a      	adds	r2, r3, #1
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff55 	bl	80001ec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	607a      	str	r2, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff4f 	bl	80001ec <SPI_RxBytePtr>
  } while(btr -= 2);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3b02      	subs	r3, #2
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ed      	bne.n	8000336 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800035a:	f7ff ff29 	bl	80001b0 <SPI_RxByte>
  SPI_RxByte();
 800035e:	f7ff ff27 	bl	80001b0 <SPI_RxByte>

  return TRUE;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000b5d 	.word	0x20000b5d

08000370 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000380:	f7ff ff42 	bl	8000208 <SD_ReadyWait>
 8000384:	4603      	mov	r3, r0
 8000386:	2bff      	cmp	r3, #255	; 0xff
 8000388:	d001      	beq.n	800038e <SD_TxDataBlock+0x1e>
    return FALSE;
 800038a:	2300      	movs	r3, #0
 800038c:	e040      	b.n	8000410 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fef3 	bl	800017c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2bfd      	cmp	r3, #253	; 0xfd
 800039a:	d031      	beq.n	8000400 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fee7 	bl	800017c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fee0 	bl	800017c <SPI_TxByte>
    } while (--wc);
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	3b01      	subs	r3, #1
 80003c0:	73bb      	strb	r3, [r7, #14]
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1eb      	bne.n	80003a0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80003c8:	f7ff fef2 	bl	80001b0 <SPI_RxByte>
    SPI_RxByte();
 80003cc:	f7ff fef0 	bl	80001b0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80003d0:	e00b      	b.n	80003ea <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80003d2:	f7ff feed 	bl	80001b0 <SPI_RxByte>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	f003 031f 	and.w	r3, r3, #31
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d006      	beq.n	80003f2 <SD_TxDataBlock+0x82>
        break;

      i++;
 80003e4:	7b7b      	ldrb	r3, [r7, #13]
 80003e6:	3301      	adds	r3, #1
 80003e8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80003ea:	7b7b      	ldrb	r3, [r7, #13]
 80003ec:	2b40      	cmp	r3, #64	; 0x40
 80003ee:	d9f0      	bls.n	80003d2 <SD_TxDataBlock+0x62>
 80003f0:	e000      	b.n	80003f4 <SD_TxDataBlock+0x84>
        break;
 80003f2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80003f4:	bf00      	nop
 80003f6:	f7ff fedb 	bl	80001b0 <SPI_RxByte>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0fa      	beq.n	80003f6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f003 031f 	and.w	r3, r3, #31
 8000406:	2b05      	cmp	r3, #5
 8000408:	d101      	bne.n	800040e <SD_TxDataBlock+0x9e>
    return TRUE;
 800040a:	2301      	movs	r3, #1
 800040c:	e000      	b.n	8000410 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000424:	f7ff fef0 	bl	8000208 <SD_ReadyWait>
 8000428:	4603      	mov	r3, r0
 800042a:	2bff      	cmp	r3, #255	; 0xff
 800042c:	d001      	beq.n	8000432 <SD_SendCmd+0x1a>
    return 0xFF;
 800042e:	23ff      	movs	r3, #255	; 0xff
 8000430:	e040      	b.n	80004b4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fea1 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	0e1b      	lsrs	r3, r3, #24
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe9b 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe95 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe8f 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fe8a 	bl	800017c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b40      	cmp	r3, #64	; 0x40
 8000470:	d101      	bne.n	8000476 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000472:	2395      	movs	r3, #149	; 0x95
 8000474:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b48      	cmp	r3, #72	; 0x48
 800047a:	d101      	bne.n	8000480 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800047c:	2387      	movs	r3, #135	; 0x87
 800047e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe7a 	bl	800017c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b4c      	cmp	r3, #76	; 0x4c
 800048c:	d101      	bne.n	8000492 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800048e:	f7ff fe8f 	bl	80001b0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000492:	230a      	movs	r3, #10
 8000494:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000496:	f7ff fe8b 	bl	80001b0 <SPI_RxByte>
 800049a:	4603      	mov	r3, r0
 800049c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800049e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	da05      	bge.n	80004b2 <SD_SendCmd+0x9a>
 80004a6:	7bbb      	ldrb	r3, [r7, #14]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	73bb      	strb	r3, [r7, #14]
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f1      	bne.n	8000496 <SD_SendCmd+0x7e>

  return res;
 80004b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e0d5      	b.n	800067c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80004d0:	4b6c      	ldr	r3, [pc, #432]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <SD_disk_initialize+0x2a>
    return Stat;
 80004de:	4b69      	ldr	r3, [pc, #420]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	e0ca      	b.n	800067c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80004e6:	f7ff feab 	bl	8000240 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80004ea:	f7ff fe2f 	bl	800014c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80004f2:	2100      	movs	r1, #0
 80004f4:	2040      	movs	r0, #64	; 0x40
 80004f6:	f7ff ff8f 	bl	8000418 <SD_SendCmd>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	f040 80a5 	bne.w	800064c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000502:	4b61      	ldr	r3, [pc, #388]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000504:	2264      	movs	r2, #100	; 0x64
 8000506:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000508:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800050c:	2048      	movs	r0, #72	; 0x48
 800050e:	f7ff ff83 	bl	8000418 <SD_SendCmd>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d158      	bne.n	80005ca <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e00c      	b.n	8000538 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800051e:	7bfc      	ldrb	r4, [r7, #15]
 8000520:	f7ff fe46 	bl	80001b0 <SPI_RxByte>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4423      	add	r3, r4
 800052e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	3301      	adds	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d9ef      	bls.n	800051e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	2b01      	cmp	r3, #1
 8000542:	f040 8083 	bne.w	800064c <SD_disk_initialize+0x190>
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	2baa      	cmp	r3, #170	; 0xaa
 800054a:	d17f      	bne.n	800064c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800054c:	2100      	movs	r1, #0
 800054e:	2077      	movs	r0, #119	; 0x77
 8000550:	f7ff ff62 	bl	8000418 <SD_SendCmd>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d807      	bhi.n	800056a <SD_disk_initialize+0xae>
 800055a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800055e:	2069      	movs	r0, #105	; 0x69
 8000560:	f7ff ff5a 	bl	8000418 <SD_SendCmd>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <SD_disk_initialize+0x1cc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1eb      	bne.n	800054c <SD_disk_initialize+0x90>
 8000574:	e000      	b.n	8000578 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000576:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <SD_disk_initialize+0x1cc>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d064      	beq.n	800064c <SD_disk_initialize+0x190>
 8000582:	2100      	movs	r1, #0
 8000584:	207a      	movs	r0, #122	; 0x7a
 8000586:	f7ff ff47 	bl	8000418 <SD_SendCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d15d      	bne.n	800064c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00c      	b.n	80005b0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000596:	7bfc      	ldrb	r4, [r7, #15]
 8000598:	f7ff fe0a 	bl	80001b0 <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4423      	add	r3, r4
 80005a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d9ef      	bls.n	8000596 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x108>
 80005c0:	2306      	movs	r3, #6
 80005c2:	e000      	b.n	80005c6 <SD_disk_initialize+0x10a>
 80005c4:	2302      	movs	r3, #2
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e040      	b.n	800064c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005ca:	2100      	movs	r1, #0
 80005cc:	2077      	movs	r0, #119	; 0x77
 80005ce:	f7ff ff23 	bl	8000418 <SD_SendCmd>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d808      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005d8:	2100      	movs	r1, #0
 80005da:	2069      	movs	r0, #105	; 0x69
 80005dc:	f7ff ff1c 	bl	8000418 <SD_SendCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d801      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SD_disk_initialize+0x130>
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d10e      	bne.n	8000612 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80005f4:	2100      	movs	r1, #0
 80005f6:	2077      	movs	r0, #119	; 0x77
 80005f8:	f7ff ff0e 	bl	8000418 <SD_SendCmd>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d80e      	bhi.n	8000620 <SD_disk_initialize+0x164>
 8000602:	2100      	movs	r1, #0
 8000604:	2069      	movs	r0, #105	; 0x69
 8000606:	f7ff ff07 	bl	8000418 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000610:	e00d      	b.n	800062e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000612:	2100      	movs	r1, #0
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f7ff feff 	bl	8000418 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1e1      	bne.n	80005ee <SD_disk_initialize+0x132>
 800062a:	e000      	b.n	800062e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800062c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <SD_disk_initialize+0x18c>
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	2050      	movs	r0, #80	; 0x50
 800063e:	f7ff feeb 	bl	8000418 <SD_SendCmd>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SD_disk_initialize+0x1d0>)
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000652:	f7ff fd87 	bl	8000164 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000656:	f7ff fdab 	bl	80001b0 <SPI_RxByte>

  if (type)
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SD_disk_initialize+0x1c8>)
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e001      	b.n	8000676 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000672:	f7ff fe31 	bl	80002d8 <SD_PowerOff>
  }

  return Stat;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000b5d 	.word	0x20000b5d
 800068c:	200000a4 	.word	0x200000a4

08000690 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e002      	b.n	80006aa <SD_disk_status+0x1a>

  return Stat;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_disk_status+0x24>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000

080006b8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <SD_disk_read+0x1c>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <SD_disk_read+0x20>
    return RES_PARERR;
 80006d4:	2304      	movs	r3, #4
 80006d6:	e051      	b.n	800077c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SD_disk_read+0xcc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SD_disk_read+0x32>
    return RES_NOTRDY;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e048      	b.n	800077c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SD_disk_read+0xd0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	607b      	str	r3, [r7, #4]

  SELECT();
 80006fc:	f7ff fd26 	bl	800014c <SELECT>

  if (count == 1)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d111      	bne.n	800072a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2051      	movs	r0, #81	; 0x51
 800070a:	f7ff fe85 	bl	8000418 <SD_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d129      	bne.n	8000768 <SD_disk_read+0xb0>
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	f7ff fdf3 	bl	8000304 <SD_RxDataBlock>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d021      	beq.n	8000768 <SD_disk_read+0xb0>
      count = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	e01e      	b.n	8000768 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2052      	movs	r0, #82	; 0x52
 800072e:	f7ff fe73 	bl	8000418 <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d117      	bne.n	8000768 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f7ff fde1 	bl	8000304 <SD_RxDataBlock>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800074e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1ed      	bne.n	8000738 <SD_disk_read+0x80>
 800075c:	e000      	b.n	8000760 <SD_disk_read+0xa8>
          break;
 800075e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	204c      	movs	r0, #76	; 0x4c
 8000764:	f7ff fe58 	bl	8000418 <SD_SendCmd>
    }
  }

  DESELECT();
 8000768:	f7ff fcfc 	bl	8000164 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800076c:	f7ff fd20 	bl	80001b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	200000a4 	.word	0x200000a4

0800078c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <SD_disk_write+0x1c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SD_disk_write+0x20>
    return RES_PARERR;
 80007a8:	2304      	movs	r3, #4
 80007aa:	e06b      	b.n	8000884 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SD_disk_write+0x100>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ba:	2303      	movs	r3, #3
 80007bc:	e062      	b.n	8000884 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <SD_disk_write+0x100>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007cc:	2302      	movs	r3, #2
 80007ce:	e059      	b.n	8000884 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <SD_disk_write+0x104>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	607b      	str	r3, [r7, #4]

  SELECT();
 80007e2:	f7ff fcb3 	bl	800014c <SELECT>

  if (count == 1)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d110      	bne.n	800080e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	2058      	movs	r0, #88	; 0x58
 80007f0:	f7ff fe12 	bl	8000418 <SD_SendCmd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d13a      	bne.n	8000870 <SD_disk_write+0xe4>
 80007fa:	21fe      	movs	r1, #254	; 0xfe
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f7ff fdb7 	bl	8000370 <SD_TxDataBlock>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d033      	beq.n	8000870 <SD_disk_write+0xe4>
      count = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e030      	b.n	8000870 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SD_disk_write+0x104>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2077      	movs	r0, #119	; 0x77
 800081e:	f7ff fdfb 	bl	8000418 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2057      	movs	r0, #87	; 0x57
 8000826:	f7ff fdf7 	bl	8000418 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2059      	movs	r0, #89	; 0x59
 800082e:	f7ff fdf3 	bl	8000418 <SD_SendCmd>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11b      	bne.n	8000870 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000838:	21fc      	movs	r1, #252	; 0xfc
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fd98 	bl	8000370 <SD_TxDataBlock>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800084c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1ee      	bne.n	8000838 <SD_disk_write+0xac>
 800085a:	e000      	b.n	800085e <SD_disk_write+0xd2>
          break;
 800085c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800085e:	21fd      	movs	r1, #253	; 0xfd
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd85 	bl	8000370 <SD_TxDataBlock>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <SD_disk_write+0xe4>
      {
        count = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000870:	f7ff fc78 	bl	8000164 <DESELECT>
  SPI_RxByte();
 8000874:	f7ff fc9c 	bl	80001b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	200000a4 	.word	0x200000a4

08000894 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	603a      	str	r2, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	460b      	mov	r3, r1
 80008a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e11b      	b.n	8000aea <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d129      	bne.n	8000912 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d017      	beq.n	80008f6 <SD_disk_ioctl+0x62>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	dc1f      	bgt.n	800090a <SD_disk_ioctl+0x76>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <SD_disk_ioctl+0x40>
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d00b      	beq.n	80008ea <SD_disk_ioctl+0x56>
 80008d2:	e01a      	b.n	800090a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80008d4:	f7ff fd0c 	bl	80002f0 <SD_CheckPower>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80008de:	f7ff fcfb 	bl	80002d8 <SD_PowerOff>
      res = RES_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008e8:	e0fd      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80008ea:	f7ff fca9 	bl	8000240 <SD_PowerOn>
      res = RES_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008f4:	e0f7      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	1c5c      	adds	r4, r3, #1
 80008fa:	f7ff fcf9 	bl	80002f0 <SD_CheckPower>
 80008fe:	4603      	mov	r3, r0
 8000900:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000902:	2300      	movs	r3, #0
 8000904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000908:	e0ed      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800090a:	2304      	movs	r3, #4
 800090c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000910:	e0e9      	b.n	8000ae6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000912:	4b78      	ldr	r3, [pc, #480]	; (8000af4 <SD_disk_ioctl+0x260>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000920:	2303      	movs	r3, #3
 8000922:	e0e2      	b.n	8000aea <SD_disk_ioctl+0x256>

    SELECT();
 8000924:	f7ff fc12 	bl	800014c <SELECT>

    switch (ctrl)
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b0d      	cmp	r3, #13
 800092c:	f200 80cc 	bhi.w	8000ac8 <SD_disk_ioctl+0x234>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <SD_disk_ioctl+0xa4>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000a33 	.word	0x08000a33
 800093c:	08000971 	.word	0x08000971
 8000940:	08000a23 	.word	0x08000a23
 8000944:	08000ac9 	.word	0x08000ac9
 8000948:	08000ac9 	.word	0x08000ac9
 800094c:	08000ac9 	.word	0x08000ac9
 8000950:	08000ac9 	.word	0x08000ac9
 8000954:	08000ac9 	.word	0x08000ac9
 8000958:	08000ac9 	.word	0x08000ac9
 800095c:	08000ac9 	.word	0x08000ac9
 8000960:	08000ac9 	.word	0x08000ac9
 8000964:	08000a45 	.word	0x08000a45
 8000968:	08000a69 	.word	0x08000a69
 800096c:	08000a8d 	.word	0x08000a8d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000970:	2100      	movs	r1, #0
 8000972:	2049      	movs	r0, #73	; 0x49
 8000974:	f7ff fd50 	bl	8000418 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 80a8 	bne.w	8000ad0 <SD_disk_ioctl+0x23c>
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2110      	movs	r1, #16
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fcbc 	bl	8000304 <SD_RxDataBlock>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 809e 	beq.w	8000ad0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	099b      	lsrs	r3, r3, #6
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10e      	bne.n	80009bc <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800099e:	7d7b      	ldrb	r3, [r7, #21]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	7d3b      	ldrb	r3, [r7, #20]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009b2:	8bfb      	ldrh	r3, [r7, #30]
 80009b4:	029a      	lsls	r2, r3, #10
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e02e      	b.n	8000a1a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009bc:	7c7b      	ldrb	r3, [r7, #17]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	7dbb      	ldrb	r3, [r7, #22]
 80009c6:	09db      	lsrs	r3, r3, #7
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	7d7b      	ldrb	r3, [r7, #21]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 0306 	and.w	r3, r3, #6
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3302      	adds	r3, #2
 80009e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009e4:	7d3b      	ldrb	r3, [r7, #20]
 80009e6:	099b      	lsrs	r3, r3, #6
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	7cbb      	ldrb	r3, [r7, #18]
 80009fa:	029b      	lsls	r3, r3, #10
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4413      	add	r3, r2
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3301      	adds	r3, #1
 8000a0a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a0c:	8bfa      	ldrh	r2, [r7, #30]
 8000a0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a12:	3b09      	subs	r3, #9
 8000a14:	409a      	lsls	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a20:	e056      	b.n	8000ad0 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a28:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a30:	e055      	b.n	8000ade <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a32:	f7ff fbe9 	bl	8000208 <SD_ReadyWait>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d14b      	bne.n	8000ad4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a42:	e047      	b.n	8000ad4 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a44:	2100      	movs	r1, #0
 8000a46:	2049      	movs	r0, #73	; 0x49
 8000a48:	f7ff fce6 	bl	8000418 <SD_SendCmd>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d142      	bne.n	8000ad8 <SD_disk_ioctl+0x244>
 8000a52:	2110      	movs	r1, #16
 8000a54:	6a38      	ldr	r0, [r7, #32]
 8000a56:	f7ff fc55 	bl	8000304 <SD_RxDataBlock>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d03b      	beq.n	8000ad8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a66:	e037      	b.n	8000ad8 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a68:	2100      	movs	r1, #0
 8000a6a:	204a      	movs	r0, #74	; 0x4a
 8000a6c:	f7ff fcd4 	bl	8000418 <SD_SendCmd>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d132      	bne.n	8000adc <SD_disk_ioctl+0x248>
 8000a76:	2110      	movs	r1, #16
 8000a78:	6a38      	ldr	r0, [r7, #32]
 8000a7a:	f7ff fc43 	bl	8000304 <SD_RxDataBlock>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d02b      	beq.n	8000adc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a8a:	e027      	b.n	8000adc <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	207a      	movs	r0, #122	; 0x7a
 8000a90:	f7ff fcc2 	bl	8000418 <SD_SendCmd>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d116      	bne.n	8000ac8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aa0:	e00b      	b.n	8000aba <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000aa2:	6a3c      	ldr	r4, [r7, #32]
 8000aa4:	1c63      	adds	r3, r4, #1
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	f7ff fb82 	bl	80001b0 <SPI_RxByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d9ef      	bls.n	8000aa2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ace:	e006      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000ad0:	bf00      	nop
 8000ad2:	e004      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000ad4:	bf00      	nop
 8000ad6:	e002      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000ad8:	bf00      	nop
 8000ada:	e000      	b.n	8000ade <SD_disk_ioctl+0x24a>
      break;
 8000adc:	bf00      	nop
    }

    DESELECT();
 8000ade:	f7ff fb41 	bl	8000164 <DESELECT>
    SPI_RxByte();
 8000ae2:	f7ff fb65 	bl	80001b0 <SPI_RxByte>
  }

  return res;
 8000ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	372c      	adds	r7, #44	; 0x2c
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f001 f908 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f820 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 fafe 	bl	8001104 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b08:	f000 fade 	bl	80010c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b0c:	f000 f876 	bl	8000bfc <MX_ADC1_Init>
  MX_I2C2_Init();
 8000b10:	f000 f8c2 	bl	8000c98 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b14:	f000 f8ee 	bl	8000cf4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b18:	f000 f9a0 	bl	8000e5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b1c:	f000 fa0e 	bl	8000f3c <MX_TIM3_Init>
  MX_FATFS_Init();
 8000b20:	f004 fd64 	bl	80055ec <MX_FATFS_Init>
  MX_TIM4_Init();
 8000b24:	f000 fa58 	bl	8000fd8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000b28:	f000 f91a 	bl	8000d60 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 faa2 	bl	8001074 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  fresult = SD_Init();
 8000b30:	f000 fb78 	bl	8001224 <SD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <main+0x48>)
 8000b3a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x44>
 8000b3e:	bf00      	nop
 8000b40:	20000a74 	.word	0x20000a74

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4e:	2228      	movs	r2, #40	; 0x28
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f007 fef4 	bl	8008940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 f944 	bl	8002e28 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ba6:	f000 fb1b 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fbae 	bl	8003328 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd2:	f000 fb05 	bl	80011e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fd3a 	bl	800365c <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bee:	f000 faf7 	bl	80011e0 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3750      	adds	r7, #80	; 0x50
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <MX_ADC1_Init+0x98>)
 8000c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c28:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c3c:	f001 f8ca 	bl	8001dd4 <HAL_ADC_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c46:	f000 facb 	bl	80011e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c52:	2307      	movs	r3, #7
 8000c54:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c5c:	f001 f992 	bl	8001f84 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 fabb 	bl	80011e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c6a:	2309      	movs	r3, #9
 8000c6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_ADC1_Init+0x94>)
 8000c78:	f001 f984 	bl	8001f84 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c82:	f000 faad 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200009b8 	.word	0x200009b8
 8000c94:	40012400 	.word	0x40012400

08000c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <MX_I2C2_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_I2C2_Init+0x58>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cd6:	f001 ff63 	bl	8002ba0 <HAL_I2C_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 fa7e 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000091c 	.word	0x2000091c
 8000cec:	40005800 	.word	0x40005800
 8000cf0:	000186a0 	.word	0x000186a0

08000cf4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MX_SPI1_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d28:	2210      	movs	r2, #16
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d46:	f002 fd3f 	bl	80037c8 <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d50:	f000 fa46 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000a78 	.word	0x20000a78
 8000d5c:	40013000 	.word	0x40013000

08000d60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <MX_TIM1_Init+0xf8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d92:	2247      	movs	r2, #71	; 0x47
 8000d94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000d9e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db6:	4827      	ldr	r0, [pc, #156]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000db8:	f003 fa1e 	bl	80041f8 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000dc2:	f000 fa0d 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000dd4:	f003 fca6 	bl	8004724 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000dde:	f000 f9ff 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000de4:	f003 faaa 	bl	800433c <HAL_TIM_IC_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dee:	f000 f9f7 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000e02:	f003 ff87 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000e0c:	f000 f9e8 	bl	80011e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000e28:	f003 fbe8 	bl	80045fc <HAL_TIM_IC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e32:	f000 f9d5 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM1_Init+0xf4>)
 8000e3e:	f003 fbdd 	bl	80045fc <HAL_TIM_IC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000e48:	f000 f9ca 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000a2c 	.word	0x20000a2c
 8000e58:	40012c00 	.word	0x40012c00

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e90:	2247      	movs	r2, #71	; 0x47
 8000e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000e9c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eae:	4822      	ldr	r0, [pc, #136]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000eb0:	f003 f9a2 	bl	80041f8 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000eba:	f000 f991 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000ecc:	f003 fc2a 	bl	8004724 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ed6:	f000 f983 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eda:	4817      	ldr	r0, [pc, #92]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000edc:	f003 fa2e 	bl	800433c <HAL_TIM_IC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ee6:	f000 f97b 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000efa:	f003 ff0b 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f04:	f000 f96c 	bl	80011e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM2_Init+0xdc>)
 8000f20:	f003 fb6c 	bl	80045fc <HAL_TIM_IC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f2a:	f000 f959 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000ad0 	.word	0x20000ad0

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_TIM3_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f60:	2247      	movs	r2, #71	; 0x47
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f6c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7e:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f80:	f003 f93a 	bl	80041f8 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f929 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000f9c:	f003 fbc2 	bl	8004724 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 f91b 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM3_Init+0x94>)
 8000fb8:	f003 feac 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fc2:	f000 f90d 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000970 	.word	0x20000970
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM4_Init+0x94>)
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_TIM4_Init+0x98>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_TIM4_Init+0x94>)
 8000ffc:	2247      	movs	r2, #71	; 0x47
 8000ffe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM4_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_TIM4_Init+0x94>)
 8001008:	f242 720f 	movw	r2, #9999	; 0x270f
 800100c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_TIM4_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM4_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_TIM4_Init+0x94>)
 800101c:	f003 f8ec 	bl	80041f8 <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f8db 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_TIM4_Init+0x94>)
 8001038:	f003 fb74 	bl	8004724 <HAL_TIM_ConfigClockSource>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f8cd 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_TIM4_Init+0x94>)
 8001054:	f003 fe5e 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800105e:	f000 f8bf 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200008d4 	.word	0x200008d4
 8001070:	40000800 	.word	0x40000800

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_USART2_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001080:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010ac:	f003 fea2 	bl	8004df4 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f893 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000b18 	.word	0x20000b18
 80010c4:	40004400 	.word	0x40004400

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_DMA_Init+0x38>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MX_DMA_Init+0x38>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_DMA_Init+0x38>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200b      	movs	r0, #11
 80010ec:	f001 f95b 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010f0:	200b      	movs	r0, #11
 80010f2:	f001 f974 	bl	80023de <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <MX_GPIO_Init+0xd4>)
 8001180:	f001 fcdc 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_GPIO_Init+0xd8>)
 800118c:	f001 fcd6 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0xd4>)
 80011aa:	f001 fb43 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011bc:	2301      	movs	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_GPIO_Init+0xd8>)
 80011c8:	f001 fb34 	bl	8002834 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40010800 	.word	0x40010800

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <bufclear>:
		i++;
	return i;
}

void bufclear(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
	for (int i=0; i<SD_BUFFSIZE; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	e009      	b.n	800120c <bufclear+0x20>
		sdCard.buffer[i] = '\0';
 80011f8:	4a09      	ldr	r2, [pc, #36]	; (8001220 <bufclear+0x34>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<SD_BUFFSIZE; i++)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b1f      	cmp	r3, #31
 8001210:	ddf2      	ble.n	80011f8 <bufclear+0xc>
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200002e0 	.word	0x200002e0

08001224 <SD_Init>:

FRESULT SD_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 8001228:	2200      	movs	r2, #0
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <SD_Init+0x9c>)
 800122c:	4825      	ldr	r0, [pc, #148]	; (80012c4 <SD_Init+0xa0>)
 800122e:	f006 fd21 	bl	8007c74 <f_mount>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <SD_Init+0xa4>)
 8001238:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <SD_Init+0xa4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <SD_Init+0x24>
		return fresult;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <SD_Init+0xa4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	e039      	b.n	80012bc <SD_Init+0x98>

	fresult = SD_loadSettings();
 8001248:	f000 f844 	bl	80012d4 <SD_loadSettings>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <SD_Init+0xa4>)
 8001252:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <SD_Init+0xa4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <SD_Init+0x3e>
		return fresult;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <SD_Init+0xa4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	e02c      	b.n	80012bc <SD_Init+0x98>


	fresult = SD_createFile();
 8001262:	f000 f967 	bl	8001534 <SD_createFile>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <SD_Init+0xa4>)
 800126c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <SD_Init+0xa4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <SD_Init+0x58>
		return fresult;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <SD_Init+0xa4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	e01f      	b.n	80012bc <SD_Init+0x98>

	bufclear();
 800127c:	f7ff ffb6 	bl	80011ec <bufclear>

	LDEBUG;
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <SD_Init+0xa8>)
 8001286:	f001 fc71 	bl	8002b6c <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <SD_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
	sdCard.blen = 0;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <SD_Init+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <SD_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <SD_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f8a3 25d0 	strh.w	r2, [r3, #1488]	; 0x5d0
	sdCard.timer = 0;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <SD_Init+0xa0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f8a3 25d2 	strh.w	r2, [r3, #1490]	; 0x5d2

	HAL_TIM_Base_Start_IT(&htim2);
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <SD_Init+0xac>)
 80012b4:	f002 fff0 	bl	8004298 <HAL_TIM_Base_Start_IT>

	return fresult;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <SD_Init+0xa4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	080091dc 	.word	0x080091dc
 80012c4:	200002e0 	.word	0x200002e0
 80012c8:	20000a74 	.word	0x20000a74
 80012cc:	40011000 	.word	0x40011000
 80012d0:	20000ad0 	.word	0x20000ad0

080012d4 <SD_loadSettings>:

FRESULT SD_loadSettings(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 80012d8:	4912      	ldr	r1, [pc, #72]	; (8001324 <SD_loadSettings+0x50>)
 80012da:	4813      	ldr	r0, [pc, #76]	; (8001328 <SD_loadSettings+0x54>)
 80012dc:	f007 fb38 	bl	8008950 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 80012e0:	2201      	movs	r2, #1
 80012e2:	4911      	ldr	r1, [pc, #68]	; (8001328 <SD_loadSettings+0x54>)
 80012e4:	4811      	ldr	r0, [pc, #68]	; (800132c <SD_loadSettings+0x58>)
 80012e6:	f006 fd0d 	bl	8007d04 <f_open>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <SD_loadSettings+0x5c>)
 80012f0:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <SD_loadSettings+0x5c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d106      	bne.n	8001308 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 80012fa:	f000 f81b 	bl	8001334 <SD_createSettings>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <SD_loadSettings+0x5c>)
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e009      	b.n	800131c <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <SD_loadSettings+0x5c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 8001310:	f000 f866 	bl	80013e0 <SD_searchSettings>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SD_loadSettings+0x5c>)
 800131a:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SD_loadSettings+0x5c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	080091e0 	.word	0x080091e0
 8001328:	200008a4 	.word	0x200008a4
 800132c:	20000710 	.word	0x20000710
 8001330:	20000a74 	.word	0x20000a74

08001334 <SD_createSettings>:

FRESULT SD_createSettings(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <SD_createSettings+0x90>)
 800133c:	f007 f9ed 	bl	800871a <f_close>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <SD_createSettings+0x94>)
 8001346:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8001348:	2212      	movs	r2, #18
 800134a:	4920      	ldr	r1, [pc, #128]	; (80013cc <SD_createSettings+0x98>)
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <SD_createSettings+0x90>)
 800134e:	f006 fcd9 	bl	8007d04 <f_open>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <SD_createSettings+0x94>)
 8001358:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <SD_createSettings+0x94>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <SD_createSettings+0x34>
		return fresult;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <SD_createSettings+0x94>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	e029      	b.n	80013bc <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8001368:	4919      	ldr	r1, [pc, #100]	; (80013d0 <SD_createSettings+0x9c>)
 800136a:	481a      	ldr	r0, [pc, #104]	; (80013d4 <SD_createSettings+0xa0>)
 800136c:	f007 faf0 	bl	8008950 <siprintf>
 8001370:	6078      	str	r0, [r7, #4]
			";Seleciona o Modo de operação da Placa\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <SD_createSettings+0xa4>)
 8001376:	4917      	ldr	r1, [pc, #92]	; (80013d4 <SD_createSettings+0xa0>)
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <SD_createSettings+0x90>)
 800137a:	f006 ff98 	bl	80082ae <f_write>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <SD_createSettings+0x94>)
 8001384:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <SD_createSettings+0x94>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <SD_createSettings+0x60>
		return fresult;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <SD_createSettings+0x94>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	e013      	b.n	80013bc <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <SD_createSettings+0x90>)
 8001396:	f007 f9c0 	bl	800871a <f_close>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SD_createSettings+0x94>)
 80013a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <SD_createSettings+0x94>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <SD_createSettings+0x7c>
		return fresult;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <SD_createSettings+0x94>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	e005      	b.n	80013bc <SD_createSettings+0x88>

	sdCard.mode = 0;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <SD_createSettings+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8a3 25f0 	strh.w	r2, [r3, #1520]	; 0x5f0

	return fresult;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <SD_createSettings+0x94>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000710 	.word	0x20000710
 80013c8:	20000a74 	.word	0x20000a74
 80013cc:	200008a4 	.word	0x200008a4
 80013d0:	080091f0 	.word	0x080091f0
 80013d4:	20000764 	.word	0x20000764
 80013d8:	200008bc 	.word	0x200008bc
 80013dc:	200002e0 	.word	0x200002e0

080013e0 <SD_searchSettings>:

FRESULT SD_searchSettings(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
	int index = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 80013ee:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <SD_searchSettings+0x140>)
 80013f0:	f240 123f 	movw	r2, #319	; 0x13f
 80013f4:	494b      	ldr	r1, [pc, #300]	; (8001524 <SD_searchSettings+0x144>)
 80013f6:	484c      	ldr	r0, [pc, #304]	; (8001528 <SD_searchSettings+0x148>)
 80013f8:	f006 fe04 	bl	8008004 <f_read>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <SD_searchSettings+0x14c>)
 8001402:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001404:	4b49      	ldr	r3, [pc, #292]	; (800152c <SD_searchSettings+0x14c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <SD_searchSettings+0x38>
		return fresult;
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <SD_searchSettings+0x14c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	e081      	b.n	8001516 <SD_searchSettings+0x136>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4a45      	ldr	r2, [pc, #276]	; (8001530 <SD_searchSettings+0x150>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b3d      	cmp	r3, #61	; 0x3d
 8001426:	d1f4      	bne.n	8001412 <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800142e:	db0b      	blt.n	8001448 <SD_searchSettings+0x68>
	{
		fresult = SD_createSettings();
 8001430:	f7ff ff80 	bl	8001334 <SD_createSettings>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <SD_searchSettings+0x14c>)
 800143a:	701a      	strb	r2, [r3, #0]
		return fresult;
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <SD_searchSettings+0x14c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	e069      	b.n	8001516 <SD_searchSettings+0x136>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <SD_searchSettings+0x150>)
 8001450:	4413      	add	r3, r2
 8001452:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8001456:	2b40      	cmp	r3, #64	; 0x40
 8001458:	d908      	bls.n	800146c <SD_searchSettings+0x8c>
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a33      	ldr	r2, [pc, #204]	; (8001530 <SD_searchSettings+0x150>)
 8001462:	4413      	add	r3, r2
 8001464:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8001468:	2b5a      	cmp	r3, #90	; 0x5a
 800146a:	d9ea      	bls.n	8001442 <SD_searchSettings+0x62>
	deindex--;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3b01      	subs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e012      	b.n	800149e <SD_searchSettings+0xbe>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad2      	subs	r2, r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <SD_searchSettings+0x150>)
 8001484:	4413      	add	r3, r2
 8001486:	f893 1484 	ldrb.w	r1, [r3, #1156]	; 0x484
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <SD_searchSettings+0x150>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 8001494:	460a      	mov	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dde7      	ble.n	8001478 <SD_searchSettings+0x98>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <SD_searchSettings+0x150>)
 80014aa:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80014ae:	2b4d      	cmp	r3, #77	; 0x4d
 80014b0:	d129      	bne.n	8001506 <SD_searchSettings+0x126>
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <SD_searchSettings+0x150>)
 80014b4:	f893 35e1 	ldrb.w	r3, [r3, #1505]	; 0x5e1
 80014b8:	2b4f      	cmp	r3, #79	; 0x4f
 80014ba:	d124      	bne.n	8001506 <SD_searchSettings+0x126>
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <SD_searchSettings+0x150>)
 80014be:	f893 35e2 	ldrb.w	r3, [r3, #1506]	; 0x5e2
 80014c2:	2b44      	cmp	r3, #68	; 0x44
 80014c4:	d11f      	bne.n	8001506 <SD_searchSettings+0x126>
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <SD_searchSettings+0x150>)
 80014c8:	f893 35e3 	ldrb.w	r3, [r3, #1507]	; 0x5e3
 80014cc:	2b45      	cmp	r3, #69	; 0x45
 80014ce:	d11a      	bne.n	8001506 <SD_searchSettings+0x126>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <SD_searchSettings+0x150>)
 80014d2:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 80014d6:	2b2f      	cmp	r3, #47	; 0x2f
 80014d8:	d90e      	bls.n	80014f8 <SD_searchSettings+0x118>
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <SD_searchSettings+0x150>)
 80014dc:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 80014e0:	2b39      	cmp	r3, #57	; 0x39
 80014e2:	d809      	bhi.n	80014f8 <SD_searchSettings+0x118>
			sdCard.mode = sdCard.setting[5] - 48;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <SD_searchSettings+0x150>)
 80014e6:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b30      	subs	r3, #48	; 0x30
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <SD_searchSettings+0x150>)
 80014f2:	f8a3 25f0 	strh.w	r2, [r3, #1520]	; 0x5f0
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 80014f6:	e00c      	b.n	8001512 <SD_searchSettings+0x132>
		else
			fresult = SD_createSettings();
 80014f8:	f7ff ff1c 	bl	8001334 <SD_createSettings>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <SD_searchSettings+0x14c>)
 8001502:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8001504:	e005      	b.n	8001512 <SD_searchSettings+0x132>
	}
	else
		fresult = SD_createSettings();
 8001506:	f7ff ff15 	bl	8001334 <SD_createSettings>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <SD_searchSettings+0x14c>)
 8001510:	701a      	strb	r2, [r3, #0]

	return fresult;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <SD_searchSettings+0x14c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200008b8 	.word	0x200008b8
 8001524:	20000764 	.word	0x20000764
 8001528:	20000710 	.word	0x20000710
 800152c:	20000a74 	.word	0x20000a74
 8001530:	200002e0 	.word	0x200002e0

08001534 <SD_createFile>:

FRESULT SD_createFile(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4921      	ldr	r1, [pc, #132]	; (80015c8 <SD_createFile+0x94>)
 8001542:	4822      	ldr	r0, [pc, #136]	; (80015cc <SD_createFile+0x98>)
 8001544:	f007 fa04 	bl	8008950 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8001548:	2206      	movs	r2, #6
 800154a:	4920      	ldr	r1, [pc, #128]	; (80015cc <SD_createFile+0x98>)
 800154c:	4820      	ldr	r0, [pc, #128]	; (80015d0 <SD_createFile+0x9c>)
 800154e:	f006 fbd9 	bl	8007d04 <f_open>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <SD_createFile+0xa0>)
 8001558:	701a      	strb	r2, [r3, #0]
		filnum++;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	481c      	ldr	r0, [pc, #112]	; (80015d8 <SD_createFile+0xa4>)
 8001566:	f001 fb01 	bl	8002b6c <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <SD_createFile+0xa0>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b08      	cmp	r3, #8
 8001570:	d0e5      	beq.n	800153e <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8001572:	491a      	ldr	r1, [pc, #104]	; (80015dc <SD_createFile+0xa8>)
 8001574:	481a      	ldr	r0, [pc, #104]	; (80015e0 <SD_createFile+0xac>)
 8001576:	f007 f9eb 	bl	8008950 <siprintf>
 800157a:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <SD_createFile+0xb0>)
 8001580:	4917      	ldr	r1, [pc, #92]	; (80015e0 <SD_createFile+0xac>)
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <SD_createFile+0x9c>)
 8001584:	f006 fe93 	bl	80082ae <f_write>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <SD_createFile+0xa0>)
 800158e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <SD_createFile+0xa0>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <SD_createFile+0x6a>
		return fresult;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <SD_createFile+0xa0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	e00f      	b.n	80015be <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <SD_createFile+0x9c>)
 80015a0:	f007 f8bb 	bl	800871a <f_close>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <SD_createFile+0xa0>)
 80015aa:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <SD_createFile+0xa0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <SD_createFile+0x86>
		return fresult;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <SD_createFile+0xa0>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	e001      	b.n	80015be <SD_createFile+0x8a>

	return fresult;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SD_createFile+0xa0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08009224 	.word	0x08009224
 80015cc:	200008a4 	.word	0x200008a4
 80015d0:	20000710 	.word	0x20000710
 80015d4:	20000a74 	.word	0x20000a74
 80015d8:	40011000 	.word	0x40011000
 80015dc:	08009234 	.word	0x08009234
 80015e0:	20000744 	.word	0x20000744
 80015e4:	200008bc 	.word	0x200008bc

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_MspInit+0x5c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_MspInit+0x5c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_MspInit+0x5c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_MspInit+0x60>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_MspInit+0x60>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a33      	ldr	r2, [pc, #204]	; (8001734 <HAL_ADC_MspInit+0xe8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d15f      	bne.n	800172c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_ADC_MspInit+0xec>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a31      	ldr	r2, [pc, #196]	; (8001738 <HAL_ADC_MspInit+0xec>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_ADC_MspInit+0xec>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <HAL_ADC_MspInit+0xec>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <HAL_ADC_MspInit+0xec>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_ADC_MspInit+0xec>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_ADC_MspInit+0xec>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_ADC_MspInit+0xec>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_ADC_MspInit+0xec>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b8:	2303      	movs	r3, #3
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4619      	mov	r1, r3
 80016c2:	481e      	ldr	r0, [pc, #120]	; (800173c <HAL_ADC_MspInit+0xf0>)
 80016c4:	f001 f8b6 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016cc:	2303      	movs	r3, #3
 80016ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	4619      	mov	r1, r3
 80016d6:	481a      	ldr	r0, [pc, #104]	; (8001740 <HAL_ADC_MspInit+0xf4>)
 80016d8:	f001 f8ac 	bl	8002834 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_ADC_MspInit+0xfc>)
 80016e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 80016fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001702:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 8001706:	2220      	movs	r2, #32
 8001708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 8001712:	f000 fe7f 	bl	8002414 <HAL_DMA_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800171c:	f7ff fd60 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 8001724:	621a      	str	r2, [r3, #32]
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_ADC_MspInit+0xf8>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40012400 	.word	0x40012400
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	200009e8 	.word	0x200009e8
 8001748:	40020008 	.word	0x40020008

0800174c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <HAL_I2C_MspInit+0x74>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d124      	bne.n	80017b6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_I2C_MspInit+0x78>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_I2C_MspInit+0x78>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_I2C_MspInit+0x78>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	4619      	mov	r1, r3
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <HAL_I2C_MspInit+0x7c>)
 800179a:	f001 f84b 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_I2C_MspInit+0x78>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_I2C_MspInit+0x78>)
 80017a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_I2C_MspInit+0x78>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40005800 	.word	0x40005800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010c00 	.word	0x40010c00

080017cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_SPI_MspInit+0xb4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d145      	bne.n	8001878 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_SPI_MspInit+0xb8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a24      	ldr	r2, [pc, #144]	; (8001884 <HAL_SPI_MspInit+0xb8>)
 80017f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_SPI_MspInit+0xb8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_SPI_MspInit+0xb8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <HAL_SPI_MspInit+0xb8>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_SPI_MspInit+0xb8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800181c:	2328      	movs	r3, #40	; 0x28
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <HAL_SPI_MspInit+0xbc>)
 8001830:	f001 f800 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001834:	2310      	movs	r3, #16
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4810      	ldr	r0, [pc, #64]	; (8001888 <HAL_SPI_MspInit+0xbc>)
 8001848:	f000 fff4 	bl	8002834 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_SPI_MspInit+0xc0>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_SPI_MspInit+0xc0>)
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	210f      	movs	r1, #15
 800186c:	2023      	movs	r0, #35	; 0x23
 800186e:	f000 fd9a 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001872:	2023      	movs	r0, #35	; 0x23
 8001874:	f000 fdb3 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013000 	.word	0x40013000
 8001884:	40021000 	.word	0x40021000
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40010000 	.word	0x40010000

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a59      	ldr	r2, [pc, #356]	; (8001a10 <HAL_TIM_Base_MspInit+0x180>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d145      	bne.n	800193c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80018b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ea:	2302      	movs	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4619      	mov	r1, r3
 80018f4:	4848      	ldr	r0, [pc, #288]	; (8001a18 <HAL_TIM_Base_MspInit+0x188>)
 80018f6:	f000 ff9d 	bl	8002834 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2018      	movs	r0, #24
 8001900:	f000 fd51 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001904:	2018      	movs	r0, #24
 8001906:	f000 fd6a 	bl	80023de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2019      	movs	r0, #25
 8001910:	f000 fd49 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001914:	2019      	movs	r0, #25
 8001916:	f000 fd62 	bl	80023de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	201a      	movs	r0, #26
 8001920:	f000 fd41 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001924:	201a      	movs	r0, #26
 8001926:	f000 fd5a 	bl	80023de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	201b      	movs	r0, #27
 8001930:	f000 fd39 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001934:	201b      	movs	r0, #27
 8001936:	f000 fd52 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800193a:	e064      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001944:	d12c      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a2c      	ldr	r2, [pc, #176]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001976:	2301      	movs	r3, #1
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197e:	2302      	movs	r3, #2
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	4619      	mov	r1, r3
 8001988:	4823      	ldr	r0, [pc, #140]	; (8001a18 <HAL_TIM_Base_MspInit+0x188>)
 800198a:	f000 ff53 	bl	8002834 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201c      	movs	r0, #28
 8001994:	f000 fd07 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001998:	201c      	movs	r0, #28
 800199a:	f000 fd20 	bl	80023de <HAL_NVIC_EnableIRQ>
}
 800199e:	e032      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_TIM_Base_MspInit+0x18c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d114      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	210d      	movs	r1, #13
 80019c6:	201d      	movs	r0, #29
 80019c8:	f000 fced 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019cc:	201d      	movs	r0, #29
 80019ce:	f000 fd06 	bl	80023de <HAL_NVIC_EnableIRQ>
}
 80019d2:	e018      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_TIM_Base_MspInit+0x190>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_TIM_Base_MspInit+0x184>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	210f      	movs	r1, #15
 80019fa:	201e      	movs	r0, #30
 80019fc:	f000 fcd3 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a00:	201e      	movs	r0, #30
 8001a02:	f000 fcec 	bl	80023de <HAL_NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40012c00 	.word	0x40012c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010800 	.word	0x40010800
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000800 	.word	0x40000800

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d137      	bne.n	8001ab4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	61d3      	str	r3, [r2, #28]
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <HAL_UART_MspInit+0xa0>)
 8001a88:	f000 fed4 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <HAL_UART_MspInit+0xa0>)
 8001aa0:	f000 fec8 	bl	8002834 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2026      	movs	r0, #38	; 0x26
 8001aaa:	f000 fc7c 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aae:	2026      	movs	r0, #38	; 0x26
 8001ab0:	f000 fc95 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010800 	.word	0x40010800

08001ac8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <SDTimer_Handler+0x3c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <SDTimer_Handler+0x1c>
    Timer1--;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <SDTimer_Handler+0x3c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <SDTimer_Handler+0x3c>)
 8001ae2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <SDTimer_Handler+0x40>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <SDTimer_Handler+0x34>
    Timer2--;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SDTimer_Handler+0x40>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <SDTimer_Handler+0x40>)
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000b5d 	.word	0x20000b5d
 8001b08:	20000b5c 	.word	0x20000b5c

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <SysTick_Handler+0x30>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <SysTick_Handler+0x30>)
 8001b60:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <SysTick_Handler+0x30>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d904      	bls.n	8001b76 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Handler+0x30>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001b72:	f7ff ffa9 	bl	8001ac8 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 f911 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000a6 	.word	0x200000a6

08001b84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <DMA1_Channel1_IRQHandler+0x10>)
 8001b8a:	f000 fd4d 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200009e8 	.word	0x200009e8

08001b98 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM1_BRK_IRQHandler+0x10>)
 8001b9e:	f002 fc25 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000a2c 	.word	0x20000a2c

08001bac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM1_UP_IRQHandler+0x10>)
 8001bb2:	f002 fc1b 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000a2c 	.word	0x20000a2c

08001bc0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001bc6:	f002 fc11 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000a2c 	.word	0x20000a2c

08001bd4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM1_CC_IRQHandler+0x10>)
 8001bda:	f002 fc07 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000a2c 	.word	0x20000a2c

08001be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM2_IRQHandler+0x10>)
 8001bee:	f002 fbfd 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000ad0 	.word	0x20000ad0

08001bfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <TIM3_IRQHandler+0x10>)
 8001c02:	f002 fbf3 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000970 	.word	0x20000970

08001c10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM4_IRQHandler+0x10>)
 8001c16:	f002 fbe9 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200008d4 	.word	0x200008d4

08001c24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <SPI1_IRQHandler+0x10>)
 8001c2a:	f002 f92f 	bl	8003e8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000a78 	.word	0x20000a78

08001c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <USART2_IRQHandler+0x10>)
 8001c3e:	f003 f927 	bl	8004e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000b18 	.word	0x20000b18

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f006 fe36 	bl	80088ec <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20005000 	.word	0x20005000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200000a8 	.word	0x200000a8
 8001cb4:	20000fd8 	.word	0x20000fd8

08001cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc6:	490d      	ldr	r1, [pc, #52]	; (8001cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ccc:	e002      	b.n	8001cd4 <LoopCopyDataInit>

08001cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd2:	3304      	adds	r3, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd8:	d3f9      	bcc.n	8001cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cdc:	4c0a      	ldr	r4, [pc, #40]	; (8001d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce0:	e001      	b.n	8001ce6 <LoopFillZerobss>

08001ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce4:	3204      	adds	r2, #4

08001ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce8:	d3fb      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cea:	f7ff ffe5 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f006 fe03 	bl	80088f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf2:	f7fe ff01 	bl	8000af8 <main>
  bx lr
 8001cf6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d00:	08009834 	.word	0x08009834
  ldr r2, =_sbss
 8001d04:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d08:	20000fd8 	.word	0x20000fd8

08001d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_2_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x28>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 fb35 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fc5c 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fb4d 	bl	80023fa <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 fb15 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_IncTick+0x20>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_IncTick+0x20>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	20000b60 	.word	0x20000b60

08001dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_GetTick+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000b60 	.word	0x20000b60

08001dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0be      	b.n	8001f74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fc1a 	bl	800164c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f9ab 	bl	8002174 <ADC_ConversionStop_Disable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 8099 	bne.w	8001f62 <HAL_ADC_Init+0x18e>
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 8095 	bne.w	8001f62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e40:	f023 0302 	bic.w	r3, r3, #2
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b1b      	ldrb	r3, [r3, #12]
 8001e5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6c:	d003      	beq.n	8001e76 <HAL_ADC_Init+0xa2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_ADC_Init+0xa8>
 8001e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_Init+0xaa>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7d1b      	ldrb	r3, [r3, #20]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d119      	bne.n	8001ec0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7b1b      	ldrb	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	035a      	lsls	r2, r3, #13
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_ADC_Init+0x1a8>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef0:	d003      	beq.n	8001efa <HAL_ADC_Init+0x126>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d104      	bne.n	8001f04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051b      	lsls	r3, r3, #20
 8001f02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_ADC_Init+0x1ac>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d10b      	bne.n	8001f40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f3e:	e018      	b.n	8001f72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f023 0312 	bic.w	r3, r3, #18
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f60:	e007      	b.n	8001f72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f80:	ff1f0efe 	.word	0xff1f0efe

08001f84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x20>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0dc      	b.n	800215e <HAL_ADC_ConfigChannel+0x1da>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	d81c      	bhi.n	8001fee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b05      	subs	r3, #5
 8001fc6:	221f      	movs	r2, #31
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4019      	ands	r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b05      	subs	r3, #5
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34
 8001fec:	e03c      	b.n	8002068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d81c      	bhi.n	8002030 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b23      	subs	r3, #35	; 0x23
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	4019      	ands	r1, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b23      	subs	r3, #35	; 0x23
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
 800202e:	e01b      	b.n	8002068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b41      	subs	r3, #65	; 0x41
 8002042:	221f      	movs	r2, #31
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4019      	ands	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b41      	subs	r3, #65	; 0x41
 800205c:	fa00 f203 	lsl.w	r2, r0, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b09      	cmp	r3, #9
 800206e:	d91c      	bls.n	80020aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	3b1e      	subs	r3, #30
 8002082:	2207      	movs	r2, #7
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	4019      	ands	r1, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6898      	ldr	r0, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	3b1e      	subs	r3, #30
 800209c:	fa00 f203 	lsl.w	r2, r0, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	e019      	b.n	80020de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6919      	ldr	r1, [r3, #16]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d003      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	d132      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_ADC_ConfigChannel+0x1e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d125      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d126      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002114:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b10      	cmp	r3, #16
 800211c:	d11a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_ADC_ConfigChannel+0x1e8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_ADC_ConfigChannel+0x1ec>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002134:	e002      	b.n	800213c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x1b2>
 8002142:	e007      	b.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40012400 	.word	0x40012400
 800216c:	20000004 	.word	0x20000004
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d12e      	bne.n	80021ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800219e:	f7ff fe0f 	bl	8001dc0 <HAL_GetTick>
 80021a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021a4:	e01b      	b.n	80021de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021a6:	f7ff fe0b 	bl	8001dc0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d914      	bls.n	80021de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10d      	bne.n	80021de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e007      	b.n	80021ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d0dc      	beq.n	80021a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4906      	ldr	r1, [pc, #24]	; (8002290 <__NVIC_EnableIRQ+0x34>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff90 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff2d 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff42 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff90 	bl	80022e8 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5f 	bl	8002294 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff35 	bl	800225c <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e043      	b.n	80024b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_DMA_Init+0xa8>)
 8002432:	4413      	add	r3, r2
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <HAL_DMA_Init+0xac>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_DMA_Init+0xb0>)
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800245e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002462:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800246c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	bffdfff8 	.word	0xbffdfff8
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	40020000 	.word	0x40020000

080024c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d008      	beq.n	80024f0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e020      	b.n	8002532 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020e 	bic.w	r2, r2, #14
 80024fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800254e:	2b02      	cmp	r3, #2
 8002550:	d005      	beq.n	800255e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e051      	b.n	8002602 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020e 	bic.w	r2, r2, #14
 800256c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_DMA_Abort_IT+0xd0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d029      	beq.n	80025dc <HAL_DMA_Abort_IT+0xa0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <HAL_DMA_Abort_IT+0xd4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d022      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x9c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_DMA_Abort_IT+0xd8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d01a      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x96>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_DMA_Abort_IT+0xdc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d012      	beq.n	80025cc <HAL_DMA_Abort_IT+0x90>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_DMA_Abort_IT+0xe0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00a      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x8a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_DMA_Abort_IT+0xe4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d102      	bne.n	80025c0 <HAL_DMA_Abort_IT+0x84>
 80025ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025be:	e00e      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c4:	e00b      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ca:	e008      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d0:	e005      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	e002      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025d8:	2310      	movs	r3, #16
 80025da:	e000      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025dc:	2301      	movs	r3, #1
 80025de:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_DMA_Abort_IT+0xe8>)
 80025e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	4798      	blx	r3
    } 
  }
  return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40020008 	.word	0x40020008
 8002610:	4002001c 	.word	0x4002001c
 8002614:	40020030 	.word	0x40020030
 8002618:	40020044 	.word	0x40020044
 800261c:	40020058 	.word	0x40020058
 8002620:	4002006c 	.word	0x4002006c
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2204      	movs	r2, #4
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d04f      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xc8>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_DMA_IRQHandler+0x1f0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d029      	beq.n	80026d6 <HAL_DMA_IRQHandler+0xae>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_DMA_IRQHandler+0x1f4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xaa>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a63      	ldr	r2, [pc, #396]	; (8002820 <HAL_DMA_IRQHandler+0x1f8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01a      	beq.n	80026cc <HAL_DMA_IRQHandler+0xa4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_DMA_IRQHandler+0x1fc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x9e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <HAL_DMA_IRQHandler+0x200>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x98>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMA_IRQHandler+0x204>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_DMA_IRQHandler+0x92>
 80026b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026b8:	e00e      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026be:	e00b      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026c4:	e008      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026ca:	e005      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d0:	e002      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026d2:	2340      	movs	r3, #64	; 0x40
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026d6:	2304      	movs	r3, #4
 80026d8:	4a55      	ldr	r2, [pc, #340]	; (8002830 <HAL_DMA_IRQHandler+0x208>)
 80026da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8094 	beq.w	800280e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026ee:	e08e      	b.n	800280e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2202      	movs	r2, #2
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d056      	beq.n	80027ae <HAL_DMA_IRQHandler+0x186>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d051      	beq.n	80027ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020a 	bic.w	r2, r2, #10
 8002726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a38      	ldr	r2, [pc, #224]	; (8002818 <HAL_DMA_IRQHandler+0x1f0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d029      	beq.n	800278e <HAL_DMA_IRQHandler+0x166>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a37      	ldr	r2, [pc, #220]	; (800281c <HAL_DMA_IRQHandler+0x1f4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMA_IRQHandler+0x162>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a35      	ldr	r2, [pc, #212]	; (8002820 <HAL_DMA_IRQHandler+0x1f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x15c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a34      	ldr	r2, [pc, #208]	; (8002824 <HAL_DMA_IRQHandler+0x1fc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d012      	beq.n	800277e <HAL_DMA_IRQHandler+0x156>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a32      	ldr	r2, [pc, #200]	; (8002828 <HAL_DMA_IRQHandler+0x200>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x150>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_DMA_IRQHandler+0x204>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <HAL_DMA_IRQHandler+0x14a>
 800276c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002770:	e00e      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	e00b      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 8002778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277c:	e008      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 800277e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002782:	e005      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 8002784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002788:	e002      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 800278a:	2320      	movs	r3, #32
 800278c:	e000      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 800278e:	2302      	movs	r3, #2
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_DMA_IRQHandler+0x208>)
 8002792:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d034      	beq.n	800280e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027ac:	e02f      	b.n	800280e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_DMA_IRQHandler+0x1e8>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 020e 	bic.w	r2, r2, #14
 80027d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
    }
  }
  return;
 800280e:	bf00      	nop
 8002810:	bf00      	nop
}
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40020008 	.word	0x40020008
 800281c:	4002001c 	.word	0x4002001c
 8002820:	40020030 	.word	0x40020030
 8002824:	40020044 	.word	0x40020044
 8002828:	40020058 	.word	0x40020058
 800282c:	4002006c 	.word	0x4002006c
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b08b      	sub	sp, #44	; 0x2c
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002846:	e169      	b.n	8002b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002848:	2201      	movs	r2, #1
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8158 	bne.w	8002b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a9a      	ldr	r2, [pc, #616]	; (8002ad4 <HAL_GPIO_Init+0x2a0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002870:	4a98      	ldr	r2, [pc, #608]	; (8002ad4 <HAL_GPIO_Init+0x2a0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d875      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 8002876:	4a98      	ldr	r2, [pc, #608]	; (8002ad8 <HAL_GPIO_Init+0x2a4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d058      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 800287c:	4a96      	ldr	r2, [pc, #600]	; (8002ad8 <HAL_GPIO_Init+0x2a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d86f      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 8002882:	4a96      	ldr	r2, [pc, #600]	; (8002adc <HAL_GPIO_Init+0x2a8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d052      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002888:	4a94      	ldr	r2, [pc, #592]	; (8002adc <HAL_GPIO_Init+0x2a8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d869      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 800288e:	4a94      	ldr	r2, [pc, #592]	; (8002ae0 <HAL_GPIO_Init+0x2ac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d04c      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002894:	4a92      	ldr	r2, [pc, #584]	; (8002ae0 <HAL_GPIO_Init+0x2ac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d863      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 800289a:	4a92      	ldr	r2, [pc, #584]	; (8002ae4 <HAL_GPIO_Init+0x2b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d046      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 80028a0:	4a90      	ldr	r2, [pc, #576]	; (8002ae4 <HAL_GPIO_Init+0x2b0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d85d      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d82a      	bhi.n	8002900 <HAL_GPIO_Init+0xcc>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d859      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_GPIO_Init+0x80>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	0800292f 	.word	0x0800292f
 80028b8:	08002909 	.word	0x08002909
 80028bc:	0800291b 	.word	0x0800291b
 80028c0:	0800295d 	.word	0x0800295d
 80028c4:	08002963 	.word	0x08002963
 80028c8:	08002963 	.word	0x08002963
 80028cc:	08002963 	.word	0x08002963
 80028d0:	08002963 	.word	0x08002963
 80028d4:	08002963 	.word	0x08002963
 80028d8:	08002963 	.word	0x08002963
 80028dc:	08002963 	.word	0x08002963
 80028e0:	08002963 	.word	0x08002963
 80028e4:	08002963 	.word	0x08002963
 80028e8:	08002963 	.word	0x08002963
 80028ec:	08002963 	.word	0x08002963
 80028f0:	08002963 	.word	0x08002963
 80028f4:	08002963 	.word	0x08002963
 80028f8:	08002911 	.word	0x08002911
 80028fc:	08002925 	.word	0x08002925
 8002900:	4a79      	ldr	r2, [pc, #484]	; (8002ae8 <HAL_GPIO_Init+0x2b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002906:	e02c      	b.n	8002962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e029      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	3304      	adds	r3, #4
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e024      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	3308      	adds	r3, #8
 8002920:	623b      	str	r3, [r7, #32]
          break;
 8002922:	e01f      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	330c      	adds	r3, #12
 800292a:	623b      	str	r3, [r7, #32]
          break;
 800292c:	e01a      	b.n	8002964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002936:	2304      	movs	r3, #4
 8002938:	623b      	str	r3, [r7, #32]
          break;
 800293a:	e013      	b.n	8002964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002944:	2308      	movs	r3, #8
 8002946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	611a      	str	r2, [r3, #16]
          break;
 800294e:	e009      	b.n	8002964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	615a      	str	r2, [r3, #20]
          break;
 800295a:	e003      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x130>
          break;
 8002962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d801      	bhi.n	800296e <HAL_GPIO_Init+0x13a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	e001      	b.n	8002972 <HAL_GPIO_Init+0x13e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2bff      	cmp	r3, #255	; 0xff
 8002978:	d802      	bhi.n	8002980 <HAL_GPIO_Init+0x14c>
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_Init+0x152>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	3b08      	subs	r3, #8
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	210f      	movs	r1, #15
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80b1 	beq.w	8002b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b4:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <HAL_GPIO_Init+0x2b8>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a4c      	ldr	r2, [pc, #304]	; (8002aec <HAL_GPIO_Init+0x2b8>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_GPIO_Init+0x2bc>)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <HAL_GPIO_Init+0x2c0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_GPIO_Init+0x1ec>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <HAL_GPIO_Init+0x2c4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00d      	beq.n	8002a1c <HAL_GPIO_Init+0x1e8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3e      	ldr	r2, [pc, #248]	; (8002afc <HAL_GPIO_Init+0x2c8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <HAL_GPIO_Init+0x1e4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3d      	ldr	r2, [pc, #244]	; (8002b00 <HAL_GPIO_Init+0x2cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_GPIO_Init+0x1e0>
 8002a10:	2303      	movs	r3, #3
 8002a12:	e006      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a20:	2300      	movs	r3, #0
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a32:	492f      	ldr	r1, [pc, #188]	; (8002af0 <HAL_GPIO_Init+0x2bc>)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	492c      	ldr	r1, [pc, #176]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	4928      	ldr	r1, [pc, #160]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4922      	ldr	r1, [pc, #136]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	491e      	ldr	r1, [pc, #120]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4918      	ldr	r1, [pc, #96]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4914      	ldr	r1, [pc, #80]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d021      	beq.n	8002b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	490e      	ldr	r1, [pc, #56]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e021      	b.n	8002b16 <HAL_GPIO_Init+0x2e2>
 8002ad2:	bf00      	nop
 8002ad4:	10320000 	.word	0x10320000
 8002ad8:	10310000 	.word	0x10310000
 8002adc:	10220000 	.word	0x10220000
 8002ae0:	10210000 	.word	0x10210000
 8002ae4:	10120000 	.word	0x10120000
 8002ae8:	10110000 	.word	0x10110000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010800 	.word	0x40010800
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4909      	ldr	r1, [pc, #36]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f ae8e 	bne.w	8002848 <HAL_GPIO_Init+0x14>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	372c      	adds	r7, #44	; 0x2c
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43d9      	mvns	r1, r3
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e12b      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fdc0 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f000 fce4 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a81      	ldr	r2, [pc, #516]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d807      	bhi.n	8002c24 <HAL_I2C_Init+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_I2C_Init+0x278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e006      	b.n	8002c32 <HAL_I2C_Init+0x92>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a7d      	ldr	r2, [pc, #500]	; (8002e1c <HAL_I2C_Init+0x27c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e7      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_I2C_Init+0x280>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d802      	bhi.n	8002c74 <HAL_I2C_Init+0xd4>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e009      	b.n	8002c88 <HAL_I2C_Init+0xe8>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_I2C_Init+0x284>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	495c      	ldr	r1, [pc, #368]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d819      	bhi.n	8002cdc <HAL_I2C_Init+0x13c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e59      	subs	r1, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_I2C_Init+0x138>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e59      	subs	r1, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	e051      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e04f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <HAL_I2C_Init+0x168>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e012      	b.n	8002d2e <HAL_I2C_Init+0x18e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	0099      	lsls	r1, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x196>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10e      	bne.n	8002d5c <HAL_I2C_Init+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e58      	subs	r0, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6911      	ldr	r1, [r2, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	000186a0 	.word	0x000186a0
 8002e18:	001e847f 	.word	0x001e847f
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e26c      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d00c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e54:	4b8f      	ldr	r3, [pc, #572]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d112      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e>
 8002e60:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d10b      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6e:	4b89      	ldr	r3, [pc, #548]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d06c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x12c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d168      	bne.n	8002f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e246      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x76>
 8002e90:	4b80      	ldr	r3, [pc, #512]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7f      	ldr	r2, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e02e      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7a      	ldr	r2, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b78      	ldr	r3, [pc, #480]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a77      	ldr	r2, [pc, #476]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xbc>
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a71      	ldr	r2, [pc, #452]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe ff5c 	bl	8001dc0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe ff58 	bl	8001dc0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1fa      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xe4>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe ff48 	bl	8001dc0 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe ff44 	bl	8001dc0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e1e6      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x10c>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f6e:	4b49      	ldr	r3, [pc, #292]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x18c>
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x176>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1ba      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4939      	ldr	r1, [pc, #228]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fefd 	bl	8001dc0 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fef9 	bl	8001dc0 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e19b      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4927      	ldr	r1, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fedc 	bl	8001dc0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fed8 	bl	8001dc0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e17a      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03a      	beq.n	80030ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d019      	beq.n	8003072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe febc 	bl	8001dc0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe feb8 	bl	8001dc0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e15a      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800306a:	2001      	movs	r0, #1
 800306c:	f000 fad8 	bl	8003620 <RCC_Delay>
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7fe fea2 	bl	8001dc0 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307e:	e00f      	b.n	80030a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe fe9e 	bl	8001dc0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d908      	bls.n	80030a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e140      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	42420000 	.word	0x42420000
 800309c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b9e      	ldr	r3, [pc, #632]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e9      	bne.n	8003080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a6 	beq.w	8003206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b97      	ldr	r3, [pc, #604]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4b94      	ldr	r3, [pc, #592]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a93      	ldr	r2, [pc, #588]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]
 80030d6:	4b91      	ldr	r3, [pc, #580]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b8e      	ldr	r3, [pc, #568]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a8a      	ldr	r2, [pc, #552]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fe5f 	bl	8001dc0 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fe fe5b 	bl	8001dc0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0fd      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b81      	ldr	r3, [pc, #516]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x312>
 800312c:	4b7b      	ldr	r3, [pc, #492]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a7a      	ldr	r2, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e02d      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x334>
 8003142:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b73      	ldr	r3, [pc, #460]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a72      	ldr	r2, [pc, #456]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	e01c      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x356>
 8003164:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a6c      	ldr	r2, [pc, #432]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a69      	ldr	r2, [pc, #420]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800317e:	4b67      	ldr	r3, [pc, #412]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a66      	ldr	r2, [pc, #408]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7fe fe0f 	bl	8001dc0 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fe0b 	bl	8001dc0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0ab      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ee      	beq.n	80031a6 <HAL_RCC_OscConfig+0x37e>
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fdf9 	bl	8001dc0 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fdf5 	bl	8001dc0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e095      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ee      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a47      	ldr	r2, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8081 	beq.w	8003312 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d061      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d146      	bne.n	80032b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_RCC_OscConfig+0x4fc>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fdc9 	bl	8001dc0 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fdc5 	bl	8001dc0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e067      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d108      	bne.n	800326c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	492d      	ldr	r1, [pc, #180]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a19      	ldr	r1, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	430b      	orrs	r3, r1
 800327e:	4927      	ldr	r1, [pc, #156]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x4fc>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fd99 	bl	8001dc0 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fd95 	bl	8001dc0 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e037      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x46a>
 80032b0:	e02f      	b.n	8003312 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_RCC_OscConfig+0x4fc>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fd82 	bl	8001dc0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fd7e 	bl	8001dc0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e020      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x498>
 80032de:	e018      	b.n	8003312 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e013      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	42420060 	.word	0x42420060

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0d0      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4965      	ldr	r1, [pc, #404]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800338e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d040      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e073      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06b      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4936      	ldr	r1, [pc, #216]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fe fcd2 	bl	8001dc0 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe fcce 	bl	8001dc0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e053      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d210      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4922      	ldr	r1, [pc, #136]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	490a      	ldr	r1, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc30 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08009290 	.word	0x08009290
 80034f4:	20000004 	.word	0x20000004
 80034f8:	20000008 	.word	0x20000008

080034fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003504:	1d3c      	adds	r4, r7, #4
 8003506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800350c:	f240 2301 	movw	r3, #513	; 0x201
 8003510:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d002      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x40>
 8003536:	2b08      	cmp	r3, #8
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x46>
 800353a:	e02d      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353e:	623b      	str	r3, [r7, #32]
      break;
 8003540:	e02d      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	0c9b      	lsrs	r3, r3, #18
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800354e:	4413      	add	r3, r2
 8003550:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003554:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0c5b      	lsrs	r3, r3, #17
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800356e:	4413      	add	r3, r2
 8003570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003574:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800357a:	fb02 f203 	mul.w	r2, r2, r3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	e004      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	623b      	str	r3, [r7, #32]
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800359a:	623b      	str	r3, [r7, #32]
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6a3b      	ldr	r3, [r7, #32]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc90      	pop	{r4, r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	08009238 	.word	0x08009238
 80035b0:	40021000 	.word	0x40021000
 80035b4:	007a1200 	.word	0x007a1200
 80035b8:	003d0900 	.word	0x003d0900

080035bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c0:	4b02      	ldr	r3, [pc, #8]	; (80035cc <HAL_RCC_GetHCLKFreq+0x10>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	20000004 	.word	0x20000004

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff2 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	080092a0 	.word	0x080092a0

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffde 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	0adb      	lsrs	r3, r3, #11
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	080092a0 	.word	0x080092a0

08003620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <RCC_Delay+0x34>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <RCC_Delay+0x38>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0a5b      	lsrs	r3, r3, #9
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800363c:	bf00      	nop
  }
  while (Delay --);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	60fa      	str	r2, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f9      	bne.n	800363c <RCC_Delay+0x1c>
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	20000004 	.word	0x20000004
 8003658:	10624dd3 	.word	0x10624dd3

0800365c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d07d      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	61d3      	str	r3, [r2, #28]
 8003694:	4b49      	ldr	r3, [pc, #292]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d118      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a42      	ldr	r2, [pc, #264]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036bc:	f7fe fb80 	bl	8001dc0 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	e008      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c4:	f7fe fb7c 	bl	8001dc0 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e06d      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02e      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d027      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370a:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003710:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d014      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003726:	f7fe fb4b 	bl	8001dc0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fb47 	bl	8001dc0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e036      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4917      	ldr	r1, [pc, #92]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	4313      	orrs	r3, r2
 8003760:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	490b      	ldr	r1, [pc, #44]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4904      	ldr	r1, [pc, #16]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
 80037c4:	42420440 	.word	0x42420440

080037c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e076      	b.n	80038c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ea:	d009      	beq.n	8003800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
 80037f2:	e005      	b.n	8003800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd ffd6 	bl	80017cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003836:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	0c1a      	lsrs	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f002 0204 	and.w	r2, r2, #4
 80038a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_SPI_Transmit+0x22>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e126      	b.n	8003b40 <HAL_SPI_Transmit+0x270>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038fa:	f7fe fa61 	bl	8001dc0 <HAL_GetTick>
 80038fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d002      	beq.n	8003916 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003910:	2302      	movs	r3, #2
 8003912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003914:	e10b      	b.n	8003b2e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_Transmit+0x52>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003926:	e102      	b.n	8003b2e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2203      	movs	r2, #3
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	d10f      	bne.n	8003990 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d007      	beq.n	80039ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b6:	d14b      	bne.n	8003a50 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_SPI_Transmit+0xf6>
 80039c0:	8afb      	ldrh	r3, [r7, #22]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d13e      	bne.n	8003a44 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	1c9a      	adds	r2, r3, #2
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ea:	e02b      	b.n	8003a44 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d112      	bne.n	8003a20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a1e:	e011      	b.n	8003a44 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a20:	f7fe f9ce 	bl	8001dc0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d803      	bhi.n	8003a38 <HAL_SPI_Transmit+0x168>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d102      	bne.n	8003a3e <HAL_SPI_Transmit+0x16e>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a42:	e074      	b.n	8003b2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ce      	bne.n	80039ec <HAL_SPI_Transmit+0x11c>
 8003a4e:	e04c      	b.n	8003aea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_SPI_Transmit+0x18e>
 8003a58:	8afb      	ldrh	r3, [r7, #22]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d140      	bne.n	8003ae0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a84:	e02c      	b.n	8003ae0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d113      	bne.n	8003abc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aba:	e011      	b.n	8003ae0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003abc:	f7fe f980 	bl	8001dc0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d803      	bhi.n	8003ad4 <HAL_SPI_Transmit+0x204>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Transmit+0x20a>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ade:	e026      	b.n	8003b2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1cd      	bne.n	8003a86 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fb64 	bl	80041bc <SPI_EndRxTxTransaction>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e000      	b.n	8003b2e <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3720      	adds	r7, #32
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b56:	2301      	movs	r3, #1
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_SPI_TransmitReceive+0x26>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e18a      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x33c>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b76:	f7fe f923 	bl	8001dc0 <HAL_GetTick>
 8003b7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d00f      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x70>
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9e:	d107      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x68>
 8003ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d003      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bb6:	e15b      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x82>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x82>
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bd0:	e14e      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2205      	movs	r2, #5
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d007      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c42:	d178      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_SPI_TransmitReceive+0x10a>
 8003c4c:	8b7b      	ldrh	r3, [r7, #26]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d166      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	881a      	ldrh	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	1c9a      	adds	r2, r3, #2
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c76:	e053      	b.n	8003d20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d11b      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x176>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x176>
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d113      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d119      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x1b8>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d00:	f7fe f85e 	bl	8001dc0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d807      	bhi.n	8003d20 <HAL_SPI_TransmitReceive+0x1d8>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d003      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d1e:	e0a7      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1a6      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x130>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1a1      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x130>
 8003d34:	e07c      	b.n	8003e30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_SPI_TransmitReceive+0x1fc>
 8003d3e:	8b7b      	ldrh	r3, [r7, #26]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d16b      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d6a:	e057      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d11c      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x26c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d017      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x26c>
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d114      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d119      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x2ae>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003df6:	f7fd ffe3 	bl	8001dc0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d803      	bhi.n	8003e0e <HAL_SPI_TransmitReceive+0x2c6>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d102      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x2cc>
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d103      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e1a:	e029      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1a2      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x224>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d19d      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9c1 	bl	80041bc <SPI_EndRxTxTransaction>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e4c:	e010      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e000      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3730      	adds	r7, #48	; 0x30
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10f      	bne.n	8003ed0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
    return;
 8003ece:	e0be      	b.n	800404e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_SPI_IRQHandler+0x66>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	09db      	lsrs	r3, r3, #7
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
    return;
 8003ef0:	e0ad      	b.n	800404e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_SPI_IRQHandler+0x80>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a1 	beq.w	800404e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 809a 	beq.w	800404e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d011      	beq.n	8003f56 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	f043 0204 	orr.w	r2, r3, #4
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	e00b      	b.n	8003f6e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]
        return;
 8003f6c:	e06f      	b.n	800404e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d014      	beq.n	8003fa4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d04f      	beq.n	800404c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_SPI_IRQHandler+0x14c>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d034      	beq.n	8004042 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0203 	bic.w	r2, r2, #3
 8003fe6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_SPI_IRQHandler+0x1c8>)
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fa9d 	bl	800253c <HAL_DMA_Abort_IT>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004018:	2b00      	cmp	r3, #0
 800401a:	d016      	beq.n	800404a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <HAL_SPI_IRQHandler+0x1c8>)
 8004022:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe fa87 	bl	800253c <HAL_DMA_Abort_IT>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004040:	e003      	b.n	800404a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f808 	bl	8004058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004048:	e000      	b.n	800404c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800404a:	bf00      	nop
    return;
 800404c:	bf00      	nop
  }
}
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	08004085 	.word	0x08004085

08004058 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004078:	b2db      	uxtb	r3, r3
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff ffda 	bl	8004058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040bc:	f7fd fe80 	bl	8001dc0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040cc:	f7fd fe78 	bl	8001dc0 <HAL_GetTick>
 80040d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	015b      	lsls	r3, r3, #5
 80040d8:	0d1b      	lsrs	r3, r3, #20
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040e2:	e054      	b.n	800418e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d050      	beq.n	800418e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ec:	f7fd fe68 	bl	8001dc0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d902      	bls.n	8004102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d13d      	bne.n	800417e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d111      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004124:	d004      	beq.n	8004130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d107      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d10f      	bne.n	800416a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e017      	b.n	80041ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3b01      	subs	r3, #1
 800418c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	429a      	cmp	r2, r3
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d19b      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000004 	.word	0x20000004

080041bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff6a 	bl	80040ac <SPI_WaitFlagStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e000      	b.n	80041f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e041      	b.n	800428e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fb36 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f000 fb66 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d001      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e03a      	b.n	8004326 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_TIM_Base_Start_IT+0x98>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x58>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d009      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x58>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <HAL_TIM_Base_Start_IT+0x9c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x58>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <HAL_TIM_Base_Start_IT+0xa0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d010      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e007      	b.n	8004324 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f839 	bl	80043da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fac4 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0202 	mvn.w	r2, #2
 8004418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa4e 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa41 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa50 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0204 	mvn.w	r2, #4
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa24 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa17 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa26 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0208 	mvn.w	r2, #8
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2204      	movs	r2, #4
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f9fa 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9ed 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f9fc 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b10      	cmp	r3, #16
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0210 	mvn.w	r2, #16
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2208      	movs	r2, #8
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d0 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9c3 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f9d2 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f99e 	bl	80048ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fc23 	bl	8004de2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f996 	bl	80048f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0220 	mvn.w	r2, #32
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fbee 	bl	8004dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004612:	2302      	movs	r3, #2
 8004614:	e082      	b.n	800471c <HAL_TIM_IC_ConfigChannel+0x120>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f000 f9ca 	bl	80049cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020c 	bic.w	r2, r2, #12
 8004646:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	619a      	str	r2, [r3, #24]
 800465a:	e05a      	b.n	8004712 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b04      	cmp	r3, #4
 8004660:	d11c      	bne.n	800469c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 fa33 	bl	8004adc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004684:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6999      	ldr	r1, [r3, #24]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
 800469a:	e03a      	b.n	8004712 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d11b      	bne.n	80046da <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f000 fa7e 	bl	8004bb2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 020c 	bic.w	r2, r2, #12
 80046c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
 80046d8:	e01b      	b.n	8004712 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f000 fa9d 	bl	8004c28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69d9      	ldr	r1, [r3, #28]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	021a      	lsls	r2, r3, #8
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIM_ConfigClockSource+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e0b3      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x180>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800475a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004762:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d03e      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xd0>
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477a:	f200 8087 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x168>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	f000 8085 	beq.w	8004890 <HAL_TIM_ConfigClockSource+0x16c>
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d87f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d01a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xa2>
 8004790:	2b70      	cmp	r3, #112	; 0x70
 8004792:	d87b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d050      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x116>
 8004798:	2b60      	cmp	r3, #96	; 0x60
 800479a:	d877      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 800479c:	2b50      	cmp	r3, #80	; 0x50
 800479e:	d03c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xf6>
 80047a0:	2b50      	cmp	r3, #80	; 0x50
 80047a2:	d873      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d058      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x136>
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d86f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d064      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x156>
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d86b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d060      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x156>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d867      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x168>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05c      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x156>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d05a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047c4:	e062      	b.n	800488c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f000 fa7d 	bl	8004cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	609a      	str	r2, [r3, #8]
      break;
 80047f2:	e04e      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f000 fa66 	bl	8004cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004816:	609a      	str	r2, [r3, #8]
      break;
 8004818:	e03b      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	f000 f92a 	bl	8004a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2150      	movs	r1, #80	; 0x50
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fa34 	bl	8004ca0 <TIM_ITRx_SetConfig>
      break;
 8004838:	e02b      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f984 	bl	8004b54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2160      	movs	r1, #96	; 0x60
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa24 	bl	8004ca0 <TIM_ITRx_SetConfig>
      break;
 8004858:	e01b      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f90a 	bl	8004a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fa14 	bl	8004ca0 <TIM_ITRx_SetConfig>
      break;
 8004878:	e00b      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 fa0b 	bl	8004ca0 <TIM_ITRx_SetConfig>
        break;
 800488a:	e002      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800488c:	bf00      	nop
 800488e:	e000      	b.n	8004892 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004890:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
	...

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0xb8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x30>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x30>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0xbc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x30>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0xc0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <TIM_Base_SetConfig+0xb8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_Base_SetConfig+0x62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d007      	beq.n	800496a <TIM_Base_SetConfig+0x62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_Base_SetConfig+0xbc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0x62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_Base_SetConfig+0xc0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <TIM_Base_SetConfig+0xb8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	615a      	str	r2, [r3, #20]
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800

080049cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <TIM_TI1_SetConfig+0xa8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_TI1_SetConfig+0x46>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d007      	beq.n	8004a12 <TIM_TI1_SetConfig+0x46>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <TIM_TI1_SetConfig+0xac>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_TI1_SetConfig+0x46>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <TIM_TI1_SetConfig+0xb0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <TIM_TI1_SetConfig+0x4a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <TIM_TI1_SetConfig+0x4c>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e003      	b.n	8004a36 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f023 030a 	bic.w	r3, r3, #10
 8004a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f003 030a 	and.w	r3, r3, #10
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800

08004a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 0201 	bic.w	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 030a 	bic.w	r3, r3, #10
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0210 	bic.w	r2, r3, #16
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	031b      	lsls	r3, r3, #12
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f023 0210 	bic.w	r2, r3, #16
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	031b      	lsls	r3, r3, #12
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	031b      	lsls	r3, r3, #12
 8004c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f043 0307 	orr.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e046      	b.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d009      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10c      	bne.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800

08004dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e03f      	b.n	8004e86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc fe02 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fb49 	bl	80054d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x52>
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa4f 	bl	800537e <UART_Receive_IT>
      return;
 8004ee0:	e17b      	b.n	80051da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80b1 	beq.w	800504c <HAL_UART_IRQHandler+0x1bc>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_UART_IRQHandler+0x70>
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80a6 	beq.w	800504c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_UART_IRQHandler+0x90>
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f043 0201 	orr.w	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_UART_IRQHandler+0xb0>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f043 0202 	orr.w	r2, r3, #2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_UART_IRQHandler+0xd0>
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00f      	beq.n	8004f8a <HAL_UART_IRQHandler+0xfa>
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_UART_IRQHandler+0xee>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0208 	orr.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 811e 	beq.w	80051d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <HAL_UART_IRQHandler+0x11e>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9e8 	bl	800537e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x146>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d031      	beq.n	800503a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f92a 	bl	8005230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d023      	beq.n	8005032 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d013      	beq.n	800502a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	4a76      	ldr	r2, [pc, #472]	; (80051e0 <HAL_UART_IRQHandler+0x350>)
 8005008:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd fa94 	bl	800253c <HAL_DMA_Abort_IT>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e00e      	b.n	8005048 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8ec 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e00a      	b.n	8005048 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8e8 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e006      	b.n	8005048 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8e4 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005046:	e0c3      	b.n	80051d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	bf00      	nop
    return;
 800504a:	e0c1      	b.n	80051d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	2b01      	cmp	r3, #1
 8005052:	f040 80a1 	bne.w	8005198 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 809b 	beq.w	8005198 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8095 	beq.w	8005198 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04e      	beq.n	8005130 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800509c:	8a3b      	ldrh	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8098 	beq.w	80051d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050a8:	8a3a      	ldrh	r2, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	f080 8092 	bcs.w	80051d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8a3a      	ldrh	r2, [r7, #16]
 80050b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d02b      	beq.n	8005118 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0210 	bic.w	r2, r2, #16
 800510c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd f9d8 	bl	80024c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f876 	bl	800521a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800512e:	e051      	b.n	80051d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005138:	b29b      	uxth	r3, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d047      	beq.n	80051d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005148:	8a7b      	ldrh	r3, [r7, #18]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d044      	beq.n	80051d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800515c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0210 	bic.w	r2, r2, #16
 800518a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800518c:	8a7b      	ldrh	r3, [r7, #18]
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f842 	bl	800521a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005196:	e01f      	b.n	80051d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_UART_IRQHandler+0x324>
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f87f 	bl	80052b0 <UART_Transmit_IT>
    return;
 80051b2:	e012      	b.n	80051da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <HAL_UART_IRQHandler+0x34a>
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8c0 	bl	800534e <UART_EndTransmit_IT>
    return;
 80051ce:	e004      	b.n	80051da <HAL_UART_IRQHandler+0x34a>
    return;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <HAL_UART_IRQHandler+0x34a>
      return;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_UART_IRQHandler+0x34a>
      return;
 80051d8:	bf00      	nop
  }
}
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	08005289 	.word	0x08005289

080051e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005246:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0210 	bic.w	r2, r2, #16
 800526e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ffb0 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b21      	cmp	r3, #33	; 0x21
 80052c2:	d13e      	bne.n	8005342 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052cc:	d114      	bne.n	80052f8 <UART_Transmit_IT+0x48>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d110      	bne.n	80052f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	621a      	str	r2, [r3, #32]
 80052f6:	e008      	b.n	800530a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6211      	str	r1, [r2, #32]
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	4619      	mov	r1, r3
 8005318:	84d1      	strh	r1, [r2, #38]	; 0x26
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10f      	bne.n	800533e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800532c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ff38 	bl	80051e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b22      	cmp	r3, #34	; 0x22
 8005390:	f040 8099 	bne.w	80054c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d117      	bne.n	80053ce <UART_Receive_IT+0x50>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d113      	bne.n	80053ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053bc:	b29a      	uxth	r2, r3
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	1c9a      	adds	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
 80053cc:	e026      	b.n	800541c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d007      	beq.n	80053f2 <UART_Receive_IT+0x74>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <UART_Receive_IT+0x82>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e008      	b.n	8005412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540c:	b2da      	uxtb	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29b      	uxth	r3, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4619      	mov	r1, r3
 800542a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800542c:	2b00      	cmp	r3, #0
 800542e:	d148      	bne.n	80054c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0220 	bic.w	r2, r2, #32
 800543e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800544e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	2b01      	cmp	r3, #1
 800546e:	d123      	bne.n	80054b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0210 	bic.w	r2, r2, #16
 8005484:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	d10a      	bne.n	80054aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff feb2 	bl	800521a <HAL_UARTEx_RxEventCallback>
 80054b6:	e002      	b.n	80054be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fe9c 	bl	80051f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e002      	b.n	80054c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e000      	b.n	80054c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800550a:	f023 030c 	bic.w	r3, r3, #12
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	430b      	orrs	r3, r1
 8005516:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2c      	ldr	r2, [pc, #176]	; (80055e4 <UART_SetConfig+0x114>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d103      	bne.n	8005540 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fe f85e 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	e002      	b.n	8005546 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005540:	f7fe f846 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8005544:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009a      	lsls	r2, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <UART_SetConfig+0x118>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	0119      	lsls	r1, r3, #4
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009a      	lsls	r2, r3, #2
 8005570:	441a      	add	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	fbb2 f2f3 	udiv	r2, r2, r3
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <UART_SetConfig+0x118>)
 800557e:	fba3 0302 	umull	r0, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2064      	movs	r0, #100	; 0x64
 8005586:	fb00 f303 	mul.w	r3, r0, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	3332      	adds	r3, #50	; 0x32
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <UART_SetConfig+0x118>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800559c:	4419      	add	r1, r3
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009a      	lsls	r2, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <UART_SetConfig+0x118>)
 80055b6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2064      	movs	r0, #100	; 0x64
 80055be:	fb00 f303 	mul.w	r3, r0, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	3332      	adds	r3, #50	; 0x32
 80055c8:	4a07      	ldr	r2, [pc, #28]	; (80055e8 <UART_SetConfig+0x118>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	440a      	add	r2, r1
 80055da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40013800 	.word	0x40013800
 80055e8:	51eb851f 	.word	0x51eb851f

080055ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055f0:	4904      	ldr	r1, [pc, #16]	; (8005604 <MX_FATFS_Init+0x18>)
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <MX_FATFS_Init+0x1c>)
 80055f4:	f003 f902 	bl	80087fc <FATFS_LinkDriver>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <MX_FATFS_Init+0x20>)
 80055fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000b64 	.word	0x20000b64
 8005608:	20000010 	.word	0x20000010
 800560c:	20000b68 	.word	0x20000b68

08005610 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005614:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005616:	4618      	mov	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
	...

08005620 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa ff45 	bl	80004bc <SD_disk_initialize>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	4b04      	ldr	r3, [pc, #16]	; (8005648 <USER_initialize+0x28>)
 8005638:	701a      	strb	r2, [r3, #0]
    return Stat;
 800563a:	4b03      	ldr	r3, [pc, #12]	; (8005648 <USER_initialize+0x28>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	2000000d 	.word	0x2000000d

0800564c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fb f819 	bl	8000690 <SD_disk_status>
 800565e:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005678:	7bf8      	ldrb	r0, [r7, #15]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	f7fb f81a 	bl	80006b8 <SD_disk_read>
 8005684:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800569e:	7bf8      	ldrb	r0, [r7, #15]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	f7fb f871 	bl	800078c <SD_disk_write>
 80056aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	603a      	str	r2, [r7, #0]
 80056be:	71fb      	strb	r3, [r7, #7]
 80056c0:	460b      	mov	r3, r1
 80056c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80056c4:	79b9      	ldrb	r1, [r7, #6]
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fb f8e2 	bl	8000894 <SD_disk_ioctl>
 80056d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <disk_status+0x30>)
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	79fa      	ldrb	r2, [r7, #7]
 80056f4:	4905      	ldr	r1, [pc, #20]	; (800570c <disk_status+0x30>)
 80056f6:	440a      	add	r2, r1
 80056f8:	7a12      	ldrb	r2, [r2, #8]
 80056fa:	4610      	mov	r0, r2
 80056fc:	4798      	blx	r3
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	200002cc 	.word	0x200002cc

08005710 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4a0d      	ldr	r2, [pc, #52]	; (8005758 <disk_initialize+0x48>)
 8005722:	5cd3      	ldrb	r3, [r2, r3]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <disk_initialize+0x48>)
 800572c:	2101      	movs	r1, #1
 800572e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	4a09      	ldr	r2, [pc, #36]	; (8005758 <disk_initialize+0x48>)
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	79fa      	ldrb	r2, [r7, #7]
 800573e:	4906      	ldr	r1, [pc, #24]	; (8005758 <disk_initialize+0x48>)
 8005740:	440a      	add	r2, r1
 8005742:	7a12      	ldrb	r2, [r2, #8]
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	200002cc 	.word	0x200002cc

0800575c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <disk_read+0x3c>)
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	689c      	ldr	r4, [r3, #8]
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	4a07      	ldr	r2, [pc, #28]	; (8005798 <disk_read+0x3c>)
 800577c:	4413      	add	r3, r2
 800577e:	7a18      	ldrb	r0, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	47a0      	blx	r4
 8005788:	4603      	mov	r3, r0
 800578a:	75fb      	strb	r3, [r7, #23]
  return res;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	bf00      	nop
 8005798:	200002cc 	.word	0x200002cc

0800579c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <disk_write+0x3c>)
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68dc      	ldr	r4, [r3, #12]
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <disk_write+0x3c>)
 80057bc:	4413      	add	r3, r2
 80057be:	7a18      	ldrb	r0, [r3, #8]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	47a0      	blx	r4
 80057c8:	4603      	mov	r3, r0
 80057ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	200002cc 	.word	0x200002cc

080057dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	603a      	str	r2, [r7, #0]
 80057e6:	71fb      	strb	r3, [r7, #7]
 80057e8:	460b      	mov	r3, r1
 80057ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <disk_ioctl+0x38>)
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	79fa      	ldrb	r2, [r7, #7]
 80057fa:	4906      	ldr	r1, [pc, #24]	; (8005814 <disk_ioctl+0x38>)
 80057fc:	440a      	add	r2, r1
 80057fe:	7a10      	ldrb	r0, [r2, #8]
 8005800:	79b9      	ldrb	r1, [r7, #6]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	4798      	blx	r3
 8005806:	4603      	mov	r3, r0
 8005808:	73fb      	strb	r3, [r7, #15]
  return res;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	200002cc 	.word	0x200002cc

08005818 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800582c:	e007      	b.n	800583e <mem_cpy+0x26>
		*d++ = *s++;
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	1c53      	adds	r3, r2, #1
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	6179      	str	r1, [r7, #20]
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f2      	bne.n	800582e <mem_cpy+0x16>
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005864:	e005      	b.n	8005872 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	617a      	str	r2, [r7, #20]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f4      	bne.n	8005866 <mem_set+0x12>
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005888:	b480      	push	{r7}
 800588a:	b089      	sub	sp, #36	; 0x24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80058a0:	bf00      	nop
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1e5a      	subs	r2, r3, #1
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00d      	beq.n	80058c8 <mem_cmp+0x40>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	61fa      	str	r2, [r7, #28]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	61ba      	str	r2, [r7, #24]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	1acb      	subs	r3, r1, r3
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ec      	beq.n	80058a2 <mem_cmp+0x1a>
	return r;
 80058c8:	697b      	ldr	r3, [r7, #20]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3724      	adds	r7, #36	; 0x24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80058de:	e002      	b.n	80058e6 <chk_chr+0x12>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3301      	adds	r3, #1
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <chk_chr+0x26>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d1f2      	bne.n	80058e0 <chk_chr+0xc>
	return *str;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	781b      	ldrb	r3, [r3, #0]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e035      	b.n	8005988 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 800591c:	492e      	ldr	r1, [pc, #184]	; (80059d8 <chk_lock+0xd0>)
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d026      	beq.n	800597e <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005930:	4929      	ldr	r1, [pc, #164]	; (80059d8 <chk_lock+0xd0>)
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d11c      	bne.n	8005982 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 8005948:	4923      	ldr	r1, [pc, #140]	; (80059d8 <chk_lock+0xd0>)
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	3304      	adds	r3, #4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800595e:	429a      	cmp	r2, r3
 8005960:	d10f      	bne.n	8005982 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8005962:	491d      	ldr	r1, [pc, #116]	; (80059d8 <chk_lock+0xd0>)
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4613      	mov	r3, r2
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3308      	adds	r3, #8
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005978:	429a      	cmp	r2, r3
 800597a:	d102      	bne.n	8005982 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800597c:	e007      	b.n	800598e <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 800597e:	2301      	movs	r3, #1
 8005980:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d9c6      	bls.n	800591c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d109      	bne.n	80059a8 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <chk_lock+0x98>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d101      	bne.n	80059a4 <chk_lock+0x9c>
 80059a0:	2300      	movs	r3, #0
 80059a2:	e013      	b.n	80059cc <chk_lock+0xc4>
 80059a4:	2312      	movs	r3, #18
 80059a6:	e011      	b.n	80059cc <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <chk_lock+0xbe>
 80059ae:	490a      	ldr	r1, [pc, #40]	; (80059d8 <chk_lock+0xd0>)
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	330a      	adds	r3, #10
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c4:	d101      	bne.n	80059ca <chk_lock+0xc2>
 80059c6:	2310      	movs	r3, #16
 80059c8:	e000      	b.n	80059cc <chk_lock+0xc4>
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	200000b4 	.word	0x200000b4

080059dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	e002      	b.n	80059ee <enq_lock+0x12>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3301      	adds	r3, #1
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d809      	bhi.n	8005a08 <enq_lock+0x2c>
 80059f4:	490a      	ldr	r1, [pc, #40]	; (8005a20 <enq_lock+0x44>)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ef      	bne.n	80059e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	200000b4 	.word	0x200000b4

08005a24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e028      	b.n	8005a86 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8005a34:	4952      	ldr	r1, [pc, #328]	; (8005b80 <inc_lock+0x15c>)
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d119      	bne.n	8005a80 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 8005a4c:	494c      	ldr	r1, [pc, #304]	; (8005b80 <inc_lock+0x15c>)
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10c      	bne.n	8005a80 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 8005a66:	4946      	ldr	r1, [pc, #280]	; (8005b80 <inc_lock+0x15c>)
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3308      	adds	r3, #8
 8005a76:	881a      	ldrh	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d006      	beq.n	8005a8e <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d9d3      	bls.n	8005a34 <inc_lock+0x10>
 8005a8c:	e000      	b.n	8005a90 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8005a8e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d142      	bne.n	8005b1c <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e002      	b.n	8005aa2 <inc_lock+0x7e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d809      	bhi.n	8005abc <inc_lock+0x98>
 8005aa8:	4935      	ldr	r1, [pc, #212]	; (8005b80 <inc_lock+0x15c>)
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ef      	bne.n	8005a9c <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d101      	bne.n	8005ac6 <inc_lock+0xa2>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e057      	b.n	8005b76 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	482d      	ldr	r0, [pc, #180]	; (8005b80 <inc_lock+0x15c>)
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4403      	add	r3, r0
 8005ad8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6899      	ldr	r1, [r3, #8]
 8005ade:	4828      	ldr	r0, [pc, #160]	; (8005b80 <inc_lock+0x15c>)
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4403      	add	r3, r0
 8005aec:	3304      	adds	r3, #4
 8005aee:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	88d8      	ldrh	r0, [r3, #6]
 8005af4:	4922      	ldr	r1, [pc, #136]	; (8005b80 <inc_lock+0x15c>)
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	3308      	adds	r3, #8
 8005b04:	4602      	mov	r2, r0
 8005b06:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b08:	491d      	ldr	r1, [pc, #116]	; (8005b80 <inc_lock+0x15c>)
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	330a      	adds	r3, #10
 8005b18:	2200      	movs	r2, #0
 8005b1a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <inc_lock+0x118>
 8005b22:	4917      	ldr	r1, [pc, #92]	; (8005b80 <inc_lock+0x15c>)
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	330a      	adds	r3, #10
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <inc_lock+0x118>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e01c      	b.n	8005b76 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <inc_lock+0x136>
 8005b42:	490f      	ldr	r1, [pc, #60]	; (8005b80 <inc_lock+0x15c>)
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4613      	mov	r3, r2
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	330a      	adds	r3, #10
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	b299      	uxth	r1, r3
 8005b58:	e001      	b.n	8005b5e <inc_lock+0x13a>
 8005b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b5e:	4808      	ldr	r0, [pc, #32]	; (8005b80 <inc_lock+0x15c>)
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4403      	add	r3, r0
 8005b6c:	330a      	adds	r3, #10
 8005b6e:	460a      	mov	r2, r1
 8005b70:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	200000b4 	.word	0x200000b4

08005b84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d82e      	bhi.n	8005bf6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005b98:	491b      	ldr	r1, [pc, #108]	; (8005c08 <dec_lock+0x84>)
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	330a      	adds	r3, #10
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb2:	d101      	bne.n	8005bb8 <dec_lock+0x34>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005bb8:	89fb      	ldrh	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <dec_lock+0x40>
 8005bbe:	89fb      	ldrh	r3, [r7, #14]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005bc4:	4910      	ldr	r1, [pc, #64]	; (8005c08 <dec_lock+0x84>)
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	330a      	adds	r3, #10
 8005bd4:	89fa      	ldrh	r2, [r7, #14]
 8005bd6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bd8:	89fb      	ldrh	r3, [r7, #14]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <dec_lock+0x6c>
 8005bde:	490a      	ldr	r1, [pc, #40]	; (8005c08 <dec_lock+0x84>)
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	737b      	strb	r3, [r7, #13]
 8005bf4:	e001      	b.n	8005bfa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005bfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200000b4 	.word	0x200000b4

08005c0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e016      	b.n	8005c48 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c1a:	4910      	ldr	r1, [pc, #64]	; (8005c5c <clear_lock+0x50>)
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d108      	bne.n	8005c42 <clear_lock+0x36>
 8005c30:	490a      	ldr	r1, [pc, #40]	; (8005c5c <clear_lock+0x50>)
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d9e5      	bls.n	8005c1a <clear_lock+0xe>
	}
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	200000b4 	.word	0x200000b4

08005c60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d038      	beq.n	8005ce8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8005c7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	2301      	movs	r3, #1
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	f7ff fd87 	bl	800579c <disk_write>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
 8005c98:	e026      	b.n	8005ce8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	1ad2      	subs	r2, r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d218      	bcs.n	8005ce8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	e010      	b.n	8005ce2 <sync_window+0x82>
					wsect += fs->fsize;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	f7ff fd60 	bl	800579c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d8eb      	bhi.n	8005cc0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d01b      	beq.n	8005d44 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ffa7 	bl	8005c60 <sync_window>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d113      	bne.n	8005d44 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	2301      	movs	r3, #1
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	f7ff fd18 	bl	800575c <disk_read>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d32:	f04f 33ff 	mov.w	r3, #4294967295
 8005d36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff82 	bl	8005c60 <sync_window>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 809c 	bne.w	8005ea0 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	f040 8089 	bne.w	8005e86 <sync_fs+0x138>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	f040 8083 	bne.w	8005e86 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f7ff fd62 	bl	8005854 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2255      	movs	r2, #85	; 0x55
 8005d94:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	22aa      	movs	r2, #170	; 0xaa
 8005d9c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2252      	movs	r2, #82	; 0x52
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2252      	movs	r2, #82	; 0x52
 8005daa:	705a      	strb	r2, [r3, #1]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2261      	movs	r2, #97	; 0x61
 8005db0:	709a      	strb	r2, [r3, #2]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2241      	movs	r2, #65	; 0x41
 8005db6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2272      	movs	r2, #114	; 0x72
 8005dbc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2272      	movs	r2, #114	; 0x72
 8005dc4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2241      	movs	r2, #65	; 0x41
 8005dcc:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2261      	movs	r2, #97	; 0x61
 8005dd4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005e10:	0e1b      	lsrs	r3, r3, #24
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	0a1b      	lsrs	r3, r3, #8
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e52:	0e1b      	lsrs	r3, r3, #24
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f7ff fc8f 	bl	800579c <disk_write>
			fs->fsi_flag = 0;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fca3 	bl	80057dc <disk_ioctl>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <sync_fs+0x152>
			res = FR_DISK_ERR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	3b02      	subs	r3, #2
 8005eb8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005ec0:	3b02      	subs	r3, #2
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d301      	bcc.n	8005ecc <clust2sect+0x22>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e00a      	b.n	8005ee2 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	fb03 f202 	mul.w	r2, r3, r2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8005ee0:	4413      	add	r3, r2
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d905      	bls.n	8005f08 <get_fat+0x1c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <get_fat+0x22>
		val = 1;	/* Internal error */
 8005f08:	2301      	movs	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e0d7      	b.n	80060be <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	f000 808f 	beq.w	800603e <get_fat+0x152>
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	f300 80c2 	bgt.w	80060aa <get_fat+0x1be>
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d002      	beq.n	8005f30 <get_fat+0x44>
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d059      	beq.n	8005fe2 <get_fat+0xf6>
 8005f2e:	e0bc      	b.n	80060aa <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f52:	4413      	add	r3, r2
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fecb 	bl	8005cf2 <move_window>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 80a6 	bne.w	80060b0 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	60fa      	str	r2, [r7, #12]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005f70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f74:	fb02 f201 	mul.w	r2, r2, r1
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	5cd3      	ldrb	r3, [r2, r3]
 8005f7e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f94:	4413      	add	r3, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff feaa 	bl	8005cf2 <move_window>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 8087 	bne.w	80060b4 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005fac:	461a      	mov	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fb4:	fb02 f201 	mul.w	r2, r2, r1
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	5cd3      	ldrb	r3, [r2, r3]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <get_fat+0xec>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	e002      	b.n	8005fde <get_fat+0xf2>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fde:	617b      	str	r3, [r7, #20]
			break;
 8005fe0:	e06d      	b.n	80060be <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fe77 	bl	8005cf2 <move_window>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d156      	bne.n	80060b8 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006014:	fbb3 f1f2 	udiv	r1, r3, r2
 8006018:	fb02 f201 	mul.w	r2, r2, r1
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4413      	add	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	3301      	adds	r3, #1
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	b21a      	sxth	r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	b21b      	sxth	r3, r3
 8006034:	4313      	orrs	r3, r2
 8006036:	b21b      	sxth	r3, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	617b      	str	r3, [r7, #20]
			break;
 800603c:	e03f      	b.n	80060be <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	b29b      	uxth	r3, r3
 800604e:	4619      	mov	r1, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	fbb3 f3f1 	udiv	r3, r3, r1
 8006056:	4413      	add	r3, r2
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fe49 	bl	8005cf2 <move_window>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d12a      	bne.n	80060bc <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006070:	fbb3 f1f2 	udiv	r1, r3, r2
 8006074:	fb02 f201 	mul.w	r2, r2, r1
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3303      	adds	r3, #3
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	061a      	lsls	r2, r3, #24
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	3302      	adds	r3, #2
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	4313      	orrs	r3, r2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	3201      	adds	r2, #1
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	0212      	lsls	r2, r2, #8
 800609a:	4313      	orrs	r3, r2
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060a6:	617b      	str	r3, [r7, #20]
			break;
 80060a8:	e009      	b.n	80060be <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 80060aa:	2301      	movs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e006      	b.n	80060be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b0:	bf00      	nop
 80060b2:	e004      	b.n	80060be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b4:	bf00      	nop
 80060b6:	e002      	b.n	80060be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060b8:	bf00      	nop
 80060ba:	e000      	b.n	80060be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060bc:	bf00      	nop
		}
	}

	return val;
 80060be:	697b      	ldr	r3, [r7, #20]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d905      	bls.n	80060e6 <put_fat+0x1e>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <put_fat+0x24>
		res = FR_INT_ERR;
 80060e6:	2302      	movs	r3, #2
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e128      	b.n	800633e <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	f000 80c3 	beq.w	800627e <put_fat+0x1b6>
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	f300 8116 	bgt.w	800632a <put_fat+0x262>
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d003      	beq.n	800610a <put_fat+0x42>
 8006102:	2b02      	cmp	r3, #2
 8006104:	f000 8087 	beq.w	8006216 <put_fat+0x14e>
 8006108:	e10f      	b.n	800632a <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4413      	add	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006124:	4619      	mov	r1, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	fbb3 f3f1 	udiv	r3, r3, r1
 800612c:	4413      	add	r3, r2
 800612e:	4619      	mov	r1, r3
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fdde 	bl	8005cf2 <move_window>
 8006136:	4603      	mov	r3, r0
 8006138:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800613a:	7ffb      	ldrb	r3, [r7, #31]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 80f7 	bne.w	8006330 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	617a      	str	r2, [r7, #20]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800614e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006152:	fb02 f201 	mul.w	r2, r2, r1
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00d      	beq.n	8006184 <put_fat+0xbc>
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b25b      	sxtb	r3, r3
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	b25a      	sxtb	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	b25b      	sxtb	r3, r3
 800617c:	4313      	orrs	r3, r2
 800617e:	b25b      	sxtb	r3, r3
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e001      	b.n	8006188 <put_fat+0xc0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80061a0:	4619      	mov	r1, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a8:	4413      	add	r3, r2
 80061aa:	4619      	mov	r1, r3
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff fda0 	bl	8005cf2 <move_window>
 80061b2:	4603      	mov	r3, r0
 80061b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 80bb 	bne.w	8006334 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80061c4:	461a      	mov	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061cc:	fb02 f201 	mul.w	r2, r2, r1
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <put_fat+0x122>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e00e      	b.n	8006208 <put_fat+0x140>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	b25b      	sxtb	r3, r3
 80061f0:	f023 030f 	bic.w	r3, r3, #15
 80061f4:	b25a      	sxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	b25b      	sxtb	r3, r3
 8006202:	4313      	orrs	r3, r2
 8006204:	b25b      	sxtb	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006214:	e093      	b.n	800633e <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	4619      	mov	r1, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	fbb3 f3f1 	udiv	r3, r3, r1
 800622e:	4413      	add	r3, r2
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fd5d 	bl	8005cf2 <move_window>
 8006238:	4603      	mov	r3, r0
 800623a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800623c:	7ffb      	ldrb	r3, [r7, #31]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d17a      	bne.n	8006338 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800624c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006250:	fb02 f201 	mul.w	r2, r2, r1
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	b29b      	uxth	r3, r3
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	b29a      	uxth	r2, r3
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	3301      	adds	r3, #1
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800627c:	e05f      	b.n	800633e <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	b29b      	uxth	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	fbb3 f3f1 	udiv	r3, r3, r1
 8006296:	4413      	add	r3, r2
 8006298:	4619      	mov	r1, r3
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff fd29 	bl	8005cf2 <move_window>
 80062a0:	4603      	mov	r3, r0
 80062a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062a4:	7ffb      	ldrb	r3, [r7, #31]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d148      	bne.n	800633c <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80062b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b8:	fb02 f201 	mul.w	r2, r2, r1
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	3303      	adds	r3, #3
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	061a      	lsls	r2, r3, #24
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	3302      	adds	r3, #2
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	4313      	orrs	r3, r2
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	3201      	adds	r2, #1
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	0212      	lsls	r2, r2, #8
 80062de:	4313      	orrs	r3, r2
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	b29a      	uxth	r2, r3
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	3301      	adds	r3, #1
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0c1a      	lsrs	r2, r3, #16
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	3302      	adds	r3, #2
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0e1a      	lsrs	r2, r3, #24
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	3303      	adds	r3, #3
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006328:	e009      	b.n	800633e <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800632a:	2302      	movs	r3, #2
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e006      	b.n	800633e <put_fat+0x276>
			if (res != FR_OK) break;
 8006330:	bf00      	nop
 8006332:	e004      	b.n	800633e <put_fat+0x276>
			if (res != FR_OK) break;
 8006334:	bf00      	nop
 8006336:	e002      	b.n	800633e <put_fat+0x276>
			if (res != FR_OK) break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <put_fat+0x276>
			if (res != FR_OK) break;
 800633c:	bf00      	nop
		}
	}

	return res;
 800633e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d905      	bls.n	8006364 <remove_chain+0x1c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d302      	bcc.n	800636a <remove_chain+0x22>
		res = FR_INT_ERR;
 8006364:	2302      	movs	r3, #2
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	e043      	b.n	80063f2 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800636e:	e036      	b.n	80063de <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fdba 	bl	8005eec <get_fat>
 8006378:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d035      	beq.n	80063ec <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d102      	bne.n	800638c <remove_chain+0x44>
 8006386:	2302      	movs	r3, #2
 8006388:	73fb      	strb	r3, [r7, #15]
 800638a:	e032      	b.n	80063f2 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d102      	bne.n	800639a <remove_chain+0x52>
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
 8006398:	e02b      	b.n	80063f2 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800639a:	2200      	movs	r2, #0
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fe92 	bl	80060c8 <put_fat>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d120      	bne.n	80063f0 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d00f      	beq.n	80063da <remove_chain+0x92>
				fs->free_clust++;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d3c2      	bcc.n	8006370 <remove_chain+0x28>
 80063ea:	e002      	b.n	80063f2 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80063f0:	bf00      	nop
		}
	}

	return res;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10f      	bne.n	800642c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006412:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <create_chain+0x2a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d31c      	bcc.n	8006460 <create_chain+0x64>
 8006426:	2301      	movs	r3, #1
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e019      	b.n	8006460 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fd5c 	bl	8005eec <get_fat>
 8006434:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d801      	bhi.n	8006440 <create_chain+0x44>
 800643c:	2301      	movs	r3, #1
 800643e:	e076      	b.n	800652e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d101      	bne.n	800644c <create_chain+0x50>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	e070      	b.n	800652e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d201      	bcs.n	800645c <create_chain+0x60>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	e068      	b.n	800652e <create_chain+0x132>
		scl = clst;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3301      	adds	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	429a      	cmp	r2, r3
 8006474:	d307      	bcc.n	8006486 <create_chain+0x8a>
			ncl = 2;
 8006476:	2302      	movs	r3, #2
 8006478:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	d901      	bls.n	8006486 <create_chain+0x8a>
 8006482:	2300      	movs	r3, #0
 8006484:	e053      	b.n	800652e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006486:	6979      	ldr	r1, [r7, #20]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fd2f 	bl	8005eec <get_fat>
 800648e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d002      	beq.n	80064a4 <create_chain+0xa8>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <create_chain+0xac>
			return cs;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	e042      	b.n	800652e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d1d9      	bne.n	8006464 <create_chain+0x68>
 80064b0:	2300      	movs	r3, #0
 80064b2:	e03c      	b.n	800652e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80064b4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80064b6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fe03 	bl	80060c8 <put_fat>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <create_chain+0xe4>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fdf6 	bl	80060c8 <put_fat>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d11a      	bne.n	800651c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d018      	beq.n	800652c <create_chain+0x130>
			fs->free_clust--;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	b2da      	uxtb	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800651a:	e007      	b.n	800652c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d102      	bne.n	8006528 <create_chain+0x12c>
 8006522:	f04f 33ff 	mov.w	r3, #4294967295
 8006526:	e000      	b.n	800652a <create_chain+0x12e>
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800652c:	697b      	ldr	r3, [r7, #20]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	3304      	adds	r3, #4
 8006546:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006550:	461a      	mov	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	fbb3 f3f2 	udiv	r3, r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8006560:	fbb3 f3f2 	udiv	r3, r3, r2
 8006564:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1d1a      	adds	r2, r3, #4
 800656a:	613a      	str	r2, [r7, #16]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <clmt_clust+0x44>
 8006576:	2300      	movs	r3, #0
 8006578:	e010      	b.n	800659c <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	429a      	cmp	r2, r3
 8006580:	d307      	bcc.n	8006592 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3304      	adds	r3, #4
 800658e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006590:	e7e9      	b.n	8006566 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8006592:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
}
 800659c:	4618      	mov	r0, r3
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr

080065a6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d006      	beq.n	80065d2 <dir_sdi+0x2c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d301      	bcc.n	80065d6 <dir_sdi+0x30>
		return FR_INT_ERR;
 80065d2:	2302      	movs	r3, #2
 80065d4:	e082      	b.n	80066dc <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <dir_sdi+0x4c>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d104      	bne.n	80065f2 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80065f0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10f      	bne.n	8006618 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8006600:	461a      	mov	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	4293      	cmp	r3, r2
 8006606:	d301      	bcc.n	800660c <dir_sdi+0x66>
			return FR_INT_ERR;
 8006608:	2302      	movs	r3, #2
 800660a:	e067      	b.n	80066dc <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e036      	b.n	8006686 <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800662e:	fb03 f302 	mul.w	r3, r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006634:	e01c      	b.n	8006670 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fc55 	bl	8005eec <get_fat>
 8006642:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d101      	bne.n	8006650 <dir_sdi+0xaa>
 800664c:	2301      	movs	r3, #1
 800664e:	e045      	b.n	80066dc <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d906      	bls.n	8006664 <dir_sdi+0xbe>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d301      	bcc.n	8006668 <dir_sdi+0xc2>
				return FR_INT_ERR;
 8006664:	2302      	movs	r3, #2
 8006666:	e039      	b.n	80066dc <dir_sdi+0x136>
			idx -= ic;
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d2de      	bcs.n	8006636 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6979      	ldr	r1, [r7, #20]
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fc13 	bl	8005eaa <clust2sect>
 8006684:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <dir_sdi+0xf0>
 8006692:	2302      	movs	r3, #2
 8006694:	e022      	b.n	80066dc <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	441a      	add	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80066cc:	fb02 f201 	mul.w	r2, r2, r1
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	015b      	lsls	r3, r3, #5
 80066d4:	18c2      	adds	r2, r0, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	88db      	ldrh	r3, [r3, #6]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <dir_next+0x22>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <dir_next+0x26>
		return FR_NO_FILE;
 8006706:	2304      	movs	r3, #4
 8006708:	e0e2      	b.n	80068d0 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	b29b      	uxth	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	fbb3 f1f2 	udiv	r1, r3, r2
 800671e:	fb02 f201 	mul.w	r2, r2, r1
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 80ba 	bne.w	800689e <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8006744:	461a      	mov	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4293      	cmp	r3, r2
 800674a:	f0c0 80a8 	bcc.w	800689e <dir_next+0x1ba>
				return FR_NO_FILE;
 800674e:	2304      	movs	r3, #4
 8006750:	e0be      	b.n	80068d0 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	fbb3 f3f2 	udiv	r3, r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800676e:	3a01      	subs	r2, #1
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	f040 8093 	bne.w	800689e <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7ff fbb2 	bl	8005eec <get_fat>
 8006788:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d801      	bhi.n	8006794 <dir_next+0xb0>
 8006790:	2302      	movs	r3, #2
 8006792:	e09d      	b.n	80068d0 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d101      	bne.n	80067a0 <dir_next+0xbc>
 800679c:	2301      	movs	r3, #1
 800679e:	e097      	b.n	80068d0 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d36b      	bcc.n	8006886 <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <dir_next+0xd4>
 80067b4:	2304      	movs	r3, #4
 80067b6:	e08b      	b.n	80068d0 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7ff fe1a 	bl	80063fc <create_chain>
 80067c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <dir_next+0xf0>
 80067d0:	2307      	movs	r3, #7
 80067d2:	e07d      	b.n	80068d0 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <dir_next+0xfa>
 80067da:	2302      	movs	r3, #2
 80067dc:	e078      	b.n	80068d0 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e4:	d101      	bne.n	80067ea <dir_next+0x106>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e072      	b.n	80068d0 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fa36 	bl	8005c60 <sync_window>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <dir_next+0x11a>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e068      	b.n	80068d0 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800680c:	461a      	mov	r2, r3
 800680e:	2100      	movs	r1, #0
 8006810:	f7ff f820 	bl	8005854 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681c      	ldr	r4, [r3, #0]
 800681c:	6979      	ldr	r1, [r7, #20]
 800681e:	4610      	mov	r0, r2
 8006820:	f7ff fb43 	bl	8005eaa <clust2sect>
 8006824:	4603      	mov	r3, r0
 8006826:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	e018      	b.n	8006862 <dir_next+0x17e>
						dp->fs->wflag = 1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fa0e 	bl	8005c60 <sync_window>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <dir_next+0x16a>
 800684a:	2301      	movs	r3, #1
 800684c:	e040      	b.n	80068d0 <dir_next+0x1ec>
						dp->fs->winsect++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8006856:	3201      	adds	r2, #1
 8006858:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	3301      	adds	r3, #1
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800686a:	461a      	mov	r2, r3
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4293      	cmp	r3, r2
 8006870:	d3de      	bcc.n	8006830 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	1a8a      	subs	r2, r1, r2
 8006882:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6979      	ldr	r1, [r7, #20]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fb09 	bl	8005eaa <clust2sect>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80068c0:	fb02 f201 	mul.w	r2, r2, r1
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	015b      	lsls	r3, r3, #5
 80068c8:	18c2      	adds	r2, r0, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd90      	pop	{r4, r7, pc}

080068d8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80068e2:	2100      	movs	r1, #0
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe5e 	bl	80065a6 <dir_sdi>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d12d      	bne.n	8006950 <dir_alloc+0x78>
		n = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7ff f9f5 	bl	8005cf2 <move_window>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d11d      	bne.n	800694e <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2be5      	cmp	r3, #229	; 0xe5
 800691a:	d004      	beq.n	8006926 <dir_alloc+0x4e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3301      	adds	r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d102      	bne.n	800693a <dir_alloc+0x62>
 8006934:	e00c      	b.n	8006950 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fed1 	bl	80066e4 <dir_next>
 8006942:	4603      	mov	r3, r0
 8006944:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0d5      	beq.n	80068f8 <dir_alloc+0x20>
 800694c:	e000      	b.n	8006950 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800694e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b04      	cmp	r3, #4
 8006954:	d101      	bne.n	800695a <dir_alloc+0x82>
 8006956:	2307      	movs	r3, #7
 8006958:	73fb      	strb	r3, [r7, #15]
	return res;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	331b      	adds	r3, #27
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	b21a      	sxth	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	331a      	adds	r3, #26
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b21b      	sxth	r3, r3
 8006980:	4313      	orrs	r3, r2
 8006982:	b21b      	sxth	r3, r3
 8006984:	b29b      	uxth	r3, r3
 8006986:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800698e:	2b03      	cmp	r3, #3
 8006990:	d10f      	bne.n	80069b2 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	3315      	adds	r3, #21
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	b21a      	sxth	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	3314      	adds	r3, #20
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b21b      	sxth	r3, r3
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

	return cl;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	331a      	adds	r3, #26
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	331b      	adds	r3, #27
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	0c1a      	lsrs	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3314      	adds	r3, #20
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	0c1b      	lsrs	r3, r3, #16
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3315      	adds	r3, #21
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr
	...

08006a0c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1e:	1e5a      	subs	r2, r3, #1
 8006a20:	4613      	mov	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	2301      	movs	r3, #1
 8006a32:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006a34:	4a2b      	ldr	r2, [pc, #172]	; (8006ae4 <cmp_lfn+0xd8>)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	4413      	add	r3, r2
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	b21a      	sxth	r2, r3
 8006a48:	4926      	ldr	r1, [pc, #152]	; (8006ae4 <cmp_lfn+0xd8>)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	440b      	add	r3, r1
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	440b      	add	r3, r1
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b21b      	sxth	r3, r3
 8006a5e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d019      	beq.n	8006a9a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006a66:	89bb      	ldrh	r3, [r7, #12]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 ff11 	bl	8008890 <ff_wtoupper>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2bfe      	cmp	r3, #254	; 0xfe
 8006a76:	d80e      	bhi.n	8006a96 <cmp_lfn+0x8a>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	617a      	str	r2, [r7, #20]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 ff02 	bl	8008890 <ff_wtoupper>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d008      	beq.n	8006aa8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006a96:	2300      	movs	r3, #0
 8006a98:	e01f      	b.n	8006ada <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d001      	beq.n	8006aa8 <cmp_lfn+0x9c>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e018      	b.n	8006ada <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d9bf      	bls.n	8006a34 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <cmp_lfn+0xcc>
 8006ac0:	89fb      	ldrh	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <cmp_lfn+0xcc>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <cmp_lfn+0xcc>
		return 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006ad8:	2301      	movs	r3, #1
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	08009328 	.word	0x08009328

08006ae8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b089      	sub	sp, #36	; 0x24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4611      	mov	r1, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	460b      	mov	r3, r1
 8006af8:	71fb      	strb	r3, [r7, #7]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	330d      	adds	r3, #13
 8006b02:	79ba      	ldrb	r2, [r7, #6]
 8006b04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	330b      	adds	r3, #11
 8006b0a:	220f      	movs	r2, #15
 8006b0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	330c      	adds	r3, #12
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	331a      	adds	r3, #26
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	331b      	adds	r3, #27
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	82fb      	strh	r3, [r7, #22]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006b3e:	8afb      	ldrh	r3, [r7, #22]
 8006b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <fit_lfn+0x70>
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	61fa      	str	r2, [r7, #28]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006b58:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <fit_lfn+0xe4>)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4413      	add	r3, r2
 8006b66:	8afa      	ldrh	r2, [r7, #22]
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	8afb      	ldrh	r3, [r7, #22]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b299      	uxth	r1, r3
 8006b72:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <fit_lfn+0xe4>)
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	4413      	add	r3, r2
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	4413      	add	r3, r2
 8006b80:	b2ca      	uxtb	r2, r1
 8006b82:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006b84:	8afb      	ldrh	r3, [r7, #22]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <fit_lfn+0xa8>
 8006b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	3301      	adds	r3, #1
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b0c      	cmp	r3, #12
 8006b9a:	d9d0      	bls.n	8006b3e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006b9c:	8afb      	ldrh	r3, [r7, #22]
 8006b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d006      	beq.n	8006bb4 <fit_lfn+0xcc>
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <fit_lfn+0xd4>
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	79fa      	ldrb	r2, [r7, #7]
 8006bc0:	701a      	strb	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3724      	adds	r7, #36	; 0x24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	08009328 	.word	0x08009328

08006bd0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006bde:	220b      	movs	r2, #11
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7fe fe18 	bl	8005818 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d92b      	bls.n	8006c46 <gen_numname+0x76>
		sr = seq;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006bf2:	e022      	b.n	8006c3a <gen_numname+0x6a>
			wc = *lfn++;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1c9a      	adds	r2, r3, #2
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006bfe:	2300      	movs	r3, #0
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	e017      	b.n	8006c34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	005a      	lsls	r2, r3, #1
 8006c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <gen_numname+0x5e>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006c28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006c2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	3301      	adds	r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d9e4      	bls.n	8006c04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1d8      	bne.n	8006bf4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006c46:	2307      	movs	r3, #7
 8006c48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	3330      	adds	r3, #48	; 0x30
 8006c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c5e:	2b39      	cmp	r3, #57	; 0x39
 8006c60:	d904      	bls.n	8006c6c <gen_numname+0x9c>
 8006c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c66:	3307      	adds	r3, #7
 8006c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c76:	4413      	add	r3, r2
 8006c78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	091b      	lsrs	r3, r3, #4
 8006c84:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1de      	bne.n	8006c4a <gen_numname+0x7a>
	ns[i] = '~';
 8006c8c:	f107 0214 	add.w	r2, r7, #20
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	4413      	add	r3, r2
 8006c94:	227e      	movs	r2, #126	; 0x7e
 8006c96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	e002      	b.n	8006ca4 <gen_numname+0xd4>
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d205      	bcs.n	8006cb8 <gen_numname+0xe8>
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	4413      	add	r3, r2
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d1f2      	bne.n	8006c9e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d808      	bhi.n	8006cd0 <gen_numname+0x100>
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006cc8:	4413      	add	r3, r2
 8006cca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006cce:	e000      	b.n	8006cd2 <gen_numname+0x102>
 8006cd0:	2120      	movs	r1, #32
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	627a      	str	r2, [r7, #36]	; 0x24
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	460a      	mov	r2, r1
 8006cde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	2b07      	cmp	r3, #7
 8006ce4:	d9e8      	bls.n	8006cb8 <gen_numname+0xe8>
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	3730      	adds	r7, #48	; 0x30
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006cfc:	230b      	movs	r3, #11
 8006cfe:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	0852      	lsrs	r2, r2, #1
 8006d06:	01db      	lsls	r3, r3, #7
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1c59      	adds	r1, r3, #1
 8006d10:	6079      	str	r1, [r7, #4]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ed      	bne.n	8006d00 <sum_sfn+0x10>
	return sum;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d38:	2100      	movs	r1, #0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fc33 	bl	80065a6 <dir_sdi>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <dir_find+0x1e>
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	e0a0      	b.n	8006e90 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006d4e:	23ff      	movs	r3, #255	; 0xff
 8006d50:	753b      	strb	r3, [r7, #20]
 8006d52:	7d3b      	ldrb	r3, [r7, #20]
 8006d54:	757b      	strb	r3, [r7, #21]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d5c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7fe ffc2 	bl	8005cf2 <move_window>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 8085 	bne.w	8006e84 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d86:	7dbb      	ldrb	r3, [r7, #22]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <dir_find+0x62>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	75fb      	strb	r3, [r7, #23]
 8006d90:	e07d      	b.n	8006e8e <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	330b      	adds	r3, #11
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d9c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006d9e:	7dbb      	ldrb	r3, [r7, #22]
 8006da0:	2be5      	cmp	r3, #229	; 0xe5
 8006da2:	d007      	beq.n	8006db4 <dir_find+0x84>
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <dir_find+0x92>
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d006      	beq.n	8006dc2 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006db4:	23ff      	movs	r3, #255	; 0xff
 8006db6:	757b      	strb	r3, [r7, #21]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dbe:	849a      	strh	r2, [r3, #36]	; 0x24
 8006dc0:	e055      	b.n	8006e6e <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b0f      	cmp	r3, #15
 8006dc6:	d12f      	bne.n	8006e28 <dir_find+0xf8>
				if (dp->lfn) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d04e      	beq.n	8006e6e <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006dd0:	7dbb      	ldrb	r3, [r7, #22]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00c      	beq.n	8006df4 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	7b5b      	ldrb	r3, [r3, #13]
 8006dde:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006de0:	7dbb      	ldrb	r3, [r7, #22]
 8006de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de6:	75bb      	strb	r3, [r7, #22]
 8006de8:	7dbb      	ldrb	r3, [r7, #22]
 8006dea:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	88da      	ldrh	r2, [r3, #6]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006df4:	7dba      	ldrb	r2, [r7, #22]
 8006df6:	7d7b      	ldrb	r3, [r7, #21]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d112      	bne.n	8006e22 <dir_find+0xf2>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	330d      	adds	r3, #13
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	7d3a      	ldrb	r2, [r7, #20]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d10c      	bne.n	8006e22 <dir_find+0xf2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	6939      	ldr	r1, [r7, #16]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff fdfc 	bl	8006a0c <cmp_lfn>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <dir_find+0xf2>
 8006e1a:	7d7b      	ldrb	r3, [r7, #21]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	e000      	b.n	8006e24 <dir_find+0xf4>
 8006e22:	23ff      	movs	r3, #255	; 0xff
 8006e24:	757b      	strb	r3, [r7, #21]
 8006e26:	e022      	b.n	8006e6e <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006e28:	7d7b      	ldrb	r3, [r7, #21]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <dir_find+0x10e>
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7ff ff5e 	bl	8006cf0 <sum_sfn>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7d3b      	ldrb	r3, [r7, #20]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d024      	beq.n	8006e88 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	330b      	adds	r3, #11
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <dir_find+0x132>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	220b      	movs	r2, #11
 8006e54:	4619      	mov	r1, r3
 8006e56:	6938      	ldr	r0, [r7, #16]
 8006e58:	f7fe fd16 	bl	8005888 <mem_cmp>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d014      	beq.n	8006e8c <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006e62:	23ff      	movs	r3, #255	; 0xff
 8006e64:	757b      	strb	r3, [r7, #21]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e6c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff fc37 	bl	80066e4 <dir_next>
 8006e76:	4603      	mov	r3, r0
 8006e78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f43f af6e 	beq.w	8006d5e <dir_find+0x2e>
 8006e82:	e004      	b.n	8006e8e <dir_find+0x15e>
		if (res != FR_OK) break;
 8006e84:	bf00      	nop
 8006e86:	e002      	b.n	8006e8e <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e8c:	bf00      	nop

	return res;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	220c      	movs	r2, #12
 8006eb2:	6a39      	ldr	r1, [r7, #32]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fcaf 	bl	8005818 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d035      	beq.n	8006f30 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	330b      	adds	r3, #11
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed6:	e013      	b.n	8006f00 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006ed8:	f107 010c 	add.w	r1, r7, #12
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	6a38      	ldr	r0, [r7, #32]
 8006ee2:	f7ff fe75 	bl	8006bd0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff ff22 	bl	8006d30 <dir_find>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	3301      	adds	r3, #1
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b63      	cmp	r3, #99	; 0x63
 8006f04:	d9e8      	bls.n	8006ed8 <dir_register+0x40>
 8006f06:	e000      	b.n	8006f0a <dir_register+0x72>
			if (res != FR_OK) break;
 8006f08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	2b64      	cmp	r3, #100	; 0x64
 8006f0e:	d101      	bne.n	8006f14 <dir_register+0x7c>
 8006f10:	2307      	movs	r3, #7
 8006f12:	e0b5      	b.n	8007080 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d002      	beq.n	8006f22 <dir_register+0x8a>
 8006f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f20:	e0ae      	b.n	8007080 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	330b      	adds	r3, #11
 8006f26:	7dfa      	ldrb	r2, [r7, #23]
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3e:	e002      	b.n	8006f46 <dir_register+0xae>
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	3301      	adds	r3, #1
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f5      	bne.n	8006f40 <dir_register+0xa8>
		nent = (n + 25) / 13;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	3319      	adds	r3, #25
 8006f58:	4a4b      	ldr	r2, [pc, #300]	; (8007088 <dir_register+0x1f0>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
 8006f62:	e001      	b.n	8006f68 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006f64:	2301      	movs	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff fcb4 	bl	80068d8 <dir_alloc>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d14c      	bne.n	8007018 <dir_register+0x180>
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	3b01      	subs	r3, #1
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d046      	beq.n	8007018 <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fb05 	bl	80065a6 <dir_sdi>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d136      	bne.n	8007018 <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fe9e 	bl	8006cf0 <sum_sfn>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fe fe95 	bl	8005cf2 <move_window>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d11f      	bne.n	8007016 <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a18      	ldr	r0, [r3, #32]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6959      	ldr	r1, [r3, #20]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	7efb      	ldrb	r3, [r7, #27]
 8006fe4:	f7ff fd80 	bl	8006ae8 <fit_lfn>
				dp->fs->wflag = 1;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fb75 	bl	80066e4 <dir_next>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <dir_register+0x180>
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	3b01      	subs	r3, #1
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1d1      	bne.n	8006fb8 <dir_register+0x120>
 8007014:	e000      	b.n	8007018 <dir_register+0x180>
				if (res != FR_OK) break;
 8007016:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800701c:	2b00      	cmp	r3, #0
 800701e:	d12d      	bne.n	800707c <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f7fe fe61 	bl	8005cf2 <move_window>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d11e      	bne.n	800707c <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	2220      	movs	r2, #32
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fc04 	bl	8005854 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6958      	ldr	r0, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	220b      	movs	r2, #11
 8007056:	4619      	mov	r1, r3
 8007058:	f7fe fbde 	bl	8005818 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	330b      	adds	r3, #11
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	330c      	adds	r3, #12
 800706a:	f002 0218 	and.w	r2, r2, #24
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800707c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007080:	4618      	mov	r0, r3
 8007082:	3730      	adds	r7, #48	; 0x30
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	4ec4ec4f 	.word	0x4ec4ec4f

0800708c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	e002      	b.n	80070a4 <create_name+0x18>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3301      	adds	r3, #1
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b2f      	cmp	r3, #47	; 0x2f
 80070aa:	d0f8      	beq.n	800709e <create_name+0x12>
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b5c      	cmp	r3, #92	; 0x5c
 80070b2:	d0f4      	beq.n	800709e <create_name+0x12>
	lfn = dp->lfn;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	61ba      	str	r2, [r7, #24]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80070d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d2:	2b1f      	cmp	r3, #31
 80070d4:	d92f      	bls.n	8007136 <create_name+0xaa>
 80070d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d8:	2b2f      	cmp	r3, #47	; 0x2f
 80070da:	d02c      	beq.n	8007136 <create_name+0xaa>
 80070dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070de:	2b5c      	cmp	r3, #92	; 0x5c
 80070e0:	d029      	beq.n	8007136 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2bfe      	cmp	r3, #254	; 0xfe
 80070e6:	d901      	bls.n	80070ec <create_name+0x60>
			return FR_INVALID_NAME;
 80070e8:	2306      	movs	r3, #6
 80070ea:	e176      	b.n	80073da <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 80070ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80070f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f4:	2101      	movs	r1, #1
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fb90 	bl	800881c <ff_convert>
 80070fc:	4603      	mov	r3, r0
 80070fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <create_name+0x7e>
 8007106:	2306      	movs	r3, #6
 8007108:	e167      	b.n	80073da <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800710a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800710c:	2b7f      	cmp	r3, #127	; 0x7f
 800710e:	d809      	bhi.n	8007124 <create_name+0x98>
 8007110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007112:	4619      	mov	r1, r3
 8007114:	48b3      	ldr	r0, [pc, #716]	; (80073e4 <create_name+0x358>)
 8007116:	f7fe fbdd 	bl	80058d4 <chk_chr>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <create_name+0x98>
			return FR_INVALID_NAME;
 8007120:	2306      	movs	r3, #6
 8007122:	e15a      	b.n	80073da <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	617a      	str	r2, [r7, #20]
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007132:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007134:	e7c5      	b.n	80070c2 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	441a      	add	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007142:	2b1f      	cmp	r3, #31
 8007144:	d801      	bhi.n	800714a <create_name+0xbe>
 8007146:	2304      	movs	r3, #4
 8007148:	e000      	b.n	800714c <create_name+0xc0>
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007150:	e011      	b.n	8007176 <create_name+0xea>
		w = lfn[di - 1];
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007158:	3b01      	subs	r3, #1
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007166:	2b20      	cmp	r3, #32
 8007168:	d002      	beq.n	8007170 <create_name+0xe4>
 800716a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716c:	2b2e      	cmp	r3, #46	; 0x2e
 800716e:	d106      	bne.n	800717e <create_name+0xf2>
		di--;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3b01      	subs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1ea      	bne.n	8007152 <create_name+0xc6>
 800717c:	e000      	b.n	8007180 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800717e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <create_name+0xfe>
 8007186:	2306      	movs	r3, #6
 8007188:	e127      	b.n	80073da <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	2200      	movs	r2, #0
 8007194:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	220b      	movs	r2, #11
 800719c:	2120      	movs	r1, #32
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fb58 	bl	8005854 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80071a4:	2300      	movs	r3, #0
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	e002      	b.n	80071b0 <create_name+0x124>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	3301      	adds	r3, #1
 80071ae:	61bb      	str	r3, [r7, #24]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d0f5      	beq.n	80071aa <create_name+0x11e>
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	2b2e      	cmp	r3, #46	; 0x2e
 80071ca:	d0ee      	beq.n	80071aa <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <create_name+0x15a>
 80071d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d6:	f043 0303 	orr.w	r3, r3, #3
 80071da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80071de:	e002      	b.n	80071e6 <create_name+0x15a>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d009      	beq.n	8007200 <create_name+0x174>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071f2:	3b01      	subs	r3, #1
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	2b2e      	cmp	r3, #46	; 0x2e
 80071fe:	d1ef      	bne.n	80071e0 <create_name+0x154>

	b = i = 0; ni = 8;
 8007200:	2300      	movs	r3, #0
 8007202:	623b      	str	r3, [r7, #32]
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800720a:	2308      	movs	r3, #8
 800720c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	61ba      	str	r2, [r7, #24]
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800721e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 808f 	beq.w	8007344 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007228:	2b20      	cmp	r3, #32
 800722a:	d006      	beq.n	800723a <create_name+0x1ae>
 800722c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800722e:	2b2e      	cmp	r3, #46	; 0x2e
 8007230:	d10a      	bne.n	8007248 <create_name+0x1bc>
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	429a      	cmp	r2, r3
 8007238:	d006      	beq.n	8007248 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800723a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800723e:	f043 0303 	orr.w	r3, r3, #3
 8007242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007246:	e07c      	b.n	8007342 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	429a      	cmp	r2, r3
 800724e:	d203      	bcs.n	8007258 <create_name+0x1cc>
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	429a      	cmp	r2, r3
 8007256:	d123      	bne.n	80072a0 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b0b      	cmp	r3, #11
 800725c:	d106      	bne.n	800726c <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800725e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007262:	f043 0303 	orr.w	r3, r3, #3
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800726a:	e06e      	b.n	800734a <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	429a      	cmp	r2, r3
 8007272:	d005      	beq.n	8007280 <create_name+0x1f4>
 8007274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007278:	f043 0303 	orr.w	r3, r3, #3
 800727c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	429a      	cmp	r2, r3
 8007286:	d85f      	bhi.n	8007348 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	2308      	movs	r3, #8
 800728e:	623b      	str	r3, [r7, #32]
 8007290:	230b      	movs	r3, #11
 8007292:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800729e:	e050      	b.n	8007342 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80072a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072a2:	2b7f      	cmp	r3, #127	; 0x7f
 80072a4:	d914      	bls.n	80072d0 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80072a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fab6 	bl	800881c <ff_convert>
 80072b0:	4603      	mov	r3, r0
 80072b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80072b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <create_name+0x238>
 80072ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072bc:	3b80      	subs	r3, #128	; 0x80
 80072be:	4a4a      	ldr	r2, [pc, #296]	; (80073e8 <create_name+0x35c>)
 80072c0:	5cd3      	ldrb	r3, [r2, r3]
 80072c2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80072d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <create_name+0x25a>
 80072d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d8:	4619      	mov	r1, r3
 80072da:	4844      	ldr	r0, [pc, #272]	; (80073ec <create_name+0x360>)
 80072dc:	f7fe fafa 	bl	80058d4 <chk_chr>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80072e6:	235f      	movs	r3, #95	; 0x5f
 80072e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80072ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ee:	f043 0303 	orr.w	r3, r3, #3
 80072f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072f6:	e01b      	b.n	8007330 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80072f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d909      	bls.n	8007312 <create_name+0x286>
 80072fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007300:	2b5a      	cmp	r3, #90	; 0x5a
 8007302:	d806      	bhi.n	8007312 <create_name+0x286>
					b |= 2;
 8007304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007310:	e00e      	b.n	8007330 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007314:	2b60      	cmp	r3, #96	; 0x60
 8007316:	d90b      	bls.n	8007330 <create_name+0x2a4>
 8007318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800731a:	2b7a      	cmp	r3, #122	; 0x7a
 800731c:	d808      	bhi.n	8007330 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800731e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800732a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800732c:	3b20      	subs	r3, #32
 800732e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	1c59      	adds	r1, r3, #1
 8007338:	6239      	str	r1, [r7, #32]
 800733a:	4413      	add	r3, r2
 800733c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007342:	e764      	b.n	800720e <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <create_name+0x2be>
			if (si > di) break;			/* No extension */
 8007348:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2be5      	cmp	r3, #229	; 0xe5
 8007352:	d103      	bne.n	800735c <create_name+0x2d0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	2205      	movs	r2, #5
 800735a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b08      	cmp	r3, #8
 8007360:	d104      	bne.n	800736c <create_name+0x2e0>
 8007362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800736c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007370:	f003 030c 	and.w	r3, r3, #12
 8007374:	2b0c      	cmp	r3, #12
 8007376:	d005      	beq.n	8007384 <create_name+0x2f8>
 8007378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	2b03      	cmp	r3, #3
 8007382:	d105      	bne.n	8007390 <create_name+0x304>
		cf |= NS_LFN;
 8007384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007388:	f043 0302 	orr.w	r3, r3, #2
 800738c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d117      	bne.n	80073cc <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800739c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d105      	bne.n	80073b4 <create_name+0x328>
 80073a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ac:	f043 0310 	orr.w	r3, r3, #16
 80073b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80073b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b04      	cmp	r3, #4
 80073be:	d105      	bne.n	80073cc <create_name+0x340>
 80073c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c4:	f043 0308 	orr.w	r3, r3, #8
 80073c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	330b      	adds	r3, #11
 80073d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80073d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80073d8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3728      	adds	r7, #40	; 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	08009248 	.word	0x08009248
 80073e8:	080092a8 	.word	0x080092a8
 80073ec:	08009254 	.word	0x08009254

080073f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b2f      	cmp	r3, #47	; 0x2f
 8007400:	d003      	beq.n	800740a <follow_path+0x1a>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b5c      	cmp	r3, #92	; 0x5c
 8007408:	d102      	bne.n	8007410 <follow_path+0x20>
		path++;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b1f      	cmp	r3, #31
 800741c:	d809      	bhi.n	8007432 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800741e:	2100      	movs	r1, #0
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f8c0 	bl	80065a6 <dir_sdi>
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	615a      	str	r2, [r3, #20]
 8007430:	e041      	b.n	80074b6 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007432:	463b      	mov	r3, r7
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff fe28 	bl	800708c <create_name>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d132      	bne.n	80074ac <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fc72 	bl	8006d30 <dir_find>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	7adb      	ldrb	r3, [r3, #11]
 8007456:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b04      	cmp	r3, #4
 8007462:	d125      	bne.n	80074b0 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d120      	bne.n	80074b0 <follow_path+0xc0>
 800746e:	2305      	movs	r3, #5
 8007470:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007472:	e01d      	b.n	80074b0 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d11a      	bne.n	80074b4 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	330b      	adds	r3, #11
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 8007492:	2305      	movs	r3, #5
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	e00e      	b.n	80074b6 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fa60 	bl	8006964 <ld_clust>
 80074a4:	4602      	mov	r2, r0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074aa:	e7c2      	b.n	8007432 <follow_path+0x42>
			if (res != FR_OK) break;
 80074ac:	bf00      	nop
 80074ae:	e002      	b.n	80074b6 <follow_path+0xc6>
				break;
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074b4:	bf00      	nop
		}
	}

	return res;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d031      	beq.n	800753a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e002      	b.n	80074e4 <get_ldnumber+0x24>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	3301      	adds	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b1f      	cmp	r3, #31
 80074ea:	d903      	bls.n	80074f4 <get_ldnumber+0x34>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b3a      	cmp	r3, #58	; 0x3a
 80074f2:	d1f4      	bne.n	80074de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b3a      	cmp	r3, #58	; 0x3a
 80074fa:	d11c      	bne.n	8007536 <get_ldnumber+0x76>
			tp = *path;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	60fa      	str	r2, [r7, #12]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	3b30      	subs	r3, #48	; 0x30
 800750c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b09      	cmp	r3, #9
 8007512:	d80e      	bhi.n	8007532 <get_ldnumber+0x72>
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	429a      	cmp	r2, r3
 800751a:	d10a      	bne.n	8007532 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d107      	bne.n	8007532 <get_ldnumber+0x72>
					vol = (int)i;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	3301      	adds	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	e002      	b.n	800753c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800753a:	693b      	ldr	r3, [r7, #16]
}
 800753c:	4618      	mov	r0, r3
 800753e:	371c      	adds	r7, #28
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr
	...

08007548 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f04f 32ff 	mov.w	r2, #4294967295
 8007560:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fe fbc3 	bl	8005cf2 <move_window>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <check_fs+0x2e>
		return 3;
 8007572:	2303      	movs	r3, #3
 8007574:	e04a      	b.n	800760c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800757c:	3301      	adds	r3, #1
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	b21a      	sxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800758a:	b21b      	sxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b21b      	sxth	r3, r3
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <check_fs+0xcc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d001      	beq.n	800759a <check_fs+0x52>
		return 2;
 8007596:	2302      	movs	r3, #2
 8007598:	e038      	b.n	800760c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3336      	adds	r3, #54	; 0x36
 800759e:	3303      	adds	r3, #3
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	061a      	lsls	r2, r3, #24
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3336      	adds	r3, #54	; 0x36
 80075a8:	3302      	adds	r3, #2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	4313      	orrs	r3, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	3236      	adds	r2, #54	; 0x36
 80075b4:	3201      	adds	r2, #1
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	0212      	lsls	r2, r2, #8
 80075ba:	4313      	orrs	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <check_fs+0xd0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d101      	bne.n	80075d2 <check_fs+0x8a>
		return 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e01c      	b.n	800760c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3352      	adds	r3, #82	; 0x52
 80075d6:	3303      	adds	r3, #3
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	061a      	lsls	r2, r3, #24
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3352      	adds	r3, #82	; 0x52
 80075e0:	3302      	adds	r3, #2
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	4313      	orrs	r3, r2
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	3252      	adds	r2, #82	; 0x52
 80075ec:	3201      	adds	r2, #1
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	0212      	lsls	r2, r2, #8
 80075f2:	4313      	orrs	r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007600:	4a05      	ldr	r2, [pc, #20]	; (8007618 <check_fs+0xd0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d101      	bne.n	800760a <check_fs+0xc2>
		return 0;
 8007606:	2300      	movs	r3, #0
 8007608:	e000      	b.n	800760c <check_fs+0xc4>

	return 1;
 800760a:	2301      	movs	r3, #1
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	ffffaa55 	.word	0xffffaa55
 8007618:	00544146 	.word	0x00544146

0800761c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b096      	sub	sp, #88	; 0x58
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	4613      	mov	r3, r2
 8007628:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007630:	68b8      	ldr	r0, [r7, #8]
 8007632:	f7ff ff45 	bl	80074c0 <get_ldnumber>
 8007636:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	da01      	bge.n	8007642 <find_volume+0x26>
 800763e:	230b      	movs	r3, #11
 8007640:	e2de      	b.n	8007c00 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007642:	4ab1      	ldr	r2, [pc, #708]	; (8007908 <find_volume+0x2ec>)
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <find_volume+0x3a>
 8007652:	230c      	movs	r3, #12
 8007654:	e2d4      	b.n	8007c00 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800765a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01b      	beq.n	800769e <find_volume+0x82>
		stat = disk_status(fs->drv);
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe f835 	bl	80056dc <disk_status>
 8007672:	4603      	mov	r3, r0
 8007674:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10c      	bne.n	800769e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <find_volume+0x7e>
 800768a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8007696:	230a      	movs	r3, #10
 8007698:	e2b2      	b.n	8007c00 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800769a:	2300      	movs	r3, #0
 800769c:	e2b0      	b.n	8007c00 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe f82a 	bl	8005710 <disk_initialize>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80076c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80076ce:	2303      	movs	r3, #3
 80076d0:	e296      	b.n	8007c00 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <find_volume+0xcc>
 80076d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80076e4:	230a      	movs	r3, #10
 80076e6:	e28b      	b.n	8007c00 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80076f4:	461a      	mov	r2, r3
 80076f6:	2102      	movs	r1, #2
 80076f8:	f7fe f870 	bl	80057dc <disk_ioctl>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10b      	bne.n	800771a <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770c:	d305      	bcc.n	800771a <find_volume+0xfe>
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007718:	d901      	bls.n	800771e <find_volume+0x102>
 800771a:	2301      	movs	r3, #1
 800771c:	e270      	b.n	8007c00 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007726:	f7ff ff0f 	bl	8007548 <check_fs>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007734:	2b01      	cmp	r3, #1
 8007736:	d155      	bne.n	80077e4 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007738:	2300      	movs	r3, #0
 800773a:	643b      	str	r3, [r7, #64]	; 0x40
 800773c:	e029      	b.n	8007792 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800773e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007748:	4413      	add	r3, r2
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	3304      	adds	r3, #4
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <find_volume+0x160>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	330b      	adds	r3, #11
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	061a      	lsls	r2, r3, #24
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	330a      	adds	r3, #10
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	041b      	lsls	r3, r3, #16
 8007766:	4313      	orrs	r3, r2
 8007768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776a:	3209      	adds	r2, #9
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	0212      	lsls	r2, r2, #8
 8007770:	4313      	orrs	r3, r2
 8007772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007774:	3208      	adds	r2, #8
 8007776:	7812      	ldrb	r2, [r2, #0]
 8007778:	431a      	orrs	r2, r3
 800777a:	e000      	b.n	800777e <find_volume+0x162>
 800777c:	2200      	movs	r2, #0
 800777e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007786:	440b      	add	r3, r1
 8007788:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800778c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778e:	3301      	adds	r3, #1
 8007790:	643b      	str	r3, [r7, #64]	; 0x40
 8007792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007794:	2b03      	cmp	r3, #3
 8007796:	d9d2      	bls.n	800773e <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007798:	2300      	movs	r3, #0
 800779a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800779c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <find_volume+0x18c>
 80077a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a4:	3b01      	subs	r3, #1
 80077a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80077a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80077b0:	4413      	add	r3, r2
 80077b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80077b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80077b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <find_volume+0x1ae>
 80077be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077c2:	f7ff fec1 	bl	8007548 <check_fs>
 80077c6:	4603      	mov	r3, r0
 80077c8:	e000      	b.n	80077cc <find_volume+0x1b0>
 80077ca:	2302      	movs	r3, #2
 80077cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80077d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <find_volume+0x1c8>
 80077d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077da:	3301      	adds	r3, #1
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d9e1      	bls.n	80077a8 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80077e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d101      	bne.n	80077f0 <find_volume+0x1d4>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e207      	b.n	8007c00 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80077f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <find_volume+0x1e0>
 80077f8:	230d      	movs	r3, #13
 80077fa:	e201      	b.n	8007c00 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	7b1b      	ldrb	r3, [r3, #12]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b21a      	sxth	r2, r3
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	7adb      	ldrb	r3, [r3, #11]
 8007808:	b21b      	sxth	r3, r3
 800780a:	4313      	orrs	r3, r2
 800780c:	b21a      	sxth	r2, r3
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007814:	b21b      	sxth	r3, r3
 8007816:	429a      	cmp	r2, r3
 8007818:	d001      	beq.n	800781e <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800781a:	230d      	movs	r3, #13
 800781c:	e1f0      	b.n	8007c00 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	7ddb      	ldrb	r3, [r3, #23]
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	b21a      	sxth	r2, r3
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	7d9b      	ldrb	r3, [r3, #22]
 800782a:	b21b      	sxth	r3, r3
 800782c:	4313      	orrs	r3, r2
 800782e:	b21b      	sxth	r3, r3
 8007830:	b29b      	uxth	r3, r3
 8007832:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d112      	bne.n	8007860 <find_volume+0x244>
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007840:	061a      	lsls	r2, r3, #24
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007848:	041b      	lsls	r3, r3, #16
 800784a:	4313      	orrs	r3, r2
 800784c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800784e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007852:	0212      	lsls	r2, r2, #8
 8007854:	4313      	orrs	r3, r2
 8007856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007858:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800785c:	4313      	orrs	r3, r2
 800785e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007864:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	7c1a      	ldrb	r2, [r3, #16]
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007878:	2b01      	cmp	r3, #1
 800787a:	d006      	beq.n	800788a <find_volume+0x26e>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007882:	2b02      	cmp	r3, #2
 8007884:	d001      	beq.n	800788a <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 8007886:	230d      	movs	r3, #13
 8007888:	e1ba      	b.n	8007c00 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007890:	461a      	mov	r2, r3
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	fb02 f303 	mul.w	r3, r2, r3
 8007898:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	7b5a      	ldrb	r2, [r3, #13]
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <find_volume+0x2a8>
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80078b4:	461a      	mov	r2, r3
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80078bc:	3b01      	subs	r3, #1
 80078be:	4013      	ands	r3, r2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 80078c4:	230d      	movs	r3, #13
 80078c6:	e19b      	b.n	8007c00 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	7c9b      	ldrb	r3, [r3, #18]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	b21a      	sxth	r2, r3
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	7c5b      	ldrb	r3, [r3, #17]
 80078d4:	b21b      	sxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b21b      	sxth	r3, r3
 80078da:	b29a      	uxth	r2, r3
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80078e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ea:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80078ee:	0952      	lsrs	r2, r2, #5
 80078f0:	b292      	uxth	r2, r2
 80078f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80078f6:	fb02 f201 	mul.w	r2, r2, r1
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 8007902:	230d      	movs	r3, #13
 8007904:	e17c      	b.n	8007c00 <find_volume+0x5e4>
 8007906:	bf00      	nop
 8007908:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	7d1b      	ldrb	r3, [r3, #20]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	b21a      	sxth	r2, r3
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	7cdb      	ldrb	r3, [r3, #19]
 8007918:	b21b      	sxth	r3, r3
 800791a:	4313      	orrs	r3, r2
 800791c:	b21b      	sxth	r3, r3
 800791e:	b29b      	uxth	r3, r3
 8007920:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007924:	2b00      	cmp	r3, #0
 8007926:	d112      	bne.n	800794e <find_volume+0x332>
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800792e:	061a      	lsls	r2, r3, #24
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	4313      	orrs	r3, r2
 800793a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007940:	0212      	lsls	r2, r2, #8
 8007942:	4313      	orrs	r3, r2
 8007944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007946:	f892 2020 	ldrb.w	r2, [r2, #32]
 800794a:	4313      	orrs	r3, r2
 800794c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	7bdb      	ldrb	r3, [r3, #15]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	b21a      	sxth	r2, r3
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	7b9b      	ldrb	r3, [r3, #14]
 800795a:	b21b      	sxth	r3, r3
 800795c:	4313      	orrs	r3, r2
 800795e:	b21b      	sxth	r3, r3
 8007960:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007962:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <find_volume+0x350>
 8007968:	230d      	movs	r3, #13
 800796a:	e149      	b.n	8007c00 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800796c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800796e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007970:	4413      	add	r3, r2
 8007972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007974:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8007978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800797e:	0952      	lsrs	r2, r2, #5
 8007980:	b292      	uxth	r2, r2
 8007982:	fbb1 f2f2 	udiv	r2, r1, r2
 8007986:	b292      	uxth	r2, r2
 8007988:	4413      	add	r3, r2
 800798a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800798c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	429a      	cmp	r2, r3
 8007992:	d201      	bcs.n	8007998 <find_volume+0x37c>
 8007994:	230d      	movs	r3, #13
 8007996:	e133      	b.n	8007c00 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a0:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80079a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <find_volume+0x398>
 80079b0:	230d      	movs	r3, #13
 80079b2:	e125      	b.n	8007c00 <find_volume+0x5e4>
	fmt = FS_FAT12;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d902      	bls.n	80079ca <find_volume+0x3ae>
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d902      	bls.n	80079da <find_volume+0x3be>
 80079d4:	2303      	movs	r3, #3
 80079d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	1c9a      	adds	r2, r3, #2
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079e8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80079ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80079ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f0:	441a      	add	r2, r3
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 80079f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	441a      	add	r2, r3
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8007a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d121      	bne.n	8007a50 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <find_volume+0x3fe>
 8007a16:	230d      	movs	r3, #13
 8007a18:	e0f2      	b.n	8007c00 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a20:	061a      	lsls	r2, r3, #24
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a2e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007a32:	0212      	lsls	r2, r2, #8
 8007a34:	4313      	orrs	r3, r2
 8007a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a38:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a4e:	e025      	b.n	8007a9c <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <find_volume+0x442>
 8007a5a:	230d      	movs	r3, #13
 8007a5c:	e0d0      	b.n	8007c00 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a66:	441a      	add	r2, r3
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d104      	bne.n	8007a80 <find_volume+0x464>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	e00c      	b.n	8007a9a <find_volume+0x47e>
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	085a      	lsrs	r2, r3, #1
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007a9a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aac:	440b      	add	r3, r1
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ab2:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8007ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d201      	bcs.n	8007ac2 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8007abe:	230d      	movs	r3, #13
 8007ac0:	e09e      	b.n	8007c00 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	2280      	movs	r2, #128	; 0x80
 8007adc:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d177      	bne.n	8007bd8 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	b21a      	sxth	r2, r3
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007af8:	b21b      	sxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	b21b      	sxth	r3, r3
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d16a      	bne.n	8007bd8 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b04:	3301      	adds	r3, #1
 8007b06:	4619      	mov	r1, r3
 8007b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b0a:	f7fe f8f2 	bl	8005cf2 <move_window>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d161      	bne.n	8007bd8 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	b21a      	sxth	r2, r3
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	4a35      	ldr	r2, [pc, #212]	; (8007c08 <find_volume+0x5ec>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d14f      	bne.n	8007bd8 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	061a      	lsls	r2, r3, #24
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	789b      	ldrb	r3, [r3, #2]
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	4313      	orrs	r3, r2
 8007b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b48:	7852      	ldrb	r2, [r2, #1]
 8007b4a:	0212      	lsls	r2, r2, #8
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	4a2d      	ldr	r2, [pc, #180]	; (8007c0c <find_volume+0x5f0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d13e      	bne.n	8007bd8 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007b60:	061a      	lsls	r2, r3, #24
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007b68:	041b      	lsls	r3, r3, #16
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b6e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007b72:	0212      	lsls	r2, r2, #8
 8007b74:	4313      	orrs	r3, r2
 8007b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b78:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <find_volume+0x5f4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d129      	bne.n	8007bd8 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007b8a:	061a      	lsls	r2, r3, #24
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	4313      	orrs	r3, r2
 8007b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b98:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007b9c:	0212      	lsls	r2, r2, #8
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ba2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007bb4:	061a      	lsls	r2, r3, #24
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007bbc:	041b      	lsls	r3, r3, #16
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007bc6:	0212      	lsls	r2, r2, #8
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bcc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007bde:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8007be2:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <find_volume+0x5f8>)
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <find_volume+0x5f8>)
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <find_volume+0x5f8>)
 8007bf0:	881a      	ldrh	r2, [r3, #0]
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007bf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bfa:	f7fe f807 	bl	8005c0c <clear_lock>
#endif

	return FR_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3758      	adds	r7, #88	; 0x58
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	ffffaa55 	.word	0xffffaa55
 8007c0c:	41615252 	.word	0x41615252
 8007c10:	61417272 	.word	0x61417272
 8007c14:	200000b0 	.word	0x200000b0

08007c18 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01d      	beq.n	8007c66 <validate+0x4e>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d019      	beq.n	8007c66 <validate+0x4e>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d013      	beq.n	8007c66 <validate+0x4e>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	889b      	ldrh	r3, [r3, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d10b      	bne.n	8007c66 <validate+0x4e>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd fd40 	bl	80056dc <disk_status>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <validate+0x52>
		return FR_INVALID_OBJECT;
 8007c66:	2309      	movs	r3, #9
 8007c68:	e000      	b.n	8007c6c <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007c86:	f107 0310 	add.w	r3, r7, #16
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fc18 	bl	80074c0 <get_ldnumber>
 8007c90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da01      	bge.n	8007c9c <f_mount+0x28>
 8007c98:	230b      	movs	r3, #11
 8007c9a:	e02d      	b.n	8007cf8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c9c:	4a18      	ldr	r2, [pc, #96]	; (8007d00 <f_mount+0x8c>)
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007cac:	69b8      	ldr	r0, [r7, #24]
 8007cae:	f7fd ffad 	bl	8005c0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	490d      	ldr	r1, [pc, #52]	; (8007d00 <f_mount+0x8c>)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <f_mount+0x6a>
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d001      	beq.n	8007ce2 <f_mount+0x6e>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e00a      	b.n	8007cf8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007ce2:	f107 0108 	add.w	r1, r7, #8
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	2200      	movs	r2, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fc95 	bl	800761c <find_volume>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3720      	adds	r7, #32
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	200000ac 	.word	0x200000ac

08007d04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b096      	sub	sp, #88	; 0x58
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <f_open+0x18>
 8007d18:	2309      	movs	r3, #9
 8007d1a:	e16d      	b.n	8007ff8 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	f107 0108 	add.w	r1, r7, #8
 8007d36:	f107 0320 	add.w	r3, r7, #32
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fc6e 	bl	800761c <find_volume>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 8152 	bne.w	8007ff4 <f_open+0x2f0>
		INIT_BUF(dj);
 8007d50:	f107 0314 	add.w	r3, r7, #20
 8007d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d56:	4baa      	ldr	r3, [pc, #680]	; (8008000 <f_open+0x2fc>)
 8007d58:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	f107 0320 	add.w	r3, r7, #32
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fb44 	bl	80073f0 <follow_path>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d70:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007d72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d118      	bne.n	8007dac <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <f_open+0x84>
				res = FR_INVALID_NAME;
 8007d80:	2306      	movs	r3, #6
 8007d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007d86:	e011      	b.n	8007dac <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bf14      	ite	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	2300      	moveq	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f107 0320 	add.w	r3, r7, #32
 8007d9e:	4611      	mov	r1, r2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fd fdb1 	bl	8005908 <chk_lock>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	f003 031c 	and.w	r3, r3, #28
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 809a 	beq.w	8007eec <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 8007db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d019      	beq.n	8007df4 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d10e      	bne.n	8007de6 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007dc8:	f7fd fe08 	bl	80059dc <enq_lock>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d006      	beq.n	8007de0 <f_open+0xdc>
 8007dd2:	f107 0320 	add.w	r3, r7, #32
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff f85e 	bl	8006e98 <dir_register>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	e000      	b.n	8007de2 <f_open+0xde>
 8007de0:	2312      	movs	r3, #18
 8007de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	653b      	str	r3, [r7, #80]	; 0x50
 8007df2:	e012      	b.n	8007e1a <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df6:	330b      	adds	r3, #11
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 0311 	and.w	r3, r3, #17
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <f_open+0x106>
					res = FR_DENIED;
 8007e02:	2307      	movs	r3, #7
 8007e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007e08:	e007      	b.n	8007e1a <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <f_open+0x116>
						res = FR_EXIST;
 8007e14:	2308      	movs	r3, #8
 8007e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 8082 	bne.w	8007f28 <f_open+0x224>
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d07c      	beq.n	8007f28 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 8007e2e:	f7fd fbef 	bl	8005610 <get_fattime>
 8007e32:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e36:	330e      	adds	r3, #14
 8007e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e48:	330f      	adds	r3, #15
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e50:	0c1a      	lsrs	r2, r3, #16
 8007e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e54:	3310      	adds	r3, #16
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5c:	0e1a      	lsrs	r2, r3, #24
 8007e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e60:	3311      	adds	r3, #17
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e68:	330b      	adds	r3, #11
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e70:	331c      	adds	r3, #28
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e78:	331d      	adds	r3, #29
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e80:	331e      	adds	r3, #30
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e88:	331f      	adds	r3, #31
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fd66 	bl	8006964 <ld_clust>
 8007e98:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007e9e:	f7fe fd8e 	bl	80069be <st_clust>
				dj.fs->wflag = 1;
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03b      	beq.n	8007f28 <f_open+0x224>
					dw = dj.fs->winsect;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe fa43 	bl	8006348 <remove_chain>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 8007ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d12b      	bne.n	8007f28 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed4:	3a01      	subs	r2, #1
 8007ed6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd ff07 	bl	8005cf2 <move_window>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007eea:	e01d      	b.n	8007f28 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d119      	bne.n	8007f28 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef6:	330b      	adds	r3, #11
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <f_open+0x206>
					res = FR_NO_FILE;
 8007f02:	2304      	movs	r3, #4
 8007f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007f08:	e00e      	b.n	8007f28 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <f_open+0x224>
 8007f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f16:	330b      	adds	r3, #11
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <f_open+0x224>
						res = FR_DENIED;
 8007f22:	2307      	movs	r3, #7
 8007f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8007f28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d129      	bne.n	8007f84 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <f_open+0x23e>
				mode |= FA__WRITTEN;
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	f043 0320 	orr.w	r3, r3, #32
 8007f40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f50:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bf14      	ite	ne
 8007f5c:	2301      	movne	r3, #1
 8007f5e:	2300      	moveq	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	f107 0320 	add.w	r3, r7, #32
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd fd5a 	bl	8005a24 <inc_lock>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <f_open+0x280>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d133      	bne.n	8007ff4 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	79fa      	ldrb	r2, [r7, #7]
 8007f90:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe fce1 	bl	8006964 <ld_clust>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007faa:	331f      	adds	r3, #31
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	061a      	lsls	r2, r3, #24
 8007fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb2:	331e      	adds	r3, #30
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fbc:	321d      	adds	r2, #29
 8007fbe:	7812      	ldrb	r2, [r2, #0]
 8007fc0:	0212      	lsls	r2, r2, #8
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fc6:	321c      	adds	r2, #28
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3758      	adds	r7, #88	; 0x58
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200000cc 	.word	0x200000cc

08008004 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08c      	sub	sp, #48	; 0x30
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff fdfb 	bl	8007c18 <validate>
 8008022:	4603      	mov	r3, r0
 8008024:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008026:	7ffb      	ldrb	r3, [r7, #31]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <f_read+0x2c>
 800802c:	7ffb      	ldrb	r3, [r7, #31]
 800802e:	e13a      	b.n	80082a6 <f_read+0x2a2>
	if (fp->err)								/* Check error */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	79db      	ldrb	r3, [r3, #7]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	79db      	ldrb	r3, [r3, #7]
 800803c:	e133      	b.n	80082a6 <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	799b      	ldrb	r3, [r3, #6]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800804a:	2307      	movs	r3, #7
 800804c:	e12b      	b.n	80082a6 <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	429a      	cmp	r2, r3
 8008060:	f240 811c 	bls.w	800829c <f_read+0x298>
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008068:	e118      	b.n	800829c <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008076:	fbb3 f1f2 	udiv	r1, r3, r2
 800807a:	fb02 f201 	mul.w	r2, r2, r1
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 80bc 	bne.w	80081fe <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008092:	fbb3 f3f2 	udiv	r3, r3, r2
 8008096:	b2da      	uxtb	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	4013      	ands	r3, r2
 80080a6:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d130      	bne.n	8008110 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080bc:	e014      	b.n	80080e8 <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4619      	mov	r1, r3
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7fe fa32 	bl	8006536 <clmt_clust>
 80080d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080d4:	e008      	b.n	80080e8 <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fd ff03 	bl	8005eec <get_fat>
 80080e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d804      	bhi.n	80080f8 <f_read+0xf4>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2202      	movs	r2, #2
 80080f2:	71da      	strb	r2, [r3, #7]
 80080f4:	2302      	movs	r3, #2
 80080f6:	e0d6      	b.n	80082a6 <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d104      	bne.n	800810a <f_read+0x106>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	71da      	strb	r2, [r3, #7]
 8008106:	2301      	movs	r3, #1
 8008108:	e0cd      	b.n	80082a6 <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800810e:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fd fec5 	bl	8005eaa <clust2sect>
 8008120:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <f_read+0x12e>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2202      	movs	r2, #2
 800812c:	71da      	strb	r2, [r3, #7]
 800812e:	2302      	movs	r3, #2
 8008130:	e0b9      	b.n	80082a6 <f_read+0x2a2>
			sect += csect;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4413      	add	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	fbb3 f3f2 	udiv	r3, r3, r2
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	2b00      	cmp	r3, #0
 8008150:	d052      	beq.n	80081f8 <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008152:	7dfa      	ldrb	r2, [r7, #23]
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	4413      	add	r3, r2
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8008160:	4293      	cmp	r3, r2
 8008162:	d907      	bls.n	8008174 <f_read+0x170>
					cc = fp->fs->csize - csect;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800816c:	461a      	mov	r2, r3
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	6a39      	ldr	r1, [r7, #32]
 8008182:	f7fd faeb 	bl	800575c <disk_read>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	71da      	strb	r2, [r3, #7]
 8008192:	2301      	movs	r3, #1
 8008194:	e087      	b.n	80082a6 <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d020      	beq.n	80081e4 <f_read+0x1e0>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d917      	bls.n	80081e4 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	6a3a      	ldr	r2, [r7, #32]
 80081ce:	18d0      	adds	r0, r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4619      	mov	r1, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80081de:	461a      	mov	r2, r3
 80081e0:	f7fd fb1a 	bl	8005818 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80081ec:	461a      	mov	r2, r3
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	fb02 f303 	mul.w	r3, r2, r3
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80081f6:	e03d      	b.n	8008274 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008206:	4618      	mov	r0, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008214:	fbb3 f1f2 	udiv	r1, r3, r2
 8008218:	fb02 f201 	mul.w	r2, r2, r1
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	1ac3      	subs	r3, r0, r3
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8008222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d901      	bls.n	800822e <f_read+0x22a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f7fd fd5a 	bl	8005cf2 <move_window>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	71da      	strb	r2, [r3, #7]
 800824a:	2301      	movs	r3, #1
 800824c:	e02b      	b.n	80082a6 <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800825e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008262:	fb02 f200 	mul.w	r2, r2, r0
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	440b      	add	r3, r1
 800826a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826c:	4619      	mov	r1, r3
 800826e:	6a38      	ldr	r0, [r7, #32]
 8008270:	f7fd fad2 	bl	8005818 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008274:	6a3a      	ldr	r2, [r7, #32]
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	4413      	add	r3, r2
 800827a:	623b      	str	r3, [r7, #32]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	441a      	add	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	441a      	add	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f47f aee3 	bne.w	800806a <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3730      	adds	r7, #48	; 0x30
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b08a      	sub	sp, #40	; 0x28
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff fca6 	bl	8007c18 <validate>
 80082cc:	4603      	mov	r3, r0
 80082ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <f_write+0x2c>
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	e191      	b.n	80085fe <f_write+0x350>
	if (fp->err)							/* Check error */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	79db      	ldrb	r3, [r3, #7]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	79db      	ldrb	r3, [r3, #7]
 80082e6:	e18a      	b.n	80085fe <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	799b      	ldrb	r3, [r3, #6]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80082f4:	2307      	movs	r3, #7
 80082f6:	e182      	b.n	80085fe <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	441a      	add	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	429a      	cmp	r2, r3
 8008306:	f080 8162 	bcs.w	80085ce <f_write+0x320>
 800830a:	2300      	movs	r3, #0
 800830c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800830e:	e15e      	b.n	80085ce <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800831c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008320:	fb02 f201 	mul.w	r2, r2, r1
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 80fd 	bne.w	8008526 <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008338:	fbb3 f3f2 	udiv	r3, r3, r2
 800833c:	b2da      	uxtb	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008346:	3b01      	subs	r3, #1
 8008348:	b2db      	uxtb	r3, r3
 800834a:	4013      	ands	r3, r2
 800834c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800834e:	7dbb      	ldrb	r3, [r7, #22]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d145      	bne.n	80083e0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11c      	bne.n	80083a2 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2100      	movs	r1, #0
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe f844 	bl	80063fc <create_chain>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24
 8008376:	e014      	b.n	80083a2 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d007      	beq.n	8008390 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	4619      	mov	r1, r3
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f7fe f8d5 	bl	8006536 <clmt_clust>
 800838c:	6278      	str	r0, [r7, #36]	; 0x24
 800838e:	e008      	b.n	80083a2 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	4619      	mov	r1, r3
 800839a:	4610      	mov	r0, r2
 800839c:	f7fe f82e 	bl	80063fc <create_chain>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8117 	beq.w	80085d8 <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d104      	bne.n	80083ba <f_write+0x10c>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2202      	movs	r2, #2
 80083b4:	71da      	strb	r2, [r3, #7]
 80083b6:	2302      	movs	r3, #2
 80083b8:	e121      	b.n	80085fe <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c0:	d104      	bne.n	80083cc <f_write+0x11e>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	71da      	strb	r2, [r3, #7]
 80083c8:	2301      	movs	r3, #1
 80083ca:	e118      	b.n	80085fe <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d0:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <f_write+0x132>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083de:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d10c      	bne.n	800840a <f_write+0x15c>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd fc33 	bl	8005c60 <sync_window>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	71da      	strb	r2, [r3, #7]
 8008406:	2301      	movs	r3, #1
 8008408:	e0f9      	b.n	80085fe <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7fd fd48 	bl	8005eaa <clust2sect>
 800841a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <f_write+0x17e>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2202      	movs	r2, #2
 8008426:	71da      	strb	r2, [r3, #7]
 8008428:	2302      	movs	r3, #2
 800842a:	e0e8      	b.n	80085fe <f_write+0x350>
			sect += csect;
 800842c:	7dbb      	ldrb	r3, [r7, #22]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4413      	add	r3, r2
 8008432:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800843c:	461a      	mov	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	fbb3 f3f2 	udiv	r3, r3, r2
 8008444:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d051      	beq.n	80084f0 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800844c:	7dba      	ldrb	r2, [r7, #22]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	6812      	ldr	r2, [r2, #0]
 8008456:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800845a:	4293      	cmp	r3, r2
 800845c:	d907      	bls.n	800846e <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008466:	461a      	mov	r2, r3
 8008468:	7dbb      	ldrb	r3, [r7, #22]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	69b9      	ldr	r1, [r7, #24]
 800847c:	f7fd f98e 	bl	800579c <disk_write>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	71da      	strb	r2, [r3, #7]
 800848c:	2301      	movs	r3, #1
 800848e:	e0b6      	b.n	80085fe <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d91c      	bls.n	80084dc <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	6812      	ldr	r2, [r2, #0]
 80084b8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	18d1      	adds	r1, r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80084cc:	461a      	mov	r2, r3
 80084ce:	f7fd f9a3 	bl	8005818 <mem_cpy>
					fp->fs->wflag = 0;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80084e4:	461a      	mov	r2, r3
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	fb02 f303 	mul.w	r3, r2, r3
 80084ec:	623b      	str	r3, [r7, #32]
				continue;
 80084ee:	e05a      	b.n	80085a6 <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d311      	bcc.n	8008520 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4618      	mov	r0, r3
 8008502:	f7fd fbad 	bl	8005c60 <sync_window>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <f_write+0x268>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	71da      	strb	r2, [r3, #7]
 8008512:	2301      	movs	r3, #1
 8008514:	e073      	b.n	80085fe <f_write+0x350>
				fp->fs->winsect = sect;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800852e:	4618      	mov	r0, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800853c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008540:	fb02 f201 	mul.w	r2, r2, r1
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	1ac3      	subs	r3, r0, r3
 8008548:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	429a      	cmp	r2, r3
 8008550:	d901      	bls.n	8008556 <f_write+0x2a8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f7fd fbc6 	bl	8005cf2 <move_window>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	71da      	strb	r2, [r3, #7]
 8008572:	2301      	movs	r3, #1
 8008574:	e043      	b.n	80085fe <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6819      	ldr	r1, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008586:	fbb3 f0f2 	udiv	r0, r3, r2
 800858a:	fb02 f200 	mul.w	r2, r2, r0
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	440b      	add	r3, r1
 8008592:	6a3a      	ldr	r2, [r7, #32]
 8008594:	69b9      	ldr	r1, [r7, #24]
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd f93e 	bl	8005818 <mem_cpy>
		fp->fs->wflag = 1;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	4413      	add	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	441a      	add	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	609a      	str	r2, [r3, #8]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	441a      	add	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f47f ae9d 	bne.w	8008310 <f_write+0x62>
 80085d6:	e000      	b.n	80085da <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085d8:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d903      	bls.n	80085ee <f_write+0x340>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	799b      	ldrb	r3, [r3, #6]
 80085f2:	f043 0320 	orr.w	r3, r3, #32
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3728      	adds	r7, #40	; 0x28
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fb02 	bl	8007c18 <validate>
 8008614:	4603      	mov	r3, r0
 8008616:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d178      	bne.n	8008710 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	799b      	ldrb	r3, [r3, #6]
 8008622:	f003 0320 	and.w	r3, r3, #32
 8008626:	2b00      	cmp	r3, #0
 8008628:	d072      	beq.n	8008710 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f7fd fb5c 	bl	8005cf2 <move_window>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d165      	bne.n	8008710 <f_sync+0x10a>
				dir = fp->dir_ptr;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	330b      	adds	r3, #11
 800864e:	781a      	ldrb	r2, [r3, #0]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	330b      	adds	r3, #11
 8008654:	f042 0220 	orr.w	r2, r2, #32
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	331c      	adds	r3, #28
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	b29b      	uxth	r3, r3
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	b29a      	uxth	r2, r3
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	331d      	adds	r3, #29
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	0c1a      	lsrs	r2, r3, #16
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	331e      	adds	r3, #30
 8008684:	b2d2      	uxtb	r2, r2
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	0e1a      	lsrs	r2, r3, #24
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	331f      	adds	r3, #31
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	4619      	mov	r1, r3
 800869c:	6938      	ldr	r0, [r7, #16]
 800869e:	f7fe f98e 	bl	80069be <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80086a2:	f7fc ffb5 	bl	8005610 <get_fattime>
 80086a6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	3316      	adds	r3, #22
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3317      	adds	r3, #23
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	0c1a      	lsrs	r2, r3, #16
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3318      	adds	r3, #24
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	0e1a      	lsrs	r2, r3, #24
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3319      	adds	r3, #25
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3312      	adds	r3, #18
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	3313      	adds	r3, #19
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	799b      	ldrb	r3, [r3, #6]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd fb21 	bl	8005d4e <sync_fs>
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008710:	7dfb      	ldrb	r3, [r7, #23]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff ff6f 	bl	8008606 <f_sync>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d114      	bne.n	800875c <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fa70 	bl	8007c18 <validate>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10c      	bne.n	800875c <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008746:	4618      	mov	r0, r3
 8008748:	f7fd fa1c 	bl	8005b84 <dec_lock>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d102      	bne.n	800875c <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008776:	2301      	movs	r3, #1
 8008778:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800877e:	4b1e      	ldr	r3, [pc, #120]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 8008780:	7a5b      	ldrb	r3, [r3, #9]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d831      	bhi.n	80087ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008788:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 800878a:	7a5b      	ldrb	r3, [r3, #9]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 8008792:	2100      	movs	r1, #0
 8008794:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008796:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 8008798:	7a5b      	ldrb	r3, [r3, #9]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 80087a8:	7a5b      	ldrb	r3, [r3, #9]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 80087b0:	4413      	add	r3, r2
 80087b2:	79fa      	ldrb	r2, [r7, #7]
 80087b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 80087b8:	7a5b      	ldrb	r3, [r3, #9]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	1c5a      	adds	r2, r3, #1
 80087be:	b2d1      	uxtb	r1, r2
 80087c0:	4a0d      	ldr	r2, [pc, #52]	; (80087f8 <FATFS_LinkDriverEx+0x90>)
 80087c2:	7251      	strb	r1, [r2, #9]
 80087c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80087c6:	7dbb      	ldrb	r3, [r7, #22]
 80087c8:	3330      	adds	r3, #48	; 0x30
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3301      	adds	r3, #1
 80087d4:	223a      	movs	r2, #58	; 0x3a
 80087d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3302      	adds	r3, #2
 80087dc:	222f      	movs	r2, #47	; 0x2f
 80087de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3303      	adds	r3, #3
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr
 80087f8:	200002cc 	.word	0x200002cc

080087fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008806:	2200      	movs	r2, #0
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ffac 	bl	8008768 <FATFS_LinkDriverEx>
 8008810:	4603      	mov	r3, r0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	2b7f      	cmp	r3, #127	; 0x7f
 800882c:	d802      	bhi.n	8008834 <ff_convert+0x18>
		c = chr;
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	81fb      	strh	r3, [r7, #14]
 8008832:	e025      	b.n	8008880 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	2bff      	cmp	r3, #255	; 0xff
 800883e:	d805      	bhi.n	800884c <ff_convert+0x30>
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	3b80      	subs	r3, #128	; 0x80
 8008844:	4a11      	ldr	r2, [pc, #68]	; (800888c <ff_convert+0x70>)
 8008846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884a:	e000      	b.n	800884e <ff_convert+0x32>
 800884c:	2300      	movs	r3, #0
 800884e:	81fb      	strh	r3, [r7, #14]
 8008850:	e016      	b.n	8008880 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008852:	2300      	movs	r3, #0
 8008854:	81fb      	strh	r3, [r7, #14]
 8008856:	e009      	b.n	800886c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008858:	89fb      	ldrh	r3, [r7, #14]
 800885a:	4a0c      	ldr	r2, [pc, #48]	; (800888c <ff_convert+0x70>)
 800885c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008860:	88fa      	ldrh	r2, [r7, #6]
 8008862:	429a      	cmp	r2, r3
 8008864:	d006      	beq.n	8008874 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008866:	89fb      	ldrh	r3, [r7, #14]
 8008868:	3301      	adds	r3, #1
 800886a:	81fb      	strh	r3, [r7, #14]
 800886c:	89fb      	ldrh	r3, [r7, #14]
 800886e:	2b7f      	cmp	r3, #127	; 0x7f
 8008870:	d9f2      	bls.n	8008858 <ff_convert+0x3c>
 8008872:	e000      	b.n	8008876 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008874:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	3380      	adds	r3, #128	; 0x80
 800887a:	b29b      	uxth	r3, r3
 800887c:	b2db      	uxtb	r3, r3
 800887e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008880:	89fb      	ldrh	r3, [r7, #14]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr
 800888c:	08009338 	.word	0x08009338

08008890 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e002      	b.n	80088a6 <ff_wtoupper+0x16>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <ff_wtoupper+0x54>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d006      	beq.n	80088c0 <ff_wtoupper+0x30>
 80088b2:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <ff_wtoupper+0x54>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d1ef      	bne.n	80088a0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80088c0:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <ff_wtoupper+0x54>)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d004      	beq.n	80088d6 <ff_wtoupper+0x46>
 80088cc:	4a06      	ldr	r2, [pc, #24]	; (80088e8 <ff_wtoupper+0x58>)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d4:	e000      	b.n	80088d8 <ff_wtoupper+0x48>
 80088d6:	88fb      	ldrh	r3, [r7, #6]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	08009438 	.word	0x08009438
 80088e8:	08009618 	.word	0x08009618

080088ec <__errno>:
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <__errno+0x8>)
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000024 	.word	0x20000024

080088f8 <__libc_init_array>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	2600      	movs	r6, #0
 80088fc:	4d0c      	ldr	r5, [pc, #48]	; (8008930 <__libc_init_array+0x38>)
 80088fe:	4c0d      	ldr	r4, [pc, #52]	; (8008934 <__libc_init_array+0x3c>)
 8008900:	1b64      	subs	r4, r4, r5
 8008902:	10a4      	asrs	r4, r4, #2
 8008904:	42a6      	cmp	r6, r4
 8008906:	d109      	bne.n	800891c <__libc_init_array+0x24>
 8008908:	f000 fc5c 	bl	80091c4 <_init>
 800890c:	2600      	movs	r6, #0
 800890e:	4d0a      	ldr	r5, [pc, #40]	; (8008938 <__libc_init_array+0x40>)
 8008910:	4c0a      	ldr	r4, [pc, #40]	; (800893c <__libc_init_array+0x44>)
 8008912:	1b64      	subs	r4, r4, r5
 8008914:	10a4      	asrs	r4, r4, #2
 8008916:	42a6      	cmp	r6, r4
 8008918:	d105      	bne.n	8008926 <__libc_init_array+0x2e>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008920:	4798      	blx	r3
 8008922:	3601      	adds	r6, #1
 8008924:	e7ee      	b.n	8008904 <__libc_init_array+0xc>
 8008926:	f855 3b04 	ldr.w	r3, [r5], #4
 800892a:	4798      	blx	r3
 800892c:	3601      	adds	r6, #1
 800892e:	e7f2      	b.n	8008916 <__libc_init_array+0x1e>
 8008930:	0800982c 	.word	0x0800982c
 8008934:	0800982c 	.word	0x0800982c
 8008938:	0800982c 	.word	0x0800982c
 800893c:	08009830 	.word	0x08009830

08008940 <memset>:
 8008940:	4603      	mov	r3, r0
 8008942:	4402      	add	r2, r0
 8008944:	4293      	cmp	r3, r2
 8008946:	d100      	bne.n	800894a <memset+0xa>
 8008948:	4770      	bx	lr
 800894a:	f803 1b01 	strb.w	r1, [r3], #1
 800894e:	e7f9      	b.n	8008944 <memset+0x4>

08008950 <siprintf>:
 8008950:	b40e      	push	{r1, r2, r3}
 8008952:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008956:	b500      	push	{lr}
 8008958:	b09c      	sub	sp, #112	; 0x70
 800895a:	ab1d      	add	r3, sp, #116	; 0x74
 800895c:	9002      	str	r0, [sp, #8]
 800895e:	9006      	str	r0, [sp, #24]
 8008960:	9107      	str	r1, [sp, #28]
 8008962:	9104      	str	r1, [sp, #16]
 8008964:	4808      	ldr	r0, [pc, #32]	; (8008988 <siprintf+0x38>)
 8008966:	4909      	ldr	r1, [pc, #36]	; (800898c <siprintf+0x3c>)
 8008968:	f853 2b04 	ldr.w	r2, [r3], #4
 800896c:	9105      	str	r1, [sp, #20]
 800896e:	6800      	ldr	r0, [r0, #0]
 8008970:	a902      	add	r1, sp, #8
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	f000 f868 	bl	8008a48 <_svfiprintf_r>
 8008978:	2200      	movs	r2, #0
 800897a:	9b02      	ldr	r3, [sp, #8]
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	b01c      	add	sp, #112	; 0x70
 8008980:	f85d eb04 	ldr.w	lr, [sp], #4
 8008984:	b003      	add	sp, #12
 8008986:	4770      	bx	lr
 8008988:	20000024 	.word	0x20000024
 800898c:	ffff0208 	.word	0xffff0208

08008990 <__ssputs_r>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	688e      	ldr	r6, [r1, #8]
 8008996:	4682      	mov	sl, r0
 8008998:	429e      	cmp	r6, r3
 800899a:	460c      	mov	r4, r1
 800899c:	4690      	mov	r8, r2
 800899e:	461f      	mov	r7, r3
 80089a0:	d838      	bhi.n	8008a14 <__ssputs_r+0x84>
 80089a2:	898a      	ldrh	r2, [r1, #12]
 80089a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a8:	d032      	beq.n	8008a10 <__ssputs_r+0x80>
 80089aa:	6825      	ldr	r5, [r4, #0]
 80089ac:	6909      	ldr	r1, [r1, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	eba5 0901 	sub.w	r9, r5, r1
 80089b4:	6965      	ldr	r5, [r4, #20]
 80089b6:	444b      	add	r3, r9
 80089b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089c0:	106d      	asrs	r5, r5, #1
 80089c2:	429d      	cmp	r5, r3
 80089c4:	bf38      	it	cc
 80089c6:	461d      	movcc	r5, r3
 80089c8:	0553      	lsls	r3, r2, #21
 80089ca:	d531      	bpl.n	8008a30 <__ssputs_r+0xa0>
 80089cc:	4629      	mov	r1, r5
 80089ce:	f000 fb53 	bl	8009078 <_malloc_r>
 80089d2:	4606      	mov	r6, r0
 80089d4:	b950      	cbnz	r0, 80089ec <__ssputs_r+0x5c>
 80089d6:	230c      	movs	r3, #12
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	f8ca 3000 	str.w	r3, [sl]
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ec:	464a      	mov	r2, r9
 80089ee:	6921      	ldr	r1, [r4, #16]
 80089f0:	f000 face 	bl	8008f90 <memcpy>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	6126      	str	r6, [r4, #16]
 8008a02:	444e      	add	r6, r9
 8008a04:	6026      	str	r6, [r4, #0]
 8008a06:	463e      	mov	r6, r7
 8008a08:	6165      	str	r5, [r4, #20]
 8008a0a:	eba5 0509 	sub.w	r5, r5, r9
 8008a0e:	60a5      	str	r5, [r4, #8]
 8008a10:	42be      	cmp	r6, r7
 8008a12:	d900      	bls.n	8008a16 <__ssputs_r+0x86>
 8008a14:	463e      	mov	r6, r7
 8008a16:	4632      	mov	r2, r6
 8008a18:	4641      	mov	r1, r8
 8008a1a:	6820      	ldr	r0, [r4, #0]
 8008a1c:	f000 fac6 	bl	8008fac <memmove>
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	4432      	add	r2, r6
 8008a28:	2000      	movs	r0, #0
 8008a2a:	60a3      	str	r3, [r4, #8]
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	e7db      	b.n	80089e8 <__ssputs_r+0x58>
 8008a30:	462a      	mov	r2, r5
 8008a32:	f000 fb7b 	bl	800912c <_realloc_r>
 8008a36:	4606      	mov	r6, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1e1      	bne.n	8008a00 <__ssputs_r+0x70>
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	6921      	ldr	r1, [r4, #16]
 8008a40:	f000 face 	bl	8008fe0 <_free_r>
 8008a44:	e7c7      	b.n	80089d6 <__ssputs_r+0x46>
	...

08008a48 <_svfiprintf_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	4698      	mov	r8, r3
 8008a4e:	898b      	ldrh	r3, [r1, #12]
 8008a50:	4607      	mov	r7, r0
 8008a52:	061b      	lsls	r3, r3, #24
 8008a54:	460d      	mov	r5, r1
 8008a56:	4614      	mov	r4, r2
 8008a58:	b09d      	sub	sp, #116	; 0x74
 8008a5a:	d50e      	bpl.n	8008a7a <_svfiprintf_r+0x32>
 8008a5c:	690b      	ldr	r3, [r1, #16]
 8008a5e:	b963      	cbnz	r3, 8008a7a <_svfiprintf_r+0x32>
 8008a60:	2140      	movs	r1, #64	; 0x40
 8008a62:	f000 fb09 	bl	8009078 <_malloc_r>
 8008a66:	6028      	str	r0, [r5, #0]
 8008a68:	6128      	str	r0, [r5, #16]
 8008a6a:	b920      	cbnz	r0, 8008a76 <_svfiprintf_r+0x2e>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e0d1      	b.n	8008c1a <_svfiprintf_r+0x1d2>
 8008a76:	2340      	movs	r3, #64	; 0x40
 8008a78:	616b      	str	r3, [r5, #20]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7e:	2320      	movs	r3, #32
 8008a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a84:	2330      	movs	r3, #48	; 0x30
 8008a86:	f04f 0901 	mov.w	r9, #1
 8008a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c34 <_svfiprintf_r+0x1ec>
 8008a92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a96:	4623      	mov	r3, r4
 8008a98:	469a      	mov	sl, r3
 8008a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9e:	b10a      	cbz	r2, 8008aa4 <_svfiprintf_r+0x5c>
 8008aa0:	2a25      	cmp	r2, #37	; 0x25
 8008aa2:	d1f9      	bne.n	8008a98 <_svfiprintf_r+0x50>
 8008aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa8:	d00b      	beq.n	8008ac2 <_svfiprintf_r+0x7a>
 8008aaa:	465b      	mov	r3, fp
 8008aac:	4622      	mov	r2, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff ff6d 	bl	8008990 <__ssputs_r>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f000 80aa 	beq.w	8008c10 <_svfiprintf_r+0x1c8>
 8008abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008abe:	445a      	add	r2, fp
 8008ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 80a2 	beq.w	8008c10 <_svfiprintf_r+0x1c8>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad6:	f10a 0a01 	add.w	sl, sl, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae4:	4654      	mov	r4, sl
 8008ae6:	2205      	movs	r2, #5
 8008ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aec:	4851      	ldr	r0, [pc, #324]	; (8008c34 <_svfiprintf_r+0x1ec>)
 8008aee:	f000 fa41 	bl	8008f74 <memchr>
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	b9d8      	cbnz	r0, 8008b2e <_svfiprintf_r+0xe6>
 8008af6:	06d0      	lsls	r0, r2, #27
 8008af8:	bf44      	itt	mi
 8008afa:	2320      	movmi	r3, #32
 8008afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b00:	0711      	lsls	r1, r2, #28
 8008b02:	bf44      	itt	mi
 8008b04:	232b      	movmi	r3, #43	; 0x2b
 8008b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b10:	d015      	beq.n	8008b3e <_svfiprintf_r+0xf6>
 8008b12:	4654      	mov	r4, sl
 8008b14:	2000      	movs	r0, #0
 8008b16:	f04f 0c0a 	mov.w	ip, #10
 8008b1a:	9a07      	ldr	r2, [sp, #28]
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b22:	3b30      	subs	r3, #48	; 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d94e      	bls.n	8008bc6 <_svfiprintf_r+0x17e>
 8008b28:	b1b0      	cbz	r0, 8008b58 <_svfiprintf_r+0x110>
 8008b2a:	9207      	str	r2, [sp, #28]
 8008b2c:	e014      	b.n	8008b58 <_svfiprintf_r+0x110>
 8008b2e:	eba0 0308 	sub.w	r3, r0, r8
 8008b32:	fa09 f303 	lsl.w	r3, r9, r3
 8008b36:	4313      	orrs	r3, r2
 8008b38:	46a2      	mov	sl, r4
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	e7d2      	b.n	8008ae4 <_svfiprintf_r+0x9c>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9103      	str	r1, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbb      	ittet	lt
 8008b4a:	425b      	neglt	r3, r3
 8008b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b50:	9307      	strge	r3, [sp, #28]
 8008b52:	9307      	strlt	r3, [sp, #28]
 8008b54:	bfb8      	it	lt
 8008b56:	9204      	strlt	r2, [sp, #16]
 8008b58:	7823      	ldrb	r3, [r4, #0]
 8008b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5c:	d10c      	bne.n	8008b78 <_svfiprintf_r+0x130>
 8008b5e:	7863      	ldrb	r3, [r4, #1]
 8008b60:	2b2a      	cmp	r3, #42	; 0x2a
 8008b62:	d135      	bne.n	8008bd0 <_svfiprintf_r+0x188>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	3402      	adds	r4, #2
 8008b68:	1d1a      	adds	r2, r3, #4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	9203      	str	r2, [sp, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	bfb8      	it	lt
 8008b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b76:	9305      	str	r3, [sp, #20]
 8008b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c44 <_svfiprintf_r+0x1fc>
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	4650      	mov	r0, sl
 8008b80:	7821      	ldrb	r1, [r4, #0]
 8008b82:	f000 f9f7 	bl	8008f74 <memchr>
 8008b86:	b140      	cbz	r0, 8008b9a <_svfiprintf_r+0x152>
 8008b88:	2340      	movs	r3, #64	; 0x40
 8008b8a:	eba0 000a 	sub.w	r0, r0, sl
 8008b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	3401      	adds	r4, #1
 8008b96:	4303      	orrs	r3, r0
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9e:	2206      	movs	r2, #6
 8008ba0:	4825      	ldr	r0, [pc, #148]	; (8008c38 <_svfiprintf_r+0x1f0>)
 8008ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba6:	f000 f9e5 	bl	8008f74 <memchr>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d038      	beq.n	8008c20 <_svfiprintf_r+0x1d8>
 8008bae:	4b23      	ldr	r3, [pc, #140]	; (8008c3c <_svfiprintf_r+0x1f4>)
 8008bb0:	bb1b      	cbnz	r3, 8008bfa <_svfiprintf_r+0x1b2>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	3307      	adds	r3, #7
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	3308      	adds	r3, #8
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc0:	4433      	add	r3, r6
 8008bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc4:	e767      	b.n	8008a96 <_svfiprintf_r+0x4e>
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	2001      	movs	r0, #1
 8008bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bce:	e7a5      	b.n	8008b1c <_svfiprintf_r+0xd4>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f04f 0c0a 	mov.w	ip, #10
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	3401      	adds	r4, #1
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be2:	3a30      	subs	r2, #48	; 0x30
 8008be4:	2a09      	cmp	r2, #9
 8008be6:	d903      	bls.n	8008bf0 <_svfiprintf_r+0x1a8>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0c5      	beq.n	8008b78 <_svfiprintf_r+0x130>
 8008bec:	9105      	str	r1, [sp, #20]
 8008bee:	e7c3      	b.n	8008b78 <_svfiprintf_r+0x130>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf8:	e7f0      	b.n	8008bdc <_svfiprintf_r+0x194>
 8008bfa:	ab03      	add	r3, sp, #12
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <_svfiprintf_r+0x1f8>)
 8008c04:	a904      	add	r1, sp, #16
 8008c06:	f3af 8000 	nop.w
 8008c0a:	1c42      	adds	r2, r0, #1
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	d1d6      	bne.n	8008bbe <_svfiprintf_r+0x176>
 8008c10:	89ab      	ldrh	r3, [r5, #12]
 8008c12:	065b      	lsls	r3, r3, #25
 8008c14:	f53f af2c 	bmi.w	8008a70 <_svfiprintf_r+0x28>
 8008c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1a:	b01d      	add	sp, #116	; 0x74
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462a      	mov	r2, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <_svfiprintf_r+0x1f8>)
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	f000 f87c 	bl	8008d28 <_printf_i>
 8008c30:	e7eb      	b.n	8008c0a <_svfiprintf_r+0x1c2>
 8008c32:	bf00      	nop
 8008c34:	080097f8 	.word	0x080097f8
 8008c38:	08009802 	.word	0x08009802
 8008c3c:	00000000 	.word	0x00000000
 8008c40:	08008991 	.word	0x08008991
 8008c44:	080097fe 	.word	0x080097fe

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4699      	mov	r9, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	4607      	mov	r7, r0
 8008c56:	4293      	cmp	r3, r2
 8008c58:	bfb8      	it	lt
 8008c5a:	4613      	movlt	r3, r2
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c62:	460c      	mov	r4, r1
 8008c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc28      	bgt.n	8008ce2 <_printf_common+0x9a>
 8008c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c94:	1e13      	subs	r3, r2, #0
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42d      	bmi.n	8008cfc <_printf_common+0xb4>
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d020      	beq.n	8008cf0 <_printf_common+0xa8>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	68e5      	ldr	r5, [r4, #12]
 8008cb2:	f003 0306 	and.w	r3, r3, #6
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	bf18      	it	ne
 8008cba:	2500      	movne	r5, #0
 8008cbc:	6832      	ldr	r2, [r6, #0]
 8008cbe:	f04f 0600 	mov.w	r6, #0
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	bf08      	it	eq
 8008cc6:	1aad      	subeq	r5, r5, r2
 8008cc8:	6922      	ldr	r2, [r4, #16]
 8008cca:	bf08      	it	eq
 8008ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	bfc4      	itt	gt
 8008cd4:	1a9b      	subgt	r3, r3, r2
 8008cd6:	18ed      	addgt	r5, r5, r3
 8008cd8:	341a      	adds	r4, #26
 8008cda:	42b5      	cmp	r5, r6
 8008cdc:	d11a      	bne.n	8008d14 <_printf_common+0xcc>
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e008      	b.n	8008cf4 <_printf_common+0xac>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	4652      	mov	r2, sl
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	4638      	mov	r0, r7
 8008cea:	47c0      	blx	r8
 8008cec:	3001      	adds	r0, #1
 8008cee:	d103      	bne.n	8008cf8 <_printf_common+0xb0>
 8008cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	e7c4      	b.n	8008c86 <_printf_common+0x3e>
 8008cfc:	2030      	movs	r0, #48	; 0x30
 8008cfe:	18e1      	adds	r1, r4, r3
 8008d00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d0a:	4422      	add	r2, r4
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d12:	e7c5      	b.n	8008ca0 <_printf_common+0x58>
 8008d14:	2301      	movs	r3, #1
 8008d16:	4622      	mov	r2, r4
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	47c0      	blx	r8
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d0e6      	beq.n	8008cf0 <_printf_common+0xa8>
 8008d22:	3601      	adds	r6, #1
 8008d24:	e7d9      	b.n	8008cda <_printf_common+0x92>
	...

08008d28 <_printf_i>:
 8008d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	7e27      	ldrb	r7, [r4, #24]
 8008d30:	4691      	mov	r9, r2
 8008d32:	2f78      	cmp	r7, #120	; 0x78
 8008d34:	4680      	mov	r8, r0
 8008d36:	469a      	mov	sl, r3
 8008d38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d3e:	d807      	bhi.n	8008d50 <_printf_i+0x28>
 8008d40:	2f62      	cmp	r7, #98	; 0x62
 8008d42:	d80a      	bhi.n	8008d5a <_printf_i+0x32>
 8008d44:	2f00      	cmp	r7, #0
 8008d46:	f000 80d9 	beq.w	8008efc <_printf_i+0x1d4>
 8008d4a:	2f58      	cmp	r7, #88	; 0x58
 8008d4c:	f000 80a4 	beq.w	8008e98 <_printf_i+0x170>
 8008d50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d58:	e03a      	b.n	8008dd0 <_printf_i+0xa8>
 8008d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5e:	2b15      	cmp	r3, #21
 8008d60:	d8f6      	bhi.n	8008d50 <_printf_i+0x28>
 8008d62:	a001      	add	r0, pc, #4	; (adr r0, 8008d68 <_printf_i+0x40>)
 8008d64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008dd5 	.word	0x08008dd5
 8008d70:	08008d51 	.word	0x08008d51
 8008d74:	08008d51 	.word	0x08008d51
 8008d78:	08008d51 	.word	0x08008d51
 8008d7c:	08008d51 	.word	0x08008d51
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008d51 	.word	0x08008d51
 8008d88:	08008d51 	.word	0x08008d51
 8008d8c:	08008d51 	.word	0x08008d51
 8008d90:	08008d51 	.word	0x08008d51
 8008d94:	08008ee3 	.word	0x08008ee3
 8008d98:	08008e05 	.word	0x08008e05
 8008d9c:	08008ec5 	.word	0x08008ec5
 8008da0:	08008d51 	.word	0x08008d51
 8008da4:	08008d51 	.word	0x08008d51
 8008da8:	08008f05 	.word	0x08008f05
 8008dac:	08008d51 	.word	0x08008d51
 8008db0:	08008e05 	.word	0x08008e05
 8008db4:	08008d51 	.word	0x08008d51
 8008db8:	08008d51 	.word	0x08008d51
 8008dbc:	08008ecd 	.word	0x08008ecd
 8008dc0:	680b      	ldr	r3, [r1, #0]
 8008dc2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008dc6:	1d1a      	adds	r2, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	600a      	str	r2, [r1, #0]
 8008dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0a4      	b.n	8008f1e <_printf_i+0x1f6>
 8008dd4:	6825      	ldr	r5, [r4, #0]
 8008dd6:	6808      	ldr	r0, [r1, #0]
 8008dd8:	062e      	lsls	r6, r5, #24
 8008dda:	f100 0304 	add.w	r3, r0, #4
 8008dde:	d50a      	bpl.n	8008df6 <_printf_i+0xce>
 8008de0:	6805      	ldr	r5, [r0, #0]
 8008de2:	600b      	str	r3, [r1, #0]
 8008de4:	2d00      	cmp	r5, #0
 8008de6:	da03      	bge.n	8008df0 <_printf_i+0xc8>
 8008de8:	232d      	movs	r3, #45	; 0x2d
 8008dea:	426d      	negs	r5, r5
 8008dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df0:	230a      	movs	r3, #10
 8008df2:	485e      	ldr	r0, [pc, #376]	; (8008f6c <_printf_i+0x244>)
 8008df4:	e019      	b.n	8008e2a <_printf_i+0x102>
 8008df6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dfa:	6805      	ldr	r5, [r0, #0]
 8008dfc:	600b      	str	r3, [r1, #0]
 8008dfe:	bf18      	it	ne
 8008e00:	b22d      	sxthne	r5, r5
 8008e02:	e7ef      	b.n	8008de4 <_printf_i+0xbc>
 8008e04:	680b      	ldr	r3, [r1, #0]
 8008e06:	6825      	ldr	r5, [r4, #0]
 8008e08:	1d18      	adds	r0, r3, #4
 8008e0a:	6008      	str	r0, [r1, #0]
 8008e0c:	0628      	lsls	r0, r5, #24
 8008e0e:	d501      	bpl.n	8008e14 <_printf_i+0xec>
 8008e10:	681d      	ldr	r5, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <_printf_i+0xf2>
 8008e14:	0669      	lsls	r1, r5, #25
 8008e16:	d5fb      	bpl.n	8008e10 <_printf_i+0xe8>
 8008e18:	881d      	ldrh	r5, [r3, #0]
 8008e1a:	2f6f      	cmp	r7, #111	; 0x6f
 8008e1c:	bf0c      	ite	eq
 8008e1e:	2308      	moveq	r3, #8
 8008e20:	230a      	movne	r3, #10
 8008e22:	4852      	ldr	r0, [pc, #328]	; (8008f6c <_printf_i+0x244>)
 8008e24:	2100      	movs	r1, #0
 8008e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e2a:	6866      	ldr	r6, [r4, #4]
 8008e2c:	2e00      	cmp	r6, #0
 8008e2e:	bfa8      	it	ge
 8008e30:	6821      	ldrge	r1, [r4, #0]
 8008e32:	60a6      	str	r6, [r4, #8]
 8008e34:	bfa4      	itt	ge
 8008e36:	f021 0104 	bicge.w	r1, r1, #4
 8008e3a:	6021      	strge	r1, [r4, #0]
 8008e3c:	b90d      	cbnz	r5, 8008e42 <_printf_i+0x11a>
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d04d      	beq.n	8008ede <_printf_i+0x1b6>
 8008e42:	4616      	mov	r6, r2
 8008e44:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e48:	fb03 5711 	mls	r7, r3, r1, r5
 8008e4c:	5dc7      	ldrb	r7, [r0, r7]
 8008e4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e52:	462f      	mov	r7, r5
 8008e54:	42bb      	cmp	r3, r7
 8008e56:	460d      	mov	r5, r1
 8008e58:	d9f4      	bls.n	8008e44 <_printf_i+0x11c>
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d10b      	bne.n	8008e76 <_printf_i+0x14e>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	07df      	lsls	r7, r3, #31
 8008e62:	d508      	bpl.n	8008e76 <_printf_i+0x14e>
 8008e64:	6923      	ldr	r3, [r4, #16]
 8008e66:	6861      	ldr	r1, [r4, #4]
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	bfde      	ittt	le
 8008e6c:	2330      	movle	r3, #48	; 0x30
 8008e6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e76:	1b92      	subs	r2, r2, r6
 8008e78:	6122      	str	r2, [r4, #16]
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f8cd a000 	str.w	sl, [sp]
 8008e84:	aa03      	add	r2, sp, #12
 8008e86:	f7ff fedf 	bl	8008c48 <_printf_common>
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d14c      	bne.n	8008f28 <_printf_i+0x200>
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	b004      	add	sp, #16
 8008e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e98:	4834      	ldr	r0, [pc, #208]	; (8008f6c <_printf_i+0x244>)
 8008e9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e9e:	680e      	ldr	r6, [r1, #0]
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ea6:	061f      	lsls	r7, r3, #24
 8008ea8:	600e      	str	r6, [r1, #0]
 8008eaa:	d514      	bpl.n	8008ed6 <_printf_i+0x1ae>
 8008eac:	07d9      	lsls	r1, r3, #31
 8008eae:	bf44      	itt	mi
 8008eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8008eb4:	6023      	strmi	r3, [r4, #0]
 8008eb6:	b91d      	cbnz	r5, 8008ec0 <_printf_i+0x198>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	f023 0320 	bic.w	r3, r3, #32
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	e7af      	b.n	8008e24 <_printf_i+0xfc>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	2378      	movs	r3, #120	; 0x78
 8008ece:	4828      	ldr	r0, [pc, #160]	; (8008f70 <_printf_i+0x248>)
 8008ed0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ed4:	e7e3      	b.n	8008e9e <_printf_i+0x176>
 8008ed6:	065e      	lsls	r6, r3, #25
 8008ed8:	bf48      	it	mi
 8008eda:	b2ad      	uxthmi	r5, r5
 8008edc:	e7e6      	b.n	8008eac <_printf_i+0x184>
 8008ede:	4616      	mov	r6, r2
 8008ee0:	e7bb      	b.n	8008e5a <_printf_i+0x132>
 8008ee2:	680b      	ldr	r3, [r1, #0]
 8008ee4:	6826      	ldr	r6, [r4, #0]
 8008ee6:	1d1d      	adds	r5, r3, #4
 8008ee8:	6960      	ldr	r0, [r4, #20]
 8008eea:	600d      	str	r5, [r1, #0]
 8008eec:	0635      	lsls	r5, r6, #24
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	d501      	bpl.n	8008ef6 <_printf_i+0x1ce>
 8008ef2:	6018      	str	r0, [r3, #0]
 8008ef4:	e002      	b.n	8008efc <_printf_i+0x1d4>
 8008ef6:	0671      	lsls	r1, r6, #25
 8008ef8:	d5fb      	bpl.n	8008ef2 <_printf_i+0x1ca>
 8008efa:	8018      	strh	r0, [r3, #0]
 8008efc:	2300      	movs	r3, #0
 8008efe:	4616      	mov	r6, r2
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	e7ba      	b.n	8008e7a <_printf_i+0x152>
 8008f04:	680b      	ldr	r3, [r1, #0]
 8008f06:	1d1a      	adds	r2, r3, #4
 8008f08:	600a      	str	r2, [r1, #0]
 8008f0a:	681e      	ldr	r6, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4630      	mov	r0, r6
 8008f10:	6862      	ldr	r2, [r4, #4]
 8008f12:	f000 f82f 	bl	8008f74 <memchr>
 8008f16:	b108      	cbz	r0, 8008f1c <_printf_i+0x1f4>
 8008f18:	1b80      	subs	r0, r0, r6
 8008f1a:	6060      	str	r0, [r4, #4]
 8008f1c:	6863      	ldr	r3, [r4, #4]
 8008f1e:	6123      	str	r3, [r4, #16]
 8008f20:	2300      	movs	r3, #0
 8008f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f26:	e7a8      	b.n	8008e7a <_printf_i+0x152>
 8008f28:	4632      	mov	r2, r6
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	47d0      	blx	sl
 8008f32:	3001      	adds	r0, #1
 8008f34:	d0ab      	beq.n	8008e8e <_printf_i+0x166>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	079b      	lsls	r3, r3, #30
 8008f3a:	d413      	bmi.n	8008f64 <_printf_i+0x23c>
 8008f3c:	68e0      	ldr	r0, [r4, #12]
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	4298      	cmp	r0, r3
 8008f42:	bfb8      	it	lt
 8008f44:	4618      	movlt	r0, r3
 8008f46:	e7a4      	b.n	8008e92 <_printf_i+0x16a>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	4640      	mov	r0, r8
 8008f50:	47d0      	blx	sl
 8008f52:	3001      	adds	r0, #1
 8008f54:	d09b      	beq.n	8008e8e <_printf_i+0x166>
 8008f56:	3501      	adds	r5, #1
 8008f58:	68e3      	ldr	r3, [r4, #12]
 8008f5a:	9903      	ldr	r1, [sp, #12]
 8008f5c:	1a5b      	subs	r3, r3, r1
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	dcf2      	bgt.n	8008f48 <_printf_i+0x220>
 8008f62:	e7eb      	b.n	8008f3c <_printf_i+0x214>
 8008f64:	2500      	movs	r5, #0
 8008f66:	f104 0619 	add.w	r6, r4, #25
 8008f6a:	e7f5      	b.n	8008f58 <_printf_i+0x230>
 8008f6c:	08009809 	.word	0x08009809
 8008f70:	0800981a 	.word	0x0800981a

08008f74 <memchr>:
 8008f74:	4603      	mov	r3, r0
 8008f76:	b510      	push	{r4, lr}
 8008f78:	b2c9      	uxtb	r1, r1
 8008f7a:	4402      	add	r2, r0
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	d101      	bne.n	8008f86 <memchr+0x12>
 8008f82:	2000      	movs	r0, #0
 8008f84:	e003      	b.n	8008f8e <memchr+0x1a>
 8008f86:	7804      	ldrb	r4, [r0, #0]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	428c      	cmp	r4, r1
 8008f8c:	d1f6      	bne.n	8008f7c <memchr+0x8>
 8008f8e:	bd10      	pop	{r4, pc}

08008f90 <memcpy>:
 8008f90:	440a      	add	r2, r1
 8008f92:	4291      	cmp	r1, r2
 8008f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f98:	d100      	bne.n	8008f9c <memcpy+0xc>
 8008f9a:	4770      	bx	lr
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa2:	4291      	cmp	r1, r2
 8008fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa8:	d1f9      	bne.n	8008f9e <memcpy+0xe>
 8008faa:	bd10      	pop	{r4, pc}

08008fac <memmove>:
 8008fac:	4288      	cmp	r0, r1
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	eb01 0402 	add.w	r4, r1, r2
 8008fb4:	d902      	bls.n	8008fbc <memmove+0x10>
 8008fb6:	4284      	cmp	r4, r0
 8008fb8:	4623      	mov	r3, r4
 8008fba:	d807      	bhi.n	8008fcc <memmove+0x20>
 8008fbc:	1e43      	subs	r3, r0, #1
 8008fbe:	42a1      	cmp	r1, r4
 8008fc0:	d008      	beq.n	8008fd4 <memmove+0x28>
 8008fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fca:	e7f8      	b.n	8008fbe <memmove+0x12>
 8008fcc:	4601      	mov	r1, r0
 8008fce:	4402      	add	r2, r0
 8008fd0:	428a      	cmp	r2, r1
 8008fd2:	d100      	bne.n	8008fd6 <memmove+0x2a>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fde:	e7f7      	b.n	8008fd0 <memmove+0x24>

08008fe0 <_free_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d043      	beq.n	8009070 <_free_r+0x90>
 8008fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fec:	1f0c      	subs	r4, r1, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfb8      	it	lt
 8008ff2:	18e4      	addlt	r4, r4, r3
 8008ff4:	f000 f8d0 	bl	8009198 <__malloc_lock>
 8008ff8:	4a1e      	ldr	r2, [pc, #120]	; (8009074 <_free_r+0x94>)
 8008ffa:	6813      	ldr	r3, [r2, #0]
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	b933      	cbnz	r3, 800900e <_free_r+0x2e>
 8009000:	6063      	str	r3, [r4, #4]
 8009002:	6014      	str	r4, [r2, #0]
 8009004:	4628      	mov	r0, r5
 8009006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800900a:	f000 b8cb 	b.w	80091a4 <__malloc_unlock>
 800900e:	42a3      	cmp	r3, r4
 8009010:	d90a      	bls.n	8009028 <_free_r+0x48>
 8009012:	6821      	ldr	r1, [r4, #0]
 8009014:	1862      	adds	r2, r4, r1
 8009016:	4293      	cmp	r3, r2
 8009018:	bf01      	itttt	eq
 800901a:	681a      	ldreq	r2, [r3, #0]
 800901c:	685b      	ldreq	r3, [r3, #4]
 800901e:	1852      	addeq	r2, r2, r1
 8009020:	6022      	streq	r2, [r4, #0]
 8009022:	6063      	str	r3, [r4, #4]
 8009024:	6004      	str	r4, [r0, #0]
 8009026:	e7ed      	b.n	8009004 <_free_r+0x24>
 8009028:	461a      	mov	r2, r3
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	b10b      	cbz	r3, 8009032 <_free_r+0x52>
 800902e:	42a3      	cmp	r3, r4
 8009030:	d9fa      	bls.n	8009028 <_free_r+0x48>
 8009032:	6811      	ldr	r1, [r2, #0]
 8009034:	1850      	adds	r0, r2, r1
 8009036:	42a0      	cmp	r0, r4
 8009038:	d10b      	bne.n	8009052 <_free_r+0x72>
 800903a:	6820      	ldr	r0, [r4, #0]
 800903c:	4401      	add	r1, r0
 800903e:	1850      	adds	r0, r2, r1
 8009040:	4283      	cmp	r3, r0
 8009042:	6011      	str	r1, [r2, #0]
 8009044:	d1de      	bne.n	8009004 <_free_r+0x24>
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4401      	add	r1, r0
 800904c:	6011      	str	r1, [r2, #0]
 800904e:	6053      	str	r3, [r2, #4]
 8009050:	e7d8      	b.n	8009004 <_free_r+0x24>
 8009052:	d902      	bls.n	800905a <_free_r+0x7a>
 8009054:	230c      	movs	r3, #12
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	e7d4      	b.n	8009004 <_free_r+0x24>
 800905a:	6820      	ldr	r0, [r4, #0]
 800905c:	1821      	adds	r1, r4, r0
 800905e:	428b      	cmp	r3, r1
 8009060:	bf01      	itttt	eq
 8009062:	6819      	ldreq	r1, [r3, #0]
 8009064:	685b      	ldreq	r3, [r3, #4]
 8009066:	1809      	addeq	r1, r1, r0
 8009068:	6021      	streq	r1, [r4, #0]
 800906a:	6063      	str	r3, [r4, #4]
 800906c:	6054      	str	r4, [r2, #4]
 800906e:	e7c9      	b.n	8009004 <_free_r+0x24>
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	200002d8 	.word	0x200002d8

08009078 <_malloc_r>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	1ccd      	adds	r5, r1, #3
 800907c:	f025 0503 	bic.w	r5, r5, #3
 8009080:	3508      	adds	r5, #8
 8009082:	2d0c      	cmp	r5, #12
 8009084:	bf38      	it	cc
 8009086:	250c      	movcc	r5, #12
 8009088:	2d00      	cmp	r5, #0
 800908a:	4606      	mov	r6, r0
 800908c:	db01      	blt.n	8009092 <_malloc_r+0x1a>
 800908e:	42a9      	cmp	r1, r5
 8009090:	d903      	bls.n	800909a <_malloc_r+0x22>
 8009092:	230c      	movs	r3, #12
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	2000      	movs	r0, #0
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909a:	f000 f87d 	bl	8009198 <__malloc_lock>
 800909e:	4921      	ldr	r1, [pc, #132]	; (8009124 <_malloc_r+0xac>)
 80090a0:	680a      	ldr	r2, [r1, #0]
 80090a2:	4614      	mov	r4, r2
 80090a4:	b99c      	cbnz	r4, 80090ce <_malloc_r+0x56>
 80090a6:	4f20      	ldr	r7, [pc, #128]	; (8009128 <_malloc_r+0xb0>)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	b923      	cbnz	r3, 80090b6 <_malloc_r+0x3e>
 80090ac:	4621      	mov	r1, r4
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f862 	bl	8009178 <_sbrk_r>
 80090b4:	6038      	str	r0, [r7, #0]
 80090b6:	4629      	mov	r1, r5
 80090b8:	4630      	mov	r0, r6
 80090ba:	f000 f85d 	bl	8009178 <_sbrk_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d123      	bne.n	800910a <_malloc_r+0x92>
 80090c2:	230c      	movs	r3, #12
 80090c4:	4630      	mov	r0, r6
 80090c6:	6033      	str	r3, [r6, #0]
 80090c8:	f000 f86c 	bl	80091a4 <__malloc_unlock>
 80090cc:	e7e3      	b.n	8009096 <_malloc_r+0x1e>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	1b5b      	subs	r3, r3, r5
 80090d2:	d417      	bmi.n	8009104 <_malloc_r+0x8c>
 80090d4:	2b0b      	cmp	r3, #11
 80090d6:	d903      	bls.n	80090e0 <_malloc_r+0x68>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	441c      	add	r4, r3
 80090dc:	6025      	str	r5, [r4, #0]
 80090de:	e004      	b.n	80090ea <_malloc_r+0x72>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	bf0c      	ite	eq
 80090e6:	600b      	streq	r3, [r1, #0]
 80090e8:	6053      	strne	r3, [r2, #4]
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f85a 	bl	80091a4 <__malloc_unlock>
 80090f0:	f104 000b 	add.w	r0, r4, #11
 80090f4:	1d23      	adds	r3, r4, #4
 80090f6:	f020 0007 	bic.w	r0, r0, #7
 80090fa:	1ac2      	subs	r2, r0, r3
 80090fc:	d0cc      	beq.n	8009098 <_malloc_r+0x20>
 80090fe:	1a1b      	subs	r3, r3, r0
 8009100:	50a3      	str	r3, [r4, r2]
 8009102:	e7c9      	b.n	8009098 <_malloc_r+0x20>
 8009104:	4622      	mov	r2, r4
 8009106:	6864      	ldr	r4, [r4, #4]
 8009108:	e7cc      	b.n	80090a4 <_malloc_r+0x2c>
 800910a:	1cc4      	adds	r4, r0, #3
 800910c:	f024 0403 	bic.w	r4, r4, #3
 8009110:	42a0      	cmp	r0, r4
 8009112:	d0e3      	beq.n	80090dc <_malloc_r+0x64>
 8009114:	1a21      	subs	r1, r4, r0
 8009116:	4630      	mov	r0, r6
 8009118:	f000 f82e 	bl	8009178 <_sbrk_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d1dd      	bne.n	80090dc <_malloc_r+0x64>
 8009120:	e7cf      	b.n	80090c2 <_malloc_r+0x4a>
 8009122:	bf00      	nop
 8009124:	200002d8 	.word	0x200002d8
 8009128:	200002dc 	.word	0x200002dc

0800912c <_realloc_r>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	4607      	mov	r7, r0
 8009130:	4614      	mov	r4, r2
 8009132:	460e      	mov	r6, r1
 8009134:	b921      	cbnz	r1, 8009140 <_realloc_r+0x14>
 8009136:	4611      	mov	r1, r2
 8009138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800913c:	f7ff bf9c 	b.w	8009078 <_malloc_r>
 8009140:	b922      	cbnz	r2, 800914c <_realloc_r+0x20>
 8009142:	f7ff ff4d 	bl	8008fe0 <_free_r>
 8009146:	4625      	mov	r5, r4
 8009148:	4628      	mov	r0, r5
 800914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914c:	f000 f830 	bl	80091b0 <_malloc_usable_size_r>
 8009150:	42a0      	cmp	r0, r4
 8009152:	d20f      	bcs.n	8009174 <_realloc_r+0x48>
 8009154:	4621      	mov	r1, r4
 8009156:	4638      	mov	r0, r7
 8009158:	f7ff ff8e 	bl	8009078 <_malloc_r>
 800915c:	4605      	mov	r5, r0
 800915e:	2800      	cmp	r0, #0
 8009160:	d0f2      	beq.n	8009148 <_realloc_r+0x1c>
 8009162:	4631      	mov	r1, r6
 8009164:	4622      	mov	r2, r4
 8009166:	f7ff ff13 	bl	8008f90 <memcpy>
 800916a:	4631      	mov	r1, r6
 800916c:	4638      	mov	r0, r7
 800916e:	f7ff ff37 	bl	8008fe0 <_free_r>
 8009172:	e7e9      	b.n	8009148 <_realloc_r+0x1c>
 8009174:	4635      	mov	r5, r6
 8009176:	e7e7      	b.n	8009148 <_realloc_r+0x1c>

08009178 <_sbrk_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	2300      	movs	r3, #0
 800917c:	4d05      	ldr	r5, [pc, #20]	; (8009194 <_sbrk_r+0x1c>)
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 fd62 	bl	8001c4c <_sbrk>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_sbrk_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_sbrk_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000fc8 	.word	0x20000fc8

08009198 <__malloc_lock>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__malloc_lock+0x8>)
 800919a:	f000 b811 	b.w	80091c0 <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	20000fd0 	.word	0x20000fd0

080091a4 <__malloc_unlock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__malloc_unlock+0x8>)
 80091a6:	f000 b80c 	b.w	80091c2 <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000fd0 	.word	0x20000fd0

080091b0 <_malloc_usable_size_r>:
 80091b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b4:	1f18      	subs	r0, r3, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bfbc      	itt	lt
 80091ba:	580b      	ldrlt	r3, [r1, r0]
 80091bc:	18c0      	addlt	r0, r0, r3
 80091be:	4770      	bx	lr

080091c0 <__retarget_lock_acquire_recursive>:
 80091c0:	4770      	bx	lr

080091c2 <__retarget_lock_release_recursive>:
 80091c2:	4770      	bx	lr

080091c4 <_init>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr

080091d0 <_fini>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr
